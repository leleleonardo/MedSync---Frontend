[{"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\index.js":"1","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\App.js":"2","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\themes.js":"3","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\routes.js":"4","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\context\\DrawerContext.jsx":"5","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Login\\Login.js":"6","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Cadastro\\Cadastro3.js":"7","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\UsuariosListagem\\UsuariosEditar.js":"8","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Cadastro\\Cadastro2.js":"9","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\UsuariosListagem\\UsuariosCadastrar.js":"10","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\UsuariosListagem\\ConsultasListagem\\EditarConsulta.js":"11","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\UsuariosListagem\\ConsultasListagem\\AdicionarConsulta2.js":"12","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\UsuariosListagem\\ConsultasListagem\\AdicionarConsulta.js":"13","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\context\\AuthContext.jsx":"14","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Login\\index.js":"15","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Cadastro\\index.js":"16","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\UsuariosListagem\\index.js":"17","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\UsuariosListagem\\ConsultasListagem\\index.js":"18","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Configuracoes\\index.js":"19","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Dashboard\\index.js":"20","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\CheckNewDoctors\\index.js":"21","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Perfil\\index.js":"22","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\RecoverAccount\\index.js":"23","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\ResetPassword\\index.js":"24","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\NotFoundPage\\index.js":"25","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Agenda\\index.js":"26","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\HistoricoConsultas\\index.js":"27","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Consultas\\AgendarConsulta\\index.js":"28","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Consultas\\MinhasConsultas\\index.js":"29","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\services\\api.js":"30","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\styles\\Cadastro\\Cadastro.js":"31","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\layouts\\BaseLayout.jsx":"32","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\FormEndereco\\UpdateAddressForm.js":"33","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\FormPaciente\\UpdatePatientForm.js":"34","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\FormDadosPessoais\\UpdateUserForm.js":"35","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\styles\\Cadastro\\index.js":"36","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\styles\\Login\\index.js":"37","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\ReactBigCalendar\\index.js":"38","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\DoctorsAppointmentHistory\\index.js":"39","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\PatientsAppointmentHistory\\index.js":"40","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\CardConsulta\\index.js":"41","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\Prontuario\\FormProntuario.js":"42","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\Prontuario\\index.js":"43","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\Prontuario\\Registro.js":"44","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\Configuracoes\\FormEndereco.js":"45","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\Configuracoes\\FormPaciente.js":"46","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\Configuracoes\\FormUsuario.js":"47","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Cadastro\\UnstyledTabsCustomized.js":"48","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\FormPaciente\\CreatePatientForm.js":"49","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\FormDadosPessoais\\CreateUserForm.js":"50","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\FormEndereco\\CreateAddressForm.js":"51","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\styles\\Login\\Login.js":"52","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\styles\\Configuracoes\\index.js":"53","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\styles\\UsuariosListagem\\index.js":"54","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\FormMedico\\index.js":"55","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Configuracoes\\DisponibilidadeMedica.jsx":"56","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\Navbar\\index.jsx":"57","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\Navbar\\ListItemLink\\index.js":"58","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\Navbar\\ListItemLink\\ListItemLink.jsx":"59","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\NavBar\\index.jsx":"60","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\NavBar\\ListItemLink\\index.js":"61","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\NavBar\\ListItemLink\\ListItemLink.jsx":"62"},{"size":201,"mtime":1745704561259,"results":"63","hashOfConfig":"64"},{"size":450,"mtime":1745704561259,"results":"65","hashOfConfig":"64"},{"size":859,"mtime":1745704561261,"results":"66","hashOfConfig":"64"},{"size":5113,"mtime":1745709004627,"results":"67","hashOfConfig":"64"},{"size":600,"mtime":1745702393732,"results":"68","hashOfConfig":"64"},{"size":5711,"mtime":1747781965751,"results":"69","hashOfConfig":"64"},{"size":3996,"mtime":1745702980187,"results":"70","hashOfConfig":"64"},{"size":9004,"mtime":1745704522959,"results":"71","hashOfConfig":"64"},{"size":30596,"mtime":1745702930655,"results":"72","hashOfConfig":"64"},{"size":145,"mtime":1745704474884,"results":"73","hashOfConfig":"64"},{"size":2297,"mtime":1745704412131,"results":"74","hashOfConfig":"64"},{"size":7758,"mtime":1745704370598,"results":"75","hashOfConfig":"64"},{"size":8282,"mtime":1745778503221,"results":"76","hashOfConfig":"64"},{"size":2176,"mtime":1745781642568,"results":"77","hashOfConfig":"64"},{"size":4607,"mtime":1745787699558,"results":"78","hashOfConfig":"64"},{"size":25583,"mtime":1745703138798,"results":"79","hashOfConfig":"64"},{"size":7871,"mtime":1745704538903,"results":"80","hashOfConfig":"64"},{"size":3501,"mtime":1745704427047,"results":"81","hashOfConfig":"64"},{"size":4449,"mtime":1745703313950,"results":"82","hashOfConfig":"64"},{"size":4049,"mtime":1747784906559,"results":"83","hashOfConfig":"64"},{"size":7710,"mtime":1745703208353,"results":"84","hashOfConfig":"64"},{"size":9028,"mtime":1745703981532,"results":"85","hashOfConfig":"64"},{"size":4329,"mtime":1745704041780,"results":"86","hashOfConfig":"64"},{"size":3598,"mtime":1745704191811,"results":"87","hashOfConfig":"64"},{"size":916,"mtime":1745703909992,"results":"88","hashOfConfig":"64"},{"size":573,"mtime":1745702871234,"results":"89","hashOfConfig":"64"},{"size":1159,"mtime":1745703752535,"results":"90","hashOfConfig":"64"},{"size":1733,"mtime":1745703447252,"results":"91","hashOfConfig":"64"},{"size":3490,"mtime":1745703502032,"results":"92","hashOfConfig":"64"},{"size":455,"mtime":1745703700486,"results":"93","hashOfConfig":"64"},{"size":1799,"mtime":1745703700487,"results":"94","hashOfConfig":"64"},{"size":1356,"mtime":1745702777695,"results":"95","hashOfConfig":"64"},{"size":8101,"mtime":1745703162787,"results":"96","hashOfConfig":"64"},{"size":6634,"mtime":1745703162790,"results":"97","hashOfConfig":"64"},{"size":6385,"mtime":1745702803140,"results":"98","hashOfConfig":"64"},{"size":1400,"mtime":1745703700487,"results":"99","hashOfConfig":"64"},{"size":1206,"mtime":1745704073852,"results":"100","hashOfConfig":"64"},{"size":3333,"mtime":1745703559264,"results":"101","hashOfConfig":"64"},{"size":3367,"mtime":1745702803138,"results":"102","hashOfConfig":"64"},{"size":3377,"mtime":1745703399518,"results":"103","hashOfConfig":"64"},{"size":10406,"mtime":1745702803133,"results":"104","hashOfConfig":"64"},{"size":3287,"mtime":1745703399519,"results":"105","hashOfConfig":"64"},{"size":1824,"mtime":1745703472022,"results":"106","hashOfConfig":"64"},{"size":981,"mtime":1745703472021,"results":"107","hashOfConfig":"64"},{"size":10181,"mtime":1745702803135,"results":"108","hashOfConfig":"64"},{"size":7729,"mtime":1745702803136,"results":"109","hashOfConfig":"64"},{"size":8926,"mtime":1745702803137,"results":"110","hashOfConfig":"64"},{"size":2192,"mtime":1745703013890,"results":"111","hashOfConfig":"64"},{"size":7089,"mtime":1745703162790,"results":"112","hashOfConfig":"64"},{"size":9099,"mtime":1745702803139,"results":"113","hashOfConfig":"64"},{"size":7512,"mtime":1745703162787,"results":"114","hashOfConfig":"64"},{"size":1311,"mtime":1745704073851,"results":"115","hashOfConfig":"64"},{"size":1281,"mtime":1745704073850,"results":"116","hashOfConfig":"64"},{"size":299,"mtime":1745704073853,"results":"117","hashOfConfig":"64"},{"size":5171,"mtime":1745703162788,"results":"118","hashOfConfig":"64"},{"size":17097,"mtime":1745778526297,"results":"119","hashOfConfig":"64"},{"size":5507,"mtime":1745703399515,"results":"120","hashOfConfig":"64"},{"size":72,"mtime":1745703399514,"results":"121","hashOfConfig":"64"},{"size":900,"mtime":1745703399513,"results":"122","hashOfConfig":"64"},{"size":5507,"mtime":1745703399515,"results":"123","hashOfConfig":"64"},{"size":72,"mtime":1745703399514,"results":"124","hashOfConfig":"64"},{"size":900,"mtime":1745703399513,"results":"125","hashOfConfig":"64"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},"wh6slz",{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"128"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"128"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"128"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"128"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"128"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"128"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"128"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"128"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"128"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"128"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"128"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"128"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"128"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"128"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"128"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"128"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"128"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"128"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"128"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"128"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"128"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"128"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"128"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"128"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"128"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"128"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"128"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"128"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"128"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"128"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"128"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"128"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"276"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"276"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"276"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"128"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"128"},"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\index.js",[],["288","289"],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\App.js",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\themes.js",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\routes.js",["290","291","292","293","294"],"import React from 'react'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\n\r\nimport { Navigate, Routes } from 'react-router-dom'\r\nimport AuthProvider, { useAuthContext } from './context/AuthContext'\r\n\r\nimport Cadastro from './pages/Cadastro'\r\nimport Cadastro2 from './pages/Cadastro/Cadastro2'\r\nimport Cadastro3 from './pages/Cadastro/Cadastro3'\r\nimport Login from './pages/Login'\r\nimport Login2 from './pages/Login/Login'\r\nimport Dashboard from './pages/Dashboard'\r\nimport Perfil from './pages/Perfil'\r\nimport Configuracoes from './pages/Configuracoes'\r\nimport DisponibilidadeMedica from './pages/Configuracoes/DisponibilidadeMedica'\r\nimport UsuariosListagem from './pages/UsuariosListagem'\r\nimport CheckNewDoctors from './pages/CheckNewDoctors'\r\nimport UsuariosEditar from './pages/UsuariosListagem/UsuariosEditar'\r\nimport UsuariosCadastrar from './pages/UsuariosListagem/UsuariosCadastrar'\r\nimport ResetPassword from './pages/ResetPassword'\r\nimport AgendarConsulta from './pages/Consultas/AgendarConsulta'\r\nimport MinhasConsultas from './pages/Consultas/MinhasConsultas'\r\nimport RecoverAccount from './pages/RecoverAccount'\r\nimport ConsultasListagem from './pages/UsuariosListagem/ConsultasListagem'\r\nimport EditarConsulta from './pages/UsuariosListagem/ConsultasListagem/EditarConsulta'\r\nimport AdicionarConsulta from './pages/UsuariosListagem/ConsultasListagem/AdicionarConsulta'\r\nimport AdicionarConsulta2 from './pages/UsuariosListagem/ConsultasListagem/AdicionarConsulta2'\r\nimport NotFoundPage from './pages/NotFoundPage'\r\nimport Agenda from './pages/Agenda'\r\nimport HistoricoConsultas from './pages/HistoricoConsultas'\r\n\r\nexport default function AppRoutes() {\r\n    const Private = ({children}) => {\r\n        const { authenticated, loading } = useAuthContext()\r\n\r\n        if (loading) {\r\n            return <div>Carregando...</div>\r\n        }\r\n        \r\n        if(!authenticated) {\r\n            return <Navigate to=\"/\"/>\r\n        }\r\n\r\n        return children\r\n    }\r\n    \r\n    const Logged = ({children}) => {\r\n        const { authenticated } = useAuthContext()\r\n\r\n        if(authenticated) {\r\n            return <Navigate to=\"/inicio\"/>\r\n        }\r\n        return children\r\n    }\r\n\r\n    return (\r\n        <Router>\r\n            <AuthProvider>\r\n                <Routes>\r\n                    {/* Views Refatoradas */}\r\n                    <Route path='/login' exact element={<Login />} /> {/* View Antiga */}\r\n                    <Route path='/' exact element={<Logged><Login2/></Logged>}/>\r\n\r\n                    <Route path='/cadastroAntigo' exact element={<Cadastro/>} /> {/* View Antiga */}\r\n                    <Route path='/cadastro1' exact element={<Logged><Cadastro2/></Logged>} />\r\n                    <Route path='/cadastro' exact element={<Logged><Cadastro3/></Logged>} />\r\n                    \r\n                    <Route path='/recuperar-senha' exact element={<RecoverAccount/>} />\r\n                    <Route path='/usuario/redefinir_senha/:token' exact element={<ResetPassword/>} />\r\n                    {/* <Route path='/login' exact element={Login} /> Mesma página que a rota raiz */}\r\n                    <Route path='/inicio' exact element={<Private><Dashboard /></Private>} /> \r\n                    <Route path='/perfil' exact element={<Private><Perfil/></Private>} />\r\n                    {/* <Route path='/config' exact element={<Private><Configuracoes/></Private>} /> */}\r\n                    <Route path='/config/disponibilidademedica' exact element={<Private><DisponibilidadeMedica/></Private>} />\r\n                    <Route path='/admin' exact element={<Private><UsuariosListagem/></Private>} /> \r\n                    <Route path='/novos_medicos' exact element={<Private><CheckNewDoctors/></Private>} /> \r\n                    <Route path='/usuario/editar/:id' exact element={<Private><UsuariosEditar/></Private>} /> {/* Falta resolver o problema do value={xxx} */}\r\n                    {/* <Route path='/usuario/:id' exact element={UsuariosEditar} /> Mesma página que a rota usuario/editar/:id */}\r\n                    {/* <Route path='/consulta/agendar' exact element={<Private><AgendarConsulta/></Private>} /> */}\r\n                    <Route path='/consultas' exact element={<Private><MinhasConsultas/></Private>} />\r\n                    <Route path='/agenda' exact element={<Private><Agenda/></Private>} />\r\n                    {/* <Route path='/consulta/editar/:id' exact element={<Private><EditarConsulta/></Private>} /> */}\r\n                    <Route path='/consulta/adicionar' exact element={<Private><AdicionarConsulta2/></Private>} />\r\n                    <Route path='/usuario/consultas/:id' exact element={<Private><ConsultasListagem/></Private>} />\r\n                    {/* <Route path='/usuario/cadastrar' exact element={<Private><UsuariosCadastrar/></Private>} /> */}\r\n                    <Route path='/historico' exact element={<Private><HistoricoConsultas/></Private>} />\r\n                    <Route path=\"*\" element={<Private><NotFoundPage/></Private>} />\r\n                </Routes>\r\n            </AuthProvider>\r\n        </Router>\r\n    )\r\n}","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\context\\DrawerContext.jsx",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Login\\Login.js",["295","296"],"import {useState} from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport {TextField, Link, Button, Modal, Box} from '@mui/material';\r\nimport {Visibility, VisibilityOff } from '@mui/icons-material'\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from 'yup';\r\n\r\nimport { useAuthContext } from '../../context/AuthContext'\r\nimport logo from '../../img/logoAzulHoriz.png'\r\nimport RecoverAccount from '../RecoverAccount'\r\n\r\nimport {\r\n    Container,\r\n    Left,\r\n    Right,\r\n    Img,\r\n    Form,\r\n    Div,\r\n    LinkStyled,\r\n    DivCadastreSe,\r\n    DivEsqueceuASenha\r\n} from '../../styles/Login/Login'\r\n\r\nlet Login = () => {\r\n    const navigate = useNavigate()\r\n    const { login } = useAuthContext()\r\n    const [showPassword, setShowPassword] = useState(false)\r\n    const [open, setOpen] = useState(false);\r\n    \r\n    const handleOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    function toggleShowPassword(e){\r\n        e.preventDefault()\r\n        setShowPassword(!showPassword);\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n          email: \"\",\r\n          password: \"\",\r\n        },\r\n        validationSchema: yup.object({\r\n          email: yup\r\n            .string()\r\n            .email(\"E-mail inválido.\")\r\n            .required(\"O campo é obrigatório.\"),\r\n          password: yup\r\n            .string()\r\n            .required(\"O campo é obrigatório.\")\r\n        }),\r\n        onSubmit: (values) => {\r\n            login(values.email, values.password)\r\n        },\r\n      });\r\n\r\n    return(\r\n        <Container>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box style={{position: 'absolute', display: 'flex', flexDirection: 'column', alignItems: 'flex-end', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', backgroundColor: '#fff', boxShadow: 24, p: 4,padding: '0px 1.5rem 1.5rem 1.5rem'}}>\r\n                    <Button onClick={handleClose} color='error' style={{fontSize: '25px', fontWeight: 'bold'}}>X</Button>\r\n                    <div style={{display: 'flex', width: '100%'}}>\r\n                        <div style={{flex: 1}}>\r\n                            <RecoverAccount handleClose={handleClose}/>\r\n                        </div>\r\n                    </div>\r\n                </Box>\r\n            </Modal>\r\n            <Right/>\r\n            <Left>\r\n                <Img src={logo} alt=\"Logo\"/>\r\n\r\n                <h1>Login</h1>\r\n\r\n                <Form onSubmit={formik.handleSubmit}>\r\n                    <Div>\r\n                        <TextField \r\n                            fullWidth \r\n                            error={formik.touched.email && formik.errors.email}\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            label=\"E-mail\" \r\n                            variant=\"outlined\" \r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.email}/>\r\n                            \r\n                            {formik.touched.email && formik.errors.email ? (\r\n                                <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                            ) : null}\r\n                    </Div>\r\n\r\n                    <Div>\r\n                        <TextField \r\n                            fullWidth \r\n                            error={formik.touched.password && formik.errors.password}\r\n                            id=\"password\" \r\n                            name=\"password\"\r\n                            type={showPassword ? \"text\" : \"password\"} \r\n                            label=\"Senha\" \r\n                            variant=\"outlined\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.password}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <div onClick={toggleShowPassword} style={{cursor: 'pointer', color: '#343434'}}>\r\n                                        {showPassword ? <Visibility size={20} /> : <VisibilityOff size={20} />}\r\n                                    </div>  \r\n                                ),\r\n                            }}\r\n                        />\r\n                        \r\n\r\n                        {formik.touched.password && formik.errors.password ? (\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                        ) : null}\r\n                    </Div>\r\n\r\n                    <DivEsqueceuASenha>\r\n                        <LinkStyled underline=\"hover\" onClick={handleOpen}>Esqueceu a senha?</LinkStyled>\r\n                    </DivEsqueceuASenha>\r\n\r\n                    <Div>\r\n                    <Button\r\n    fullWidth\r\n    variant=\"contained\"\r\n    size=\"large\"\r\n    onClick={formik.handleSubmit}\r\n    sx={{\r\n        backgroundColor: 'green',\r\n        '&:hover': {\r\n            backgroundColor: 'darkgreen'\r\n        }\r\n    }}\r\n>\r\n    Login\r\n</Button>\r\n                    </Div>\r\n\r\n                </Form>\r\n\r\n                <LinkStyled\r\n    underline=\"hover\"\r\n    onClick={() => navigate('/cadastro')}\r\n    sx={{ color: 'darkgreen', fontWeight: 'bold' }}\r\n>\r\n    Cadastre-se\r\n</LinkStyled>\r\n\r\n                \r\n            </Left>\r\n            \r\n            \r\n\r\n        </Container> \r\n    )\r\n}\r\n\r\nexport default Login","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Cadastro\\Cadastro3.js",["297","298"],"import {useEffect, useState} from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport {Button, Radio, RadioGroup, FormControlLabel, Alert } from '@mui/material';\r\nimport {ChevronLeft} from '@mui/icons-material'\r\n\r\nimport logo from '../../img/logoAzulHoriz.png'\r\nimport CreateUserType from '../../components/FormDadosPessoais/CreateUserForm'\r\nimport CreateAddressForm from '../../components/FormEndereco/CreateAddressForm'\r\nimport CreatePatientForm from '../../components/FormPaciente/CreatePatientForm'\r\nimport CreateDoctorForm from '../../components/FormMedico'\r\n\r\nimport {\r\n    Container,\r\n    Left,\r\n    Right,\r\n} from '../../styles/Cadastro/Cadastro'\r\n\r\nlet Cadastro3 = () => {\r\n    const navigate = useNavigate()\r\n    const [userType, setUserType] = useState(null)\r\n    const [userId, setUserId] = useState(null)\r\n    const [step, setStep] = useState(1)\r\n\r\n    const handleOnChange = (n) => setStep(n)\r\n    const handleOnSetUserId = (id) => setUserId(id)\r\n\r\n    return(\r\n        <Container>\r\n            <Left>\r\n                <Button fullWidth variant=\"contained\" size=\"large\" onClick={() => navigate('/')} style={{borderRadius: '0px'}}><ChevronLeft fontSize=\"large\" /> Voltar</Button>\r\n            </Left>\r\n\r\n            <Right>\r\n                <img src={logo} alt=\"Logo\" style={{width: '50%'}}/>\r\n                <h1 style={{margin: '1rem'}}>Criar Conta</h1>\r\n                \r\n                {userType === null && (\r\n                    <>\r\n                        <h2>Escolha o tipo:</h2>\r\n                        <RadioGroup\r\n                            row\r\n                            aria-labelledby=\"demo-row-radio-buttons-group-label\"\r\n                            name=\"row-radio-buttons-group\"\r\n                        >\r\n                            <FormControlLabel \r\n                                value=\"Paciente\" \r\n                                control={<Radio sx={{'& .MuiSvgIcon-root': {fontSize: 28,},}}/>} \r\n                                label=\"Paciente\" \r\n                                labelPlacement=\"top\"\r\n                                onChange={e => setUserType(e.target.value)}\r\n                            />\r\n                            <FormControlLabel \r\n                                value=\"Medico\" \r\n                                control={\r\n                                    <Radio sx={{'& .MuiSvgIcon-root': {fontSize: 28,},}}/>\r\n                                }  \r\n                                label=\"Médico\" \r\n                                labelPlacement=\"top\"\r\n                                onChange={e => setUserType(e.target.value)}\r\n                            />\r\n                        </RadioGroup>\r\n                    </>\r\n                )}\r\n\r\n                {userType !== null && step === 1  &&(\r\n                    <CreateUserType handleOnChange={handleOnChange} handleOnSetUserId={handleOnSetUserId} type={userType}/>\r\n                )}\r\n\r\n                {step === 2 && userId && (\r\n                    <CreateAddressForm handleOnChange={handleOnChange} userId={userId}/>\r\n                )}\r\n\r\n                {userType === 'Paciente' && step === 3 && userId && (\r\n                    <CreatePatientForm userId={userId}/>\r\n                )}\r\n\r\n                {userType === 'Medico' && step === 3 && userId && (\r\n                    <>\r\n                        <CreateDoctorForm userId={userId}/>\r\n                    </>\r\n                )}\r\n\r\n                {/* {userType === 'Medico' && (\r\n                    <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                        <Alert severity=\"warning\" style={{flex: 1, width: '45vw', minWidth: '300px', textAlign: 'center'}}>Em construção!</Alert>\r\n                        <Button onClick={() => setUserType(null)} style={{borderRadius: '0px'}}>Voltar</Button>\r\n                    </div>\r\n                )} */}\r\n                             \r\n            </Right>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Cadastro3","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\UsuariosListagem\\UsuariosEditar.js",["299","300"],"import React, { useState, useEffect } from 'react'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport { AccountBox, ArrowBack, Email, Lock } from '@mui/icons-material'\r\nimport { Box, Button, FormControl, InputAdornment, InputLabel, Paper, NativeSelect, TextField, Snackbar, IconButton, Alert } from '@mui/material'\r\nimport api from '../../services/api'\r\nimport { Link } from 'react-router-dom'\r\nimport { makeStyles } from '@mui/styles'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    buttonBack: {\r\n        borderStyle: 'none',\r\n        borderRadius: 10\r\n    },\r\n    container: {\r\n        marginLeft: 70,\r\n        display: 'flex',\r\n        padding: 10,\r\n        alignItems: 'right',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        width: 1000,\r\n        height: 550\r\n    },\r\n    containerItem: {\r\n        flex: 1,\r\n        marginLeft: 30\r\n    }\r\n}))\r\n\r\nfunction UsuariosEditar() {\r\n    const navigate = useNavigate()\r\n    const classes = useStyles()\r\n    const [nome, setNome] = useState(\"\")\r\n    const [dt_nascimento, setDt_Nascimento] = useState(\"\")\r\n    const [genero, setGenero] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [senha, setSenha] = useState(\"\")\r\n    const [confirmasenha, setConfirmaSenha] = useState(\"\")\r\n    const { id } = useParams()\r\n    const [open, setOpen] = useState(false);\r\n    const [open1, setOpen1] = useState(false);\r\n\r\n    useEffect(() => {\r\n      async function getUsuario() {\r\n        var response = await api.get(`/usuario/${id}`)\r\n        // console.log(response)\r\n        setNome(response.data.nome);\r\n        setDt_Nascimento(response.data.dt_nascimento);\r\n        setGenero(response.data.genero);\r\n        setEmail(response.data.email);\r\n        setSenha(response.data.senha);\r\n      }\r\n      getUsuario();\r\n    }, [])\r\n\r\n    async function atualizar(id){\r\n        const data = {nome, dt_nascimento, genero, email, senha}\r\n          if(nome !== '' && dt_nascimento !== '' && genero !== '' && email !== '' && senha !== ''){\r\n              console.log('1')\r\n            if(!senha) {\r\n              handleClick1()\r\n            }else {\r\n                console.log('3')\r\n              try {\r\n                console.log('4')\r\n                const response = await api.put(`/usuario/editar/${id}`, {data});\r\n                console.log(response.data)\r\n                handleClick()\r\n                setTimeout(() => {\r\n                    navigate('/admin');\r\n                }, 3000)\r\n            } catch (err) {\r\n                console.error(\"ops! ocorreu um erro\" + err);\r\n            }\r\n          }\r\n        }\r\n    }\r\n\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n    };\t\r\n    \r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleClick1 = () => {\r\n        setOpen1(true);\r\n    };\t\r\n    \r\n    const handleClose1 = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen1(false);\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n            open={open}\r\n            autoHideDuration={6000}\r\n            onClose={handleClose}\r\n            style={{width: '40%'}}\r\n        >\r\n            <Alert variant=\"filled\" severity=\"success\" onClose={handleClose} sx={{ width: '100%' }}>Alteração realizada.</Alert>\r\n        </Snackbar>\r\n\r\n        <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n            open={open1}\r\n            autoHideDuration={6000}\r\n            onClose={handleClose1}\r\n            style={{width: '40%'}}\r\n        >\r\n            <Alert variant=\"filled\" severity=\"warning\" onClose={handleClose1} sx={{ width: '100%' }}>Por favor, digite a senha para confirmar a alteração.</Alert>\r\n        </Snackbar>\r\n\r\n                <Link to=\"/admin\">\r\n                    <Button type=\"link\" className={classes.buttonBack}>\r\n                        <ArrowBack/>\r\n                    </Button>\r\n                </Link>\r\n              <Paper className={classes.container}>\r\n                    <h1 className={classes.containerItem}>Atualizar Dados</h1>\r\n                    <Box className={classes.containerItem}>\r\n                        <TextField\r\n                            style={{width: 400}}\r\n                            variant=\"filled\"\r\n                            label=\"Informe seu nome\"\r\n                            id=\"nome\"\r\n                            value={nome}\r\n                            onChange={e => setNome(e.target.value)}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <AccountBox />\r\n                                </InputAdornment> ),}}\r\n                        />\r\n                        <TextField\r\n                            style={{width: 400, marginLeft: 15}}\r\n                            variant=\"filled\"\r\n                            type=\"date\"\r\n                            label=\"Informe sua data de nascimento\"\r\n                            id=\"dt_nascimento\"\r\n                            value={dt_nascimento}\r\n                            onChange={e => setDt_Nascimento(e.target.value)}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                    </Box>\r\n                    <Box className={classes.containerItem}>\r\n                        <FormControl className={classes.formControl}>\r\n                        <InputLabel>Gênero</InputLabel>\r\n                            <NativeSelect\r\n                                style={{width: 400}}\r\n                                variant=\"filled\"\r\n                                id=\"genero\"\r\n                                value={genero}\r\n                                onChange={e => setGenero(e.target.value)}\r\n                            >\r\n                                <option aria-label=\"None\" value=\"\" />\r\n                                <option value=\"H\">Homem</option>\r\n                                <option value=\"M\">Mulher</option>\r\n                                <option value=\"O\">Outro</option>\r\n                            </NativeSelect>\r\n                            </FormControl>\r\n                       <TextField\r\n                            style={{width: 400, marginLeft: 15}}\r\n                            type=\"email\"\r\n                            variant=\"filled\"\r\n                            label=\"Informe seu email\"\r\n                            id=\"email\"\r\n                            value={email}\r\n                            onChange={e => setEmail(e.target.value)}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <Email />\r\n                                </InputAdornment> ),}}\r\n                      />\r\n                    </Box>\r\n                    <Box className={classes.containerItem}>\r\n                        <TextField\r\n                            style={{width: 400}}\r\n                            type=\"password\"\r\n                            variant=\"filled\"\r\n                            label=\"Informe sua senha\"\r\n                            id=\"senha\"\r\n                            value={senha}\r\n                            onChange={e => setSenha(e.target.value)}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <Lock/>\r\n                                </InputAdornment> ),}}\r\n                        />\r\n                        <TextField\r\n                            style={{width: 400, marginLeft: 15}}\r\n                            type=\"password\"\r\n                            variant=\"filled\"\r\n                            label=\"Digite a senha novamente\"\r\n                            id=\"confirmasenha\"\r\n                            value={confirmasenha}\r\n                            onChange={e => setConfirmaSenha(e.target.value)}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <Lock/>\r\n                                </InputAdornment> ),}}\r\n                        />\r\n                    </Box>\r\n                    <Box className={classes.containerItem}>\r\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\" onClick={() => atualizar(id)}>\r\n                            Confirmar Alteração\r\n                        </Button>\r\n                    </Box>\r\n                </Paper>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default UsuariosEditar","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Cadastro\\Cadastro2.js",["301","302"],"import {useEffect, useState} from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport {TextField, Button, Select, MenuItem, InputLabel, FormControl, Snackbar, IconButton, Alert } from '@mui/material';\r\nimport {ChevronLeft, ChevronRight} from '@mui/icons-material'\r\n\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from 'yup';\r\n\r\nimport api from '../../services/api'\r\nimport logo from '../../img/logoAzulHoriz.png'\r\n\r\nimport {\r\n    Container,\r\n    Left,\r\n    Right,\r\n    Form,\r\n    BirthDate,\r\n    Div,\r\n    ItemLeft,\r\n    ItemRight,\r\n} from '../../styles/Cadastro/Cadastro'\r\n\r\nlet Cadastro2 = () => {\r\n    const navigate = useNavigate()\r\n    const [open, setOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        step1();\r\n    },[])\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n          name: \"\",\r\n          gender: \"\",\r\n          userType: \"\",\r\n          birthDate: \"\",\r\n          telephone: \"\",\r\n          email: \"\",\r\n          password: \"\",\r\n          confirmPassword: \"\",\r\n          cep: \"\",\r\n          address: \"\",\r\n          complement: \"\",\r\n          city: \"\",\r\n          number: \"\",\r\n          state: \"\",\r\n          height: \"\",\r\n          weight: \"\",\r\n          medicine: \"\",\r\n          disease: \"\",\r\n          allergies: \"\",\r\n          addiction: \"\",\r\n          crm: \"\"\r\n        },\r\n        validationSchema: yup.object({\r\n          name: yup\r\n            .string()\r\n            .required(\"O campo é obrigatório.\"),\r\n          gender: yup\r\n            .string()\r\n            .required(\"O campo é obrigatório.\"),\r\n          userType: yup\r\n            .string() \r\n            .required(\"O campo é obrigatório.\"),\r\n          birthDate: yup\r\n            .string()\r\n            .required(\"O campo é obrigatório.\"),\r\n          telephone: yup\r\n            .string()\r\n            .required(\"O campo é obrigatório.\"),\r\n          email: yup\r\n            .string()\r\n            .email(\"E-mail inválido.\")\r\n            .required(\"O campo é obrigatório.\"),\r\n          password: yup\r\n            .string()\r\n            .required(\"O campo é obrigatório.\"),\r\n          confirmPassword: yup\r\n            .string()\r\n            .required(\"O campo é obrigatório.\"),\r\n          cep: yup\r\n            .string()\r\n            .required(\"O campo é obrigatório.\"),\r\n          address: yup\r\n            .string()\r\n            .required(\"O campo é obrigatório.\"),\r\n          complement: yup\r\n            .string(),\r\n          city: yup\r\n            .string()\r\n            .required(\"O campo é obrigatório.\"),\r\n          number: yup\r\n            .string()\r\n            .required(\"Obrigatório.\"),\r\n          state: yup\r\n            .string()\r\n            .required(\"O campo é obrigatório.\"),\r\n          height: yup\r\n            .string(),\r\n          weight: yup\r\n            .string(),\r\n          medicine: yup\r\n            .string(),\r\n          disease: yup\r\n            .string(),\r\n          allergies: yup\r\n            .string(),\r\n          addiction: yup\r\n            .string(),\r\n          crm: yup\r\n            .string(),\r\n        }),\r\n        onSubmit: (values) => {\r\n            register(values)\r\n        }\r\n    });\r\n    \r\n    function checkCep(){\r\n        let cep = formik.values.cep\r\n        const cepLimpo = cep.replace(/\\D/g, '')\r\n        fetch(`https://viacep.com.br/ws/${cepLimpo}/json/`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                formik.values.address = data.logradouro\r\n                formik.values.city = data.localidade\r\n                formik.values.state = data.uf\r\n        })\r\n    }\r\n    \r\n    async function register({name, birthDate, gender, telephone, email, password, userType, cep, number, complement, city, state, weight, height, allergies, disease, addiction, medicine, crm}){       \r\n        await api.post(\"/cadastrar\", {\r\n            nome: name, \r\n            dt_nascimento: birthDate, \r\n            genero: gender, \r\n            telefone: telephone, \r\n            email, \r\n            senha: password, \r\n            tipo: userType, \r\n            cep, \r\n            numero: number, \r\n            complemento: complement, \r\n            cidade: city, \r\n            estado: state, \r\n            peso: weight, \r\n            altura: height, \r\n            alergia: allergies, \r\n            doenca: disease, \r\n            vicio: addiction, \r\n            medicamento: medicine, \r\n            crm\r\n        });\r\n\r\n        handleClick();\r\n        setTimeout(() => {\r\n            navigate('/')\r\n        }, 3000)\r\n    }\r\n\r\n    function step1(){\r\n        document.getElementById(\"step1\").hidden = false;\r\n        document.getElementById(\"step2\").hidden = true;\r\n        document.getElementById(\"step3\").hidden = true;\r\n    }\r\n\r\n    function step2(){\r\n        document.getElementById(\"step2\").hidden = false;\r\n        document.getElementById(\"step1\").hidden = true;\r\n        document.getElementById(\"step3\").hidden = true;\r\n    }\r\n\r\n    function step3(){\r\n        document.getElementById(\"step3\").hidden = false;\r\n        document.getElementById(\"step1\").hidden = true;\r\n        document.getElementById(\"step2\").hidden = true;\r\n\r\n        if(formik.values.userType == 'Paciente'){\r\n            document.getElementById(\"medico\").hidden = true;\r\n            document.getElementById(\"paciente\").hidden = false;\r\n        }else{\r\n            document.getElementById(\"paciente\").hidden = true;\r\n            document.getElementById(\"medico\").hidden = false;\r\n        }\r\n    }\r\n\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n    };\t\r\n    \r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    return(\r\n        <Container>\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"success\" onClose={handleClose} sx={{ width: '100%' }}>Cadastro Realizado.</Alert>\r\n            </Snackbar>\r\n            <Left>\r\n                <Button fullWidth variant=\"contained\" size=\"large\" onClick={() => navigate('/')} style={{borderRadius: '0px'}}><ChevronLeft fontSize=\"large\" /> Voltar</Button>\r\n            </Left>\r\n\r\n            <Right>\r\n                <img src={logo} alt=\"Logo\" style={{width: '50%'}}/>\r\n                <h1 style={{margin: '1rem'}}>Criar Conta</h1>\r\n\r\n                <Form onSubmit={formik.handleSubmit}>\r\n                    <div id=\"step1\">\r\n                        <h3 style={{margin: 0, marginBottom: '1rem'}}>Dados Pessoais</h3>\r\n                        <Div style={{flexDirection: 'column'}}>\r\n                            <TextField \r\n                                fullWidth \r\n                                error={formik.touched.name && formik.errors.name}\r\n                                size=\"small\"\r\n                                id=\"name\"\r\n                                name=\"name\"\r\n                                type=\"text\"\r\n                                label=\"Nome\" \r\n                                variant=\"outlined\" \r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.name}\r\n                            />\r\n                            {formik.touched.name && formik.errors.name ? (\r\n                                <div style={{color: 'red'}}>{formik.errors.name}</div>\r\n                            ) : null}\r\n                        </Div>\r\n\r\n                        <Div>\r\n                            <ItemLeft>\r\n                                <FormControl variant=\"outlined\" fullWidth> \r\n                                    <InputLabel size=\"small\">Gênero</InputLabel>\r\n                                        <Select\r\n                                            size=\"small\"\r\n                                            labelId=\"genero\"\r\n                                            id=\"gender\"\r\n                                            name=\"gender\"\r\n                                            label=\"Genero\"\r\n                                            error={formik.touched.gender && formik.errors.gender}\r\n                                            onChange={formik.handleChange}\r\n                                            onBlur={formik.handleBlur}\r\n                                            value={formik.values.gender} \r\n                                        >\r\n                                            <MenuItem value=\"H\">Homem</MenuItem>\r\n                                            <MenuItem value=\"M\">Mulher</MenuItem>\r\n                                            <MenuItem value=\"O\">Outro</MenuItem>\r\n                                        </Select>\r\n                                </FormControl>\r\n                                {formik.touched.gender && formik.errors.gender ? (\r\n                                    <div style={{color: 'red'}}>{formik.errors.gender}</div>\r\n                                ) : null}\r\n                            </ItemLeft>\r\n\r\n                            <ItemRight>\r\n                                <FormControl variant=\"outlined\" fullWidth>\r\n                                    <InputLabel size=\"small\">Tipo de Usuário</InputLabel>\r\n                                        <Select\r\n                                            size=\"small\"\r\n                                            labelId=\"userType\"\r\n                                            id=\"userType\"\r\n                                            name=\"userType\"\r\n                                            label=\"Tipo de Usuário\"\r\n                                            error={formik.touched.userType && formik.errors.userType}\r\n                                            onChange={formik.handleChange}\r\n                                            onBlur={formik.handleBlur}\r\n                                            value={formik.values.userType} \r\n                                        >\r\n                                            <MenuItem value=\"Paciente\">Paciente</MenuItem>\r\n                                            <MenuItem value=\"Medico\">Médico</MenuItem>\r\n                                        </Select>\r\n                                </FormControl>\r\n                                {formik.touched.userType && formik.errors.userType ? (\r\n                                    <div style={{color: 'red'}}>{formik.errors.userType}</div>\r\n                                ) : null}\r\n                            </ItemRight>\r\n                        </Div>\r\n\r\n                       <Div>\r\n                           <ItemLeft>\r\n                                <BirthDate \r\n                                    type=\"date\" \r\n                                    id=\"birthDate\" \r\n                                    name=\"birthDate\"\r\n                                    style={formik.touched.birthDate && formik.errors.birthDate ? {borderColor: 'red'} : {backgroundColor: 'none'}}\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                    value={formik.values.birthDate}\r\n                                />\r\n                                {formik.touched.birthDate && formik.errors.birthDate ? (\r\n                                    <div style={{color: 'red'}}>{formik.errors.birthDate}</div>\r\n                                ) : null}\r\n                            </ItemLeft>\r\n\r\n                            <ItemRight>\r\n                                <TextField \r\n                                    fullWidth\r\n                                    error={formik.touched.telephone && formik.errors.telephone}\r\n                                    size=\"small\"\r\n                                    id=\"telephone\"\r\n                                    name=\"telephone\"\r\n                                    type=\"text\"\r\n                                    label=\"Telefone\" \r\n                                    variant=\"outlined\" \r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                    value={formik.values.telephone}\r\n                                />\r\n                                {formik.touched.telephone && formik.errors.telephone ? (\r\n                                    <div style={{color: 'red'}}>{formik.errors.telephone}</div>\r\n                                ) : null}\r\n                            </ItemRight>\r\n                        </Div>\r\n\r\n                        <Div style={{flexDirection: 'column'}}>\r\n                            <TextField \r\n                                fullWidth \r\n                                error={formik.touched.email && formik.errors.email}\r\n                                size=\"small\"\r\n                                id=\"email\"\r\n                                name=\"email\"\r\n                                type=\"email\"\r\n                                label=\"E-mail\" \r\n                                variant=\"outlined\" \r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.email}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email ? (\r\n                                <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                            ) : null}\r\n                        </Div>\r\n                    \r\n\r\n                        <Div>\r\n                           <ItemLeft>\r\n                                <TextField \r\n                                    fullWidth \r\n                                    error={formik.touched.password && formik.errors.password}\r\n                                    size=\"small\"\r\n                                    id=\"password\"\r\n                                    name=\"password\"\r\n                                    type=\"password\"\r\n                                    label=\"Senha\" \r\n                                    variant=\"outlined\" \r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                    value={formik.values.password}\r\n                                />    \r\n                                {formik.touched.password && formik.errors.password ? (\r\n                                    <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                                ) : null}\r\n                            </ItemLeft>\r\n                            \r\n                            <ItemRight>\r\n                                <TextField \r\n                                    fullWidth \r\n                                    error={formik.touched.confirmPassword && formik.errors.confirmPassword}\r\n                                    size=\"small\"\r\n                                    id=\"confirmPassword\"\r\n                                    name=\"confirmPassword\"\r\n                                    type=\"password\"\r\n                                    label=\"Confirme a Senha\" \r\n                                    variant=\"outlined\" \r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                    value={formik.values.confirmPassword}\r\n                                /> \r\n                                {formik.touched.confirmPassword && formik.errors.confirmPassword ? (\r\n                                    <div style={{color: 'red'}}>{formik.errors.confirmPassword}</div>\r\n                                ) : null}\r\n                            </ItemRight>\r\n                        </Div>\r\n\r\n                        <div style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                            <Button variant='contained' color=\"primary\" id=\"setaEsquerda\" disabled={true}> <ChevronLeft/> </Button>\r\n                            <Button variant='contained' color=\"primary\" id=\"setaDireita\" onClick={step2}> <ChevronRight/> </Button>\r\n                        </div> \r\n                    </div>\r\n\r\n                    <div id=\"step2\">\r\n                        <h3 style={{margin: 0, marginBottom: '1rem'}}>Endereço</h3>\r\n                        \r\n                        <Div style={{flexDirection: 'column'}}>\r\n                            <TextField \r\n                                fullWidth \r\n                                error={formik.touched.cep && formik.errors.cep}\r\n                                size=\"small\"\r\n                                id=\"cep\"\r\n                                name=\"cep\"\r\n                                type=\"text\"\r\n                                label=\"Cep\" \r\n                                variant=\"outlined\" \r\n                                onChange={formik.handleChange}\r\n                                onBlur={\r\n                                    checkCep\r\n                                }\r\n                                value={formik.values.cep}\r\n                            />\r\n                            {formik.touched.cep && formik.errors.cep ? (\r\n                                <div style={{color: 'red'}}>{formik.errors.cep}</div>\r\n                            ) : null}\r\n                        </Div>\r\n\r\n                        <Div>\r\n                           <ItemLeft style={{flex: 4}}>\r\n                                <TextField \r\n                                        fullWidth \r\n                                        error={formik.touched.address && formik.errors.address}\r\n                                        size=\"small\"\r\n                                        id=\"address\"\r\n                                        name=\"address\"\r\n                                        type=\"text\"\r\n                                        label=\"Endereço\" \r\n                                        variant=\"outlined\" \r\n                                        onChange={formik.handleChange}\r\n                                        onBlur={formik.handleBlur}\r\n                                        value={formik.values.address}\r\n                                        disabled\r\n                                />\r\n                                {formik.touched.address && formik.errors.address ? (\r\n                                    <div style={{color: 'red'}}>{formik.errors.address}</div>\r\n                                ) : null}\r\n                            </ItemLeft>\r\n\r\n                            <ItemRight>\r\n                                <TextField \r\n                                    fullWidth \r\n                                    error={formik.touched.number && formik.errors.number}\r\n                                    size=\"small\"\r\n                                    id=\"text\"\r\n                                    name=\"number\"\r\n                                    type=\"text\"\r\n                                    label=\"Número\" \r\n                                    variant=\"outlined\" \r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                    value={formik.values.number}\r\n                                />  \r\n                                {formik.touched.number && formik.errors.number ? (\r\n                                    <div style={{color: 'red'}}>{formik.errors.number}</div>\r\n                                ) : null}\r\n                            </ItemRight>\r\n                        </Div>\r\n\r\n\r\n                        <Div style={{flexDirection: 'column'}}>\r\n                            <TextField \r\n                                fullWidth \r\n                                size=\"small\"\r\n                                id=\"complement\"\r\n                                name=\"complement\"\r\n                                type=\"text\"\r\n                                label=\"Complemento\" \r\n                                variant=\"outlined\" \r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.complement}\r\n                            />\r\n                        </Div>\r\n\r\n                        <Div>\r\n                           <ItemLeft>\r\n                                <TextField \r\n                                    fullWidth \r\n                                    error={formik.touched.city && formik.errors.city}\r\n                                    size=\"small\"\r\n                                    id=\"city\"\r\n                                    name=\"city\"\r\n                                    type=\"text\"\r\n                                    label=\"Cidade\" \r\n                                    variant=\"outlined\" \r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                    value={formik.values.city}\r\n                                    disabled\r\n                                />\r\n                                {formik.touched.city && formik.errors.city ? (\r\n                                    <div style={{color: 'red'}}>{formik.errors.city}</div>\r\n                                ) : null}\r\n                            </ItemLeft>\r\n\r\n                            <ItemRight>\r\n                                <TextField \r\n                                    fullWidth \r\n                                    error={formik.touched.state && formik.errors.state}\r\n                                    size=\"small\"\r\n                                    id=\"state\"\r\n                                    name=\"state\"\r\n                                    type=\"text\"\r\n                                    label=\"Estado\" \r\n                                    variant=\"outlined\" \r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                    value={formik.values.state}\r\n                                    disabled\r\n                                />\r\n                                {formik.touched.state && formik.errors.state ? (\r\n                                    <div style={{color: 'red'}}>{formik.errors.state}</div>\r\n                                ) : null}\r\n                            </ItemRight>\r\n                        </Div>\r\n\r\n                        <div style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                            <Button variant='contained' color=\"primary\" id=\"setaEsquerda\" onClick={step1}> <ChevronLeft/> </Button>\r\n                            <Button variant='contained' color=\"primary\" id=\"setaDireita\" onClick={step3}> <ChevronRight/> </Button>\r\n                        </div> \r\n                    </div>\r\n\r\n                    <div id=\"step3\">\r\n                        <h3 style={{margin: 0, marginBottom: '1rem'}}>Dados Médicos</h3>\r\n                        <div id=\"paciente\">\r\n                            <Div>\r\n                                <ItemLeft>\r\n                                    <TextField  \r\n                                        fullWidth\r\n                                        error={formik.touched.height && formik.errors.height}\r\n                                        size=\"small\"\r\n                                        id=\"height\"\r\n                                        name=\"height\"\r\n                                        type=\"text\"\r\n                                        label=\"Altura\" \r\n                                        variant=\"outlined\" \r\n                                        onChange={formik.handleChange}\r\n                                        onBlur={formik.handleBlur}\r\n                                        value={formik.values.height}\r\n                                    /> \r\n                                    {formik.touched.height && formik.errors.height ? (\r\n                                        <div style={{color: 'red'}}>{formik.errors.height}</div>\r\n                                    ) : null}\r\n                                </ItemLeft>\r\n\r\n                                <ItemRight>\r\n                                    <TextField  \r\n                                        fullWidth\r\n                                        error={formik.touched.weight && formik.errors.weight}\r\n                                        size=\"small\"\r\n                                        id=\"weight\"\r\n                                        name=\"weight\"\r\n                                        type=\"text\"\r\n                                        label=\"Peso\" \r\n                                        variant=\"outlined\" \r\n                                        onChange={formik.handleChange}\r\n                                        onBlur={formik.handleBlur}\r\n                                        value={formik.values.weight}\r\n                                    />\r\n                                    {formik.touched.weight && formik.errors.weight ? (\r\n                                        <div style={{color: 'red'}}>{formik.errors.weight}</div>\r\n                                    ) : null}\r\n                                </ItemRight>\r\n                            </Div>\r\n\r\n                            <Div style={{flexDirection: 'column'}}>\r\n                                <TextField \r\n                                    fullWidth \r\n                                    size=\"small\"\r\n                                    id=\"medicine\"\r\n                                    name=\"medicine\"\r\n                                    type=\"text\"\r\n                                    label=\"Medicamento(s)\" \r\n                                    variant=\"outlined\" \r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                    value={formik.values.medicine}\r\n                                />\r\n                            </Div>\r\n\r\n                            <Div style={{flexDirection: 'column'}}>\r\n                                <TextField \r\n                                    fullWidth \r\n                                    size=\"small\"\r\n                                    id=\"disease\"\r\n                                    name=\"disease\"\r\n                                    type=\"text\"\r\n                                    label=\"Doença(s) Crônicas \" \r\n                                    variant=\"outlined\" \r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                    value={formik.values.disease}/>\r\n                            </Div>\r\n\r\n                            <Div>\r\n                                <ItemLeft>\r\n                                    <TextField \r\n                                        fullWidth \r\n                                        size=\"small\"\r\n                                        id=\"allergies\"\r\n                                        name=\"allergies\"\r\n                                        type=\"text\"\r\n                                        label=\"Alergia(s)\" \r\n                                        variant=\"outlined\" \r\n                                        onChange={formik.handleChange}\r\n                                        onBlur={formik.handleBlur}\r\n                                        value={formik.values.allergies}\r\n                                    />\r\n                                </ItemLeft>\r\n\r\n                                <ItemRight>\r\n                                    <TextField \r\n                                        fullWidth \r\n                                        size=\"small\"\r\n                                        id=\"addiction\"\r\n                                        name=\"addiction\"\r\n                                        type=\"text\"\r\n                                        label=\"Vicio(s)\" \r\n                                        variant=\"outlined\" \r\n                                        onChange={formik.handleChange}\r\n                                        onBlur={formik.handleBlur}\r\n                                        value={formik.values.addiction}\r\n                                    />\r\n                                </ItemRight>\r\n                            </Div>\r\n                        </div>\r\n\r\n                        <div id=\"medico\">\r\n                            <TextField\r\n                                fullWidth \r\n                                style={{marginBottom: '1rem'}}\r\n                                variant=\"outlined\" \r\n                                label=\"CRM\"\r\n                                type=\"text\"\r\n                                error={formik.touched.crm && formik.errors.crm}\r\n                                id=\"crm\"\r\n                                name=\"crm\"\r\n                                size=\"small\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.crm}\r\n                            />\r\n                            {formik.touched.crm && formik.errors.crm ? (\r\n                                <div style={{color: 'red'}}>{formik.errors.crm}</div>\r\n                            ) : null}\r\n                        </div>\r\n\r\n                        <Button fullWidth variant=\"contained\" style={{marginBottom: '1rem'}} onClick={formik.handleSubmit}>\r\n                            Confirmar Cadastro\r\n                        </Button>\r\n                                \r\n                        <div style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                            <Button variant='contained' color=\"primary\" id=\"setaEsquerda\" onClick={step2}> <ChevronLeft/> </Button>\r\n                            <Button variant='contained' color=\"primary\" id=\"setaDireita\" disabled> <ChevronRight/> </Button>\r\n                        </div> \r\n                    </div>\r\n                      \r\n                </Form>  \r\n                             \r\n            </Right>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Cadastro2","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\UsuariosListagem\\UsuariosCadastrar.js",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\UsuariosListagem\\ConsultasListagem\\EditarConsulta.js",["303","304","305"],"import React, { useEffect, useState } from 'react'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport { Button, Snackbar, IconButton, Alert } from '@mui/material';\r\nimport NavBar from '../../../components/NavBar'\r\nimport BaseLayout from '../../../layouts/BaseLayout'\r\nimport api from '../../../services/api'\r\n\r\nexport default function EditarConsulta() {\r\n  let navigate = useNavigate()\r\n  let params = useParams()\r\n  const [newDate, setNewDate] = useState(\"\")\r\n  const [consulta, setConsulta] = useState([])\r\n  const [hrConsulta, setHrConsulta] = useState('')\r\n  const [open, setOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getConsulta()\r\n  },[])\r\n\r\n  async function getConsulta(){\r\n    const response = await api.get(`/consulta/${params.id}`)\r\n    setConsulta(response.data)  \r\n\r\n    let horaConsulta = response.data[0].dt_hr_consulta\r\n    console.log(horaConsulta)\r\n    setHrConsulta(horaConsulta.replace(':00.000Z', ''))\r\n  }\r\n  \r\n  async function changeDate(){\r\n    await api.put('/consulta/changeDate', {id_consulta: params.id, new_date: newDate})\r\n    handleClick()\r\n    setTimeout(() => {\r\n      navigate(`/inicio`)\r\n    }, 3000)\r\n    \r\n  }\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\t\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n        return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n  return (\r\n    <NavBar>\r\n        <BaseLayout title='Editar Consulta'>\r\n          <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n            open={open}\r\n            autoHideDuration={6000}\r\n            onClose={handleClose}\r\n            style={{width: '40%'}}\r\n          >\r\n            <Alert variant=\"filled\" severity=\"success\" onClose={handleClose} sx={{ width: '100%' }}>Data da consulta atualizada com sucesso.</Alert>\r\n          </Snackbar>\r\n          <h4>Nova Data</h4>\r\n\r\n              Selecione a nova data da consulta.\r\n          \r\n              <input type=\"datetime-local\" id=\"meeting-time\" defaultValue={hrConsulta} onChange={e => setNewDate(e.target.value)}/>\r\n          <br/>\r\n          <br/>\r\n            <Button onClick={changeDate}>Alterar</Button>\r\n            <Button color='error' onClick={() => navigate(`/consultas`)}>Cancelar</Button>\r\n        </BaseLayout>\r\n    </NavBar>\r\n\r\n  );\r\n}","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\UsuariosListagem\\ConsultasListagem\\AdicionarConsulta2.js",["306","307","308","309","310"],"import {useState, useEffect} from 'react'\r\nimport { Button, Typography, Select, MenuItem, InputLabel, FormControl, Snackbar, IconButton, Alert } from '@mui/material';\r\nimport { useNavigate } from 'react-router-dom'\r\nimport dayjs from 'dayjs'\r\n\r\nimport api from '../../../services/api'\r\nimport NavBar from '../../../components/NavBar'\r\nimport BaseLayout from '../../../layouts/BaseLayout'\r\n\r\nimport {\r\n  Div,\r\n  BirthDate,\r\n} from '../../../styles/Cadastro/Cadastro'\r\n\r\nfunction AdicionarConsulta2(){\r\n  let navigate = useNavigate()\r\n  const [open, setOpen] = useState(false);\r\n  const [especialidades, setEspecialidades] = useState([])\r\n  const [medicos, setMedicos] = useState([])\r\n  const [idEspecialidade, setIdEspecialidade] = useState()\r\n  const [idMedico, setIdMedico] = useState()\r\n  const [data, setData] = useState()\r\n  const [diaDaSemana, setDiaDaSemana] = useState()\r\n  const [horas, setHoras] = useState([])\r\n  const [hora, setHora] = useState()\r\n\r\n  useEffect(() => {\r\n    getSpecialties()\r\n    getDoctors()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    getDoctorsBySpecialty()\r\n  }, [idEspecialidade])\r\n\r\n  useEffect(() => {\r\n    getSpecialtieByDoctor()\r\n  }, [idMedico])\r\n\r\n  useEffect(() => {\r\n    horasDisponiveisMedico()\r\n  }, [data])\r\n\r\n  async function getSpecialties(){\r\n    const response = await api.get('/medico/especialidades')\r\n    setEspecialidades(response.data)\r\n  }\r\n\r\n  async function getDoctors(){   \r\n    const response = await api.get('/medico/getDoctors')\r\n    setMedicos(response.data)\r\n  } \r\n\r\n  async function getDoctorsBySpecialty(){  \r\n    if(idEspecialidade){\r\n      const response = await api.get(`/medico/getDoctorsBySpecialty/${idEspecialidade}`)\r\n      setMedicos(response.data)\r\n    }\r\n    return\r\n  }  \r\n  \r\n  async function getSpecialtieByDoctor(){\r\n    if(idMedico){\r\n      const response = await api.get(`/medico/getSpecialtieByDoctor/${idMedico}`)\r\n      setEspecialidades(response.data)\r\n    }\r\n    return\r\n  }\r\n\r\n  async function horasDisponiveisMedico(){\r\n    if(idMedico && data){    \r\n      const response = await api.get(`/horasdisponiveismedico/${idMedico}/${data}`)\r\n      console.log(response.data)\r\n      setHoras(response.data)\r\n    }\r\n    return\r\n  }\r\n\r\n  async function criarConsulta(e){\r\n    e.preventDefault()\r\n    let url_consulta = `telemed${idMedico}${data}${idEspecialidade}`\r\n    await api.post('/agendarconsulta', {id_medico: idMedico, id_especialidade: idEspecialidade, dt_hr_consulta: `${data} ${hora}:00:00.000`, url_consulta})\r\n    handleClick()\r\n    setTimeout(() => {\r\n      navigate(`/inicio`);\r\n    }, 3000);\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  return(\r\n    <NavBar>\r\n      <Snackbar\r\n            anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n            open={open}\r\n            autoHideDuration={2000}\r\n            onClose={handleClose}\r\n            style={{width: '40%'}}\r\n        >\r\n          <Alert variant=\"filled\" severity=\"success\" onClose={handleClose} sx={{ width: '100%' }}>Consulta Criada com Sucesso!</Alert>\r\n      </Snackbar>\r\n\r\n      <BaseLayout title='Adicionar Consulta'>\r\n        <Typography variant='h4' align=\"center\">Nova Consulta</Typography><br/>\r\n        \r\n        {/* <h3>ESPECIALIDADE</h3>\r\n        <select style={{width: '100%'}} onChange={(e) => setIdEspecialidade(e.target.value)}>\r\n          {especialidades.map(especialidade => (\r\n            <option key={especialidade.id}>{especialidade.id}</option>\r\n          ))}\r\n        </select> */}\r\n        <Div style={{flex: 1, flexDirection: 'column', minWidth: '200px'}}>\r\n          <FormControl variant=\"outlined\" fullWidth> \r\n            <InputLabel size=\"small\">Especialidade</InputLabel>\r\n            <Select\r\n              size=\"small\"\r\n              labelId=\"specialty\"\r\n              id=\"specialty\"\r\n              name=\"specialty\"\r\n              label=\"Especialidade\"\r\n              onChange={e => setIdEspecialidade(e.target.value)} \r\n              onBlur={getDoctorsBySpecialty}\r\n            >\r\n              {especialidades.length > 0 ? (\r\n                especialidades.map(specialty => (\r\n                  <MenuItem key={specialty.id} value={specialty.id}>{specialty.nome}</MenuItem>\r\n                ))\r\n              ): \r\n                <MenuItem disabled>Não há especialidades</MenuItem>\r\n              }\r\n            </Select>\r\n          </FormControl>\r\n        </Div>\r\n          \r\n        {/* <h3>MÉDICO</h3>\r\n        <select style={{width: '100%'}} onChange={(e) => setIdMedico(e.target.value)}>\r\n          {medicos.map(medico => (\r\n            <option key={medico.id}>{medico.id}</option>\r\n          ))}\r\n        </select> */}\r\n\r\n        <Div style={{flex: 1, flexDirection: 'column', minWidth: '200px'}}>\r\n          <FormControl variant=\"outlined\" fullWidth> \r\n              <>\r\n                <InputLabel size=\"small\">Médico</InputLabel>\r\n                <Select\r\n                  size=\"small\"\r\n                  labelId=\"doctor\"\r\n                  id=\"doctor\"\r\n                  label=\"doctor\"\r\n                  name=\"medico\" \r\n                  onChange={(e) => setIdMedico(e.target.value)} \r\n                  onBlur={getSpecialtieByDoctor}\r\n                >\r\n                  {medicos.length > 0 ? (\r\n                    medicos.map(doctor => (\r\n                      <MenuItem key={doctor.id_usuario} value={doctor.id_usuario}>{doctor.nome}</MenuItem>\r\n                    ))\r\n                  ): \r\n                    <MenuItem disabled>Não há Médicos</MenuItem>\r\n                  }\r\n                </Select>\r\n              </>\r\n          </FormControl>\r\n        </Div>\r\n\r\n        {/* <h3>DATA</h3>\r\n        <input type=\"date\" style={{width: '100%'}} onChange={(e) => {\r\n                                                                      setData(e.target.value);\r\n                                                                      setDiaDaSemana(dayjs(e.target.value).day());\r\n                                                                    }\r\n        }/> */}\r\n\r\n        <Div>\r\n          <BirthDate \r\n              type=\"date\" \r\n              id=\"date\" \r\n              name=\"birthDate\"\r\n              onChange={(e) => {setData(e.target.value); setDiaDaSemana(dayjs(e.target.value).day());}} \r\n              min={dayjs().format('YYYY-MM-DD')}\r\n          />\r\n        </Div>\r\n\r\n        {/* <h3>HORA</h3>\r\n        <select style={{width: '100%'}}>\r\n          {horas.map(h => (\r\n            <option key={h}>{h}</option>\r\n          ))}\r\n        </select> */}\r\n\r\n        <Div>\r\n          <FormControl variant=\"outlined\" fullWidth> \r\n              <>        \r\n                <InputLabel size=\"small\">Hora</InputLabel>\r\n                <Select\r\n                  size=\"small\"\r\n                  labelId=\"hour\"\r\n                  id=\"hour\"\r\n                  label=\"hour\"\r\n                  name=\"hora\" \r\n                  onChange={(e) => setHora(e.target.value)}\r\n                >\r\n\r\n                {horas.length > 0 ? (\r\n                  horas.map(hr => (\r\n                    <MenuItem key={hr} value={hr}>{hr}</MenuItem> \r\n                  ))\r\n                ): \r\n                  <MenuItem disabled>Não há Horários Disponiveis nessa Data</MenuItem>\r\n                }\r\n                </Select>\r\n              </>\r\n          </FormControl>\r\n        </Div>\r\n\r\n        <div style={{display: 'flex', justifyContent: 'center'}}>\r\n          <Button onClick={e => criarConsulta(e)}>Salvar</Button>\r\n          <Button color='error' onClick={() => navigate(`/inicio`)}>Cancelar</Button>\r\n        </div>\r\n      </BaseLayout>\r\n    </NavBar>\r\n  )\r\n}\r\n\r\nexport default AdicionarConsulta2","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\UsuariosListagem\\ConsultasListagem\\AdicionarConsulta.js",["311","312","313","314","315"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Typography, Select, MenuItem, InputLabel, FormControl, Snackbar, IconButton, Alert } from '@mui/material';\r\nimport {Done, Close} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom'\r\nimport dayjs from 'dayjs'\r\n\r\nimport api from '../../../services/api'\r\nimport NavBar from '../../../components/NavBar'\r\nimport BaseLayout from '../../../layouts/BaseLayout'\r\n\r\nimport {\r\n  Div,\r\n  BirthDate,\r\n} from '../../../styles/Cadastro/Cadastro'\r\n\r\nexport default function AdicionarConsulta() {\r\n    let navigate = useNavigate()\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const [especialidades, setEspecialidades] = useState([])\r\n    const [medicos, setMedicos] = useState([])\r\n    const [idEspecialidade, setIdEspecialidade] = useState(\"\")\r\n    const [idMedico, setIdMedico] = useState(\"\")\r\n    const [data, setData] = useState(\"\")\r\n    const [hora, setHora] = useState(\"\")\r\n    const [horas, setHoras] = useState([])\r\n    const [dayOfWeek , setDayOfWeek] = useState(\"\")\r\n    const [dt_hr_consulta, setDr_hr_consulta] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n      getSpecialties()\r\n      getDoctors()\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    horasDisponiveisMedico(idMedico)\r\n  }, [idMedico, data])\r\n\r\n  function setDataAndDayOfWeek(n){\r\n    setData(n)\r\n    setDayOfWeek(dayjs(n).day())\r\n  }\r\n\r\n  async function horasDisponiveisMedico(id_medico){\r\n    if(id_medico && data){    \r\n      // console.log(id_medico)\r\n      // console.log(data)\r\n      const response = await api.get(`/horasdisponiveismedico/${id_medico}/${data}`)\r\n      console.log(response.data)\r\n\r\n      // if(response){\r\n      //   let dia_da_semana = response.data.dia_semana.split(\",\")\r\n\r\n      //   let aux = response.data.horas\r\n      //   let livres = []\r\n\r\n      //   if(dia_da_semana.indexOf(dayOfWeek.toString()) !== -1){\r\n      //     if(data === dayjs().format('YYYY-MM-DD')){\r\n      //       aux.forEach(item => {\r\n      //         if(item >= dayjs().format('HH:mm:ss')){\r\n      //           livres.push(item)  \r\n      //         }\r\n      //       })\r\n      //     }else{\r\n      //       aux.forEach(item => {\r\n      //         livres.push(item)\r\n      //       })\r\n      //     } \r\n      //   }else{\r\n      //     livres = []\r\n      //   }\r\n      //   setHoras(livres)\r\n      // }\r\n\r\n    }else{\r\n      return\r\n    }\r\n\r\n    \r\n  }\r\n\r\n  async function getSpecialties(){\r\n      const response = await api.get('/medico/especialidades')\r\n      setEspecialidades(response.data)\r\n  }\r\n\r\n  async function getDoctors(){   \r\n      const response = await api.get('/medico/getDoctors')\r\n      setMedicos(response.data)\r\n  }  \r\n\r\n  async function getDoctorsBySpecialty(){  \r\n      if(idEspecialidade){\r\n        const response = await api.get(`/medico/getDoctorsBySpecialty/${idEspecialidade}`)\r\n        setMedicos(response.data)\r\n      }\r\n      return\r\n  }   \r\n\r\n  async function getSpecialtieByDoctor(){\r\n      if(idMedico){\r\n        const response = await api.get(`/medico/getSpecialtieByDoctor/${idMedico}`)\r\n        setEspecialidades(response.data)\r\n      }\r\n      return\r\n  }\r\n\r\n  async function criarConsulta(e){\r\n      e.preventDefault()\r\n      setDr_hr_consulta(`${data} ${hora}:00:00.000`)\r\n      let url_consulta = `telemed${idMedico}${data}${idEspecialidade}`\r\n      await api.post('/agendarconsulta', {id_medico: idMedico, id_especialidade: idEspecialidade, data, hora, dt_hr_consulta, url_consulta})\r\n      handleClick()\r\n      setTimeout(() => {\r\n        navigate(`/inicio`);\r\n    }, 3000);\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n      if (reason === 'clickaway') {\r\n        return;\r\n      }\r\n      setOpen(false);\r\n  };\r\n\r\n  const action = (\r\n    <React.Fragment>\r\n      <IconButton\r\n        size=\"small\"\r\n        aria-label=\"close\"\r\n        color=\"inherit\"\r\n        onClick={handleClose}\r\n      >\r\n        <Close fontSize=\"small\" />\r\n      </IconButton>\r\n    </React.Fragment>\r\n);\r\n  \r\n  return (\r\n    <NavBar>\r\n        <BaseLayout title='Adicionar Consulta'>\r\n        <Snackbar\r\n            anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n            open={open}\r\n            autoHideDuration={2000}\r\n            onClose={handleClose}\r\n            style={{width: '40%'}}\r\n        >\r\n          <Alert variant=\"filled\" severity=\"success\" onClose={handleClose} sx={{ width: '100%' }}>Consulta Criada com Sucesso!</Alert>\r\n        </Snackbar>\r\n        <div style={{display: 'flex', flexDirection: 'column', alignContent: 'center', width: '100%'}}>\r\n          <Typography variant='h4' align=\"center\">Nova Consulta XX</Typography><br/>\r\n            <Div style={{flex: 1, flexDirection: 'column', minWidth: '200px'}}>\r\n              <FormControl variant=\"outlined\" fullWidth> \r\n                <InputLabel size=\"small\">Especialidade</InputLabel>\r\n                <Select\r\n                  size=\"small\"\r\n                  labelId=\"specialty\"\r\n                  id=\"specialty\"\r\n                  name=\"specialty\"\r\n                  label=\"Especialidade\"\r\n                  onChange={e => setIdEspecialidade(e.target.value)} \r\n                  onBlur={getDoctorsBySpecialty}\r\n                >\r\n                  {especialidades.length > 0 ? (\r\n                    especialidades.map(specialty => (\r\n                      <MenuItem key={specialty.id} value={specialty.id}>{specialty.nome}</MenuItem>\r\n                    ))\r\n                  ): \r\n                    <MenuItem disabled>Não há especialidades</MenuItem>\r\n                  }\r\n                </Select>\r\n              </FormControl>\r\n            </Div>\r\n\r\n            <Div style={{flex: 1, flexDirection: 'column', minWidth: '200px'}}>\r\n              <FormControl variant=\"outlined\" fullWidth> \r\n                  <>\r\n                    <InputLabel size=\"small\">Médico</InputLabel>\r\n                    <Select\r\n                      size=\"small\"\r\n                      labelId=\"doctor\"\r\n                      id=\"doctor\"\r\n                      label=\"doctor\"\r\n                      name=\"medico\" \r\n                      onChange={(e) => setIdMedico(e.target.value)} \r\n                      onBlur={getSpecialtieByDoctor}\r\n                    >\r\n                      {medicos.length > 0 ? (\r\n                        medicos.map(doctor => (\r\n                          <MenuItem key={doctor.id_usuario} value={doctor.id_usuario}>{doctor.nome}</MenuItem>\r\n                        ))\r\n                      ): \r\n                        <MenuItem disabled>Não há Médicos</MenuItem>\r\n                      }\r\n                    </Select>\r\n                  </>\r\n              </FormControl>\r\n            </Div>\r\n                \r\n            <Div>\r\n                <BirthDate \r\n                    type=\"date\" \r\n                    id=\"date\" \r\n                    name=\"birthDate\"\r\n                    onChange={(e) => setDataAndDayOfWeek(e.target.value)} \r\n                    min={dayjs().format('YYYY-MM-DD')}\r\n                />\r\n            </Div>\r\n\r\n            <Div>\r\n              <FormControl variant=\"outlined\" fullWidth> \r\n                  <>        \r\n                    <InputLabel size=\"small\">Hora</InputLabel>\r\n                    <Select\r\n                      size=\"small\"\r\n                      labelId=\"hour\"\r\n                      id=\"hour\"\r\n                      label=\"hour\"\r\n                      name=\"hora\" \r\n                      onChange={(e) => setHora(e.target.value)}\r\n                    >\r\n\r\n                    {horas.length > 0 ? (\r\n                      horas.map(hr => (\r\n                        <MenuItem key={hr} value={hr}>{hr}</MenuItem> \r\n                      ))\r\n                    ): \r\n                      <MenuItem disabled>Não há Horários Disponiveis nessa Data</MenuItem>\r\n                    }\r\n                    </Select>\r\n                  </>\r\n              </FormControl>\r\n            </Div>\r\n\r\n            <div style={{display: 'flex', justifyContent: 'center'}}>\r\n              <Button onClick={e => criarConsulta(e)}>Salvar</Button>\r\n              <Button color='error' onClick={() => navigate(`/inicio`)}>Cancelar</Button>\r\n            </div>\r\n          </div>\r\n        </BaseLayout>\r\n    </NavBar>\r\n  )\r\n}","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\context\\AuthContext.jsx",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Login\\index.js",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Cadastro\\index.js",["316","317","318","319","320","321"],"import React, { useState, useEffect } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { \r\n    AccountBox, Email, Lock, LocalPhone, LocationOn, LooksOne, Add, LocationCity, MonitorWeight, \r\n    Height,  PestControl, Coronavirus, SmokingRooms, Medication, ChevronRight, KeyboardArrowLeft\r\n} from '@mui/icons-material'\r\nimport api from '../../services/api'\r\nimport { Box, FormControl, InputAdornment, InputLabel, MenuItem, Select, Snackbar, IconButton, Alert } from '@mui/material'\r\nimport UnstyledTabsCustomized from './UnstyledTabsCustomized'\r\nimport logo from '../../img/logoAzulHoriz.png'\r\nimport {\r\n    ButtonRegister,\r\n    Container,\r\n    DoubleItem,\r\n    InputItem,\r\n    Logo,\r\n    LogoContainer,\r\n    PaperStyled,\r\n    Principal,\r\n    RegisterContainer,\r\n    Text,\r\n    Title\r\n } from '../../styles/Cadastro'\r\n\r\nfunction Cadastro() {\r\n    const navigate = useNavigate()\r\n    const [nome, setNome] = useState(\"\")\r\n    const [dt_nascimento, setDt_nascimento] = useState(\"\")\r\n    const [genero, setGenero] = useState(\"\")\r\n    const [tipo, setTipo] = useState(\"Paciente\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [telefone, setTelefone] = useState(\"\")\r\n    const [senha, setSenha] = useState(\"\")\r\n    const [confirmasenha, setConfirmaSenha] = useState(\"\")\r\n    const [cep, setCep] = useState(\"\")\r\n    const [numero, setNumero] = useState(\"\")\r\n    const [complemento, setComplemento] = useState(\"\")\r\n    const [cidade, setCidade] = useState(\"\")\r\n    const [estado, setEstado] = useState(\"\")\r\n    const [peso, setPeso] = useState(\"\")\r\n    const [altura, setAltura] = useState(\"\")\r\n    const [alergia, setAlergia] = useState(\"\")\r\n    const [doenca, setDoenca] = useState(\"\")\r\n    const [vicio, setVicio] = useState(\"\")\r\n    const [medicamento, setMedicamento] = useState(\"\")\r\n    const [crm, setCrm] = useState(\"\")\r\n    const [open, setOpen] = useState(false);\r\n    const [open1, setOpen1] = useState(false);\r\n    const [open2, setOpen2] = useState(false);\r\n\r\n    async function handleCadastro(e) {\r\n        e.preventDefault()\r\n        const data = {nome, dt_nascimento, genero, telefone, email, senha, tipo}\r\n\r\n        if(!nome || !dt_nascimento || !genero || !telefone || !email || !senha || !tipo || !cep || !numero || !cidade || !estado || (tipo == 'Paciente' ? (!peso || !altura) : (!crm))) {\r\n            if(senha != confirmasenha){\r\n                handleClick()\r\n            }\r\n\r\n            handleClick1()\r\n        }else {\r\n            try {\r\n                const response = await api.post(\"/cadastrar\", {nome, dt_nascimento, genero, telefone, email, senha, tipo, cep, numero, complemento, cidade, estado, peso, altura, alergia, doenca, vicio, medicamento, crm});\r\n\r\n                console.log(response.data)\r\n                handleClick2()\r\n                setTimeout(() => {\r\n                    navigate('/');\r\n                }, 3000)\r\n            } catch (err) {\r\n                console.error(\"ops! ocorreu um erro: \" + err);\r\n            }\r\n        }\r\n    }\r\n\r\n    function checkCep(e){\r\n        const cepLimpo = cep.replace(/\\D/g, '')\r\n        fetch(`https://viacep.com.br/ws/${cepLimpo}/json/`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setCidade(data.localidade)\r\n                setEstado(data.uf)\r\n        })\r\n    }\r\n\r\n    function passoUm(){\r\n        document.getElementById(\"passoUm\").hidden = false;\r\n\r\n        document.getElementById(\"passoDois\").hidden = true;\r\n        document.getElementById(\"passoTres\").hidden = true;\r\n    }\r\n\r\n    function passoDois(){\r\n        document.getElementById(\"passoDois\").hidden = false;\r\n\r\n        document.getElementById(\"passoUm\").hidden = true;\r\n        document.getElementById(\"passoTres\").hidden = true;\r\n    }\r\n\r\n    function passoTres(){\r\n        document.getElementById(\"passoTres\").hidden = false;\r\n\r\n        document.getElementById(\"passoUm\").hidden = true;\r\n        document.getElementById(\"passoDois\").hidden = true;\r\n\r\n        if(tipo == 'Paciente'){\r\n            document.getElementById(\"medico\").hidden = true;\r\n            document.getElementById(\"paciente\").hidden = false;\r\n        }else{\r\n            document.getElementById(\"paciente\").hidden = true;\r\n            document.getElementById(\"medico\").hidden = false;\r\n        }\r\n    }\r\n\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n    };\t\r\n    \r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    \r\n    const handleClick1 = () => {\r\n        setOpen1(true);\r\n    };\t\r\n    \r\n    const handleClose1 = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen1(false);\r\n    };\r\n\r\n    const handleClick2 = () => {\r\n        setOpen2(true);\r\n    };\t\r\n    \r\n    const handleClose2 = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen2(false);\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        passoUm();\r\n    },[])\r\n\r\n    return (\r\n        <Principal>\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"warning\" onClose={handleClose} sx={{ width: '100%' }}>Senhas não correspondem.</Alert>\r\n            </Snackbar>\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open1}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose1}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"warning\" onClose={handleClose1} sx={{ width: '100%' }}>Preencha todos os campos.</Alert>\r\n            </Snackbar>\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open2}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose2}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"success\" onClose={handleClose2} sx={{ width: '100%' }}>Cadastro foi realizado.</Alert>\r\n            </Snackbar>\r\n            <PaperStyled>\r\n                <RegisterContainer>\r\n                    <LogoContainer>\r\n                        <Logo src={logo} alt=\"Telemedicina\" />\r\n                        <Title>Cadastre-se</Title>\r\n                    </LogoContainer>\r\n                    <div id=\"passoUm\">\r\n                        {/* <UnstyledTabsCustomized/> */}\r\n                        <DoubleItem>\r\n                            <Box>\r\n                                <InputItem\r\n                                    style={{ width: 416 }}\r\n                                    variant=\"filled\"\r\n                                    label=\"Informe seu nome\"\r\n                                    value={nome}\r\n                                    onChange={e => setNome(e.target.value)}\r\n                                    InputProps={{\r\n                                        startAdornment: (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <AccountBox />\r\n                                        </InputAdornment> ),}}\r\n                                />\r\n                            </Box>\r\n                            <FormControl variant=\"filled\">\r\n                                <InputLabel>Gênero</InputLabel>\r\n                                <Select\r\n                                    style={{ width: 208 }}                        \r\n                                    value={genero}\r\n                                    onChange={e => setGenero(e.target.value)}\r\n                                >\r\n                                    <MenuItem value=\"H\">Homem</MenuItem>\r\n                                    <MenuItem value=\"M\">Mulher</MenuItem>\r\n                                    <MenuItem value=\"O\">Outro</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </DoubleItem>\r\n                        <DoubleItem>\r\n                            <InputItem\r\n                                style={{ width: 208 }}\r\n                                variant=\"filled\"\r\n                                type=\"date\"\r\n                                label=\"Informe sua data de nascimento\"\r\n                                value={dt_nascimento}\r\n                                onChange={e => setDt_nascimento(e.target.value)}\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                            />\r\n                            <Box>\r\n                                <FormControl variant=\"filled\">\r\n                                    <InputLabel>Tipo de Usuário</InputLabel>\r\n                                    <Select\r\n                                        style={{ width: 192 }} \r\n                                        value={tipo}\r\n                                        onChange={e => setTipo(e.target.value)}\r\n                                    >\r\n                                        <MenuItem value=\"Medico\">Médico</MenuItem>\r\n                                        <MenuItem value=\"Paciente\">Paciente</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Box>\r\n                            <Box>\r\n                                <InputItem\r\n                                    style={{ width: 208 }} \r\n                                    type=\"tel\"\r\n                                    variant=\"filled\"\r\n                                    label=\"Informe seu telefone\"\r\n                                    value={telefone}\r\n                                    onChange={e => setTelefone(e.target.value)}\r\n                                    InputProps={{\r\n                                        startAdornment: (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <LocalPhone />\r\n                                        </InputAdornment> ),}}\r\n                                />\r\n                            </Box>\r\n                        </DoubleItem>\r\n                        <Box>\r\n                            <InputItem\r\n                                type=\"email\"\r\n                                variant=\"filled\"\r\n                                label=\"Informe seu email\"\r\n                                value={email}\r\n                                onChange={e => setEmail(e.target.value)}\r\n                                InputProps={{\r\n                                    startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <Email />\r\n                                    </InputAdornment> ),}}\r\n                            />\r\n                        </Box>\r\n                        <DoubleItem>\r\n                            <Box>\r\n                                <InputItem\r\n                                    type=\"password\"\r\n                                    variant=\"filled\"\r\n                                    label=\"Informe sua senha\"\r\n                                    value={senha}\r\n                                    onChange={e => setSenha(e.target.value)}\r\n                                    InputProps={{\r\n                                        startAdornment: (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <Lock/>\r\n                                        </InputAdornment> ),}}\r\n                                />\r\n                            </Box>\r\n                            <Box>\r\n                                <InputItem\r\n                                    type=\"password\"\r\n                                    variant=\"filled\"\r\n                                    label=\"Digite a senha novamente\"\r\n                                    value={confirmasenha}\r\n                                    onChange={e => setConfirmaSenha(e.target.value)}\r\n                                    InputProps={{\r\n                                        startAdornment: (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <Lock/>\r\n                                        </InputAdornment> ),}}\r\n                                />\r\n                            </Box>\r\n                        </DoubleItem>\r\n                        \r\n                        <Container sx={{display: 'flex', justifyContent: 'space-between'}}>\r\n                            <DoubleItem>\r\n                            <ButtonRegister variant='contained' color=\"primary\" id=\"setaEsquerda\" disabled={true}><KeyboardArrowLeft/></ButtonRegister>\r\n                                <ButtonRegister variant='contained' color=\"primary\" id=\"setaDireita\" onClick={passoDois}><ChevronRight/></ButtonRegister>\r\n                            </DoubleItem>\r\n                        </Container>\r\n                        \r\n                    </div>\r\n                    <div id=\"passoDois\">\r\n                        <DoubleItem>\r\n                                <Box>\r\n                                    <InputItem\r\n                                        style={{ width: 300 }}\r\n                                        variant=\"filled\"\r\n                                        label=\"Informe seu cep\"\r\n                                        value={cep}\r\n                                        onBlur={checkCep}\r\n                                        onChange={e => setCep(e.target.value)}\r\n                                        InputProps={{\r\n                                            startAdornment: (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <LocationOn />\r\n                                            </InputAdornment> ),}}\r\n                                    />\r\n                                </Box>\r\n                                <Box>\r\n                                    <InputItem\r\n                                        style={{ width: 300 }}\r\n                                        variant=\"filled\"\r\n                                        label=\"Número\"\r\n                                        value={numero}\r\n                                        onChange={e => setNumero(e.target.value)}\r\n                                        InputProps={{\r\n                                            startAdornment: (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <LooksOne />\r\n                                            </InputAdornment> ),}}\r\n                                    />\r\n                                </Box>\r\n                        </DoubleItem>\r\n\r\n                        <Box>\r\n                            <InputItem\r\n                                style={{ width: '100%' }}\r\n                                variant=\"filled\"\r\n                                label=\"Complemento\"\r\n                                value={complemento}\r\n                                onChange={e => setComplemento(e.target.value)}\r\n                                InputProps={{\r\n                                    startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <Add />\r\n                                    </InputAdornment> ),}}\r\n                            />\r\n                        </Box>\r\n                        <DoubleItem>\r\n                            <Box>\r\n                                <InputItem\r\n                                    style={{ width: 300 }}\r\n                                    variant=\"filled\"\r\n                                    label=\"Cidade\"\r\n                                    value={cidade}\r\n                                    onChange={e => setCidade(e.target.value)}\r\n                                    InputProps={{\r\n                                        startAdornment: (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <LocationCity />\r\n                                        </InputAdornment> ),}}\r\n                                />\r\n                            </Box>\r\n                            <Box>\r\n                                <InputItem\r\n                                    style={{ width: 300 }}\r\n                                    variant=\"filled\"\r\n                                    label=\"Estado\"\r\n                                    value={estado}\r\n                                    onChange={e => setEstado(e.target.value)}\r\n                                    InputProps={{\r\n                                        startAdornment: (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <LocationCity />\r\n                                        </InputAdornment> ),}}\r\n                                />\r\n                            </Box>\r\n                        </DoubleItem>\r\n\r\n                        <Container sx={{display: 'flex', justifyContent: 'space-between'}}>\r\n                            <DoubleItem>\r\n                            <ButtonRegister variant='contained' color=\"primary\" id=\"setaEsquerda\" onClick={passoUm}><KeyboardArrowLeft/></ButtonRegister>\r\n                                <ButtonRegister variant='contained' color=\"primary\" id=\"setaDireita\" onClick={passoTres}><ChevronRight/></ButtonRegister>\r\n                            </DoubleItem>\r\n                        </Container>\r\n                    </div>\r\n                    <div id=\"passoTres\">\r\n                        <div id=\"paciente\">\r\n                            <DoubleItem>\r\n                                <Box>\r\n                                    <InputItem\r\n                                        style={{ width: 300 }}\r\n                                        variant=\"filled\"\r\n                                        label=\"Peso\"\r\n                                        value={peso}\r\n                                        onChange={e => setPeso(e.target.value)}\r\n                                        InputProps={{\r\n                                            startAdornment: (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <MonitorWeight />\r\n                                            </InputAdornment> ),}}\r\n                                    />\r\n                                </Box>\r\n                                <Box>\r\n                                    <InputItem\r\n                                        style={{ width: 300 }}\r\n                                        variant=\"filled\"\r\n                                        label=\"Altura\"\r\n                                        value={altura}\r\n                                        onChange={e => setAltura(e.target.value)}\r\n                                        InputProps={{\r\n                                            startAdornment: (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <Height />\r\n                                            </InputAdornment> ),}}\r\n                                    />\r\n                                </Box>\r\n                            </DoubleItem>\r\n                            <DoubleItem>\r\n                                <Box>\r\n                                    <InputItem\r\n                                        style={{ width: 300 }}\r\n                                        variant=\"filled\"\r\n                                        label=\"Alergia(s)\"\r\n                                        value={alergia}\r\n                                        onChange={e => setAlergia(e.target.value)}\r\n                                        InputProps={{\r\n                                            startAdornment: (\r\n                                            <InputAdornment position=\"start\">\r\n                                                < PestControl />\r\n                                            </InputAdornment> ),}}\r\n                                    />\r\n                                </Box>\r\n                                <Box>\r\n                                    <InputItem\r\n                                        style={{ width: 300 }}\r\n                                        variant=\"filled\"\r\n                                        label=\"Doença(s) cronica\"\r\n                                        value={doenca}\r\n                                        onChange={e => setDoenca(e.target.value)}\r\n                                        InputProps={{\r\n                                            startAdornment: (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <Coronavirus />\r\n                                            </InputAdornment> ),}}\r\n                                    />\r\n                                </Box>                            \r\n                            </DoubleItem>\r\n                            <DoubleItem>\r\n                                <Box>\r\n                                    <InputItem\r\n                                        style={{ width: 300 }}\r\n                                        variant=\"filled\"\r\n                                        label=\"Vicio(s)\"\r\n                                        value={vicio}\r\n                                        onChange={e => setVicio(e.target.value)}\r\n                                        InputProps={{\r\n                                            startAdornment: (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <SmokingRooms />\r\n                                            </InputAdornment> ),}}\r\n                                    />\r\n                                </Box>\r\n                                <Box>\r\n                                    <InputItem\r\n                                        style={{ width: 300 }}\r\n                                        variant=\"filled\"\r\n                                        label=\"Medicamento(s)\"\r\n                                        value={medicamento}\r\n                                        onChange={e => setMedicamento(e.target.value)}\r\n                                        InputProps={{\r\n                                            startAdornment: (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <Medication />\r\n                                            </InputAdornment> ),}}\r\n                                    />\r\n                                </Box>\r\n                            </DoubleItem>\r\n                        </div>\r\n                        <div id=\"medico\">\r\n                            <Box>\r\n                                <InputItem\r\n                                    style={{ width: 300 }}\r\n                                    variant=\"filled\"\r\n                                    label=\"CRM\"\r\n                                    value={crm}\r\n                                    onChange={e => setCrm(e.target.value)}\r\n                                    InputProps={{\r\n                                        startAdornment: (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <LooksOne />\r\n                                        </InputAdornment> ),}}\r\n                                />\r\n                            </Box>\r\n                                    \r\n                        </div>\r\n                        <Container sx={{display: 'flex', justifyContent: 'space-between'}}>\r\n                            <DoubleItem>\r\n                            <ButtonRegister variant='contained' color=\"primary\" id=\"setaEsquerda\" onClick={passoDois}><KeyboardArrowLeft/></ButtonRegister>\r\n                                <ButtonRegister variant='contained' color=\"primary\" id=\"setaDireita\" disabled={true}><ChevronRight/></ButtonRegister>\r\n                            </DoubleItem>\r\n                        </Container>\r\n                        <Container sx={{display: 'flex'}}>\r\n                            <ButtonRegister variant=\"contained\" color=\"primary\" type=\"submit\" onClick={e => handleCadastro(e)}>\r\n                                Confirmar Cadastro\r\n                            </ButtonRegister>\r\n                        </Container>\r\n                    </div>\r\n                    \r\n                    <Container>\r\n                        <Text style={{alignSelf: 'center'}}>Você já possui uma conta?</Text>\r\n                        <ButtonRegister variant='outlined' color=\"primary\" onClick={() => navigate('/')}>\r\n                            Fazer Login\r\n                        </ButtonRegister>\r\n                    </Container>\r\n                </RegisterContainer>\r\n            </PaperStyled>\r\n        </Principal>\r\n    )\r\n}\r\n\r\nexport default Cadastro","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\UsuariosListagem\\index.js",["322","323"],"import React, { useState, useEffect } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport api from '../../services/api'\r\nimport { \r\n    Box,\r\n    Button,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    useTheme,\r\n    Snackbar, \r\n    IconButton, \r\n    Alert\r\n} from '@mui/material'\r\nimport { Add, BorderColor, Delete, Event } from '@mui/icons-material'\r\nimport { ButtonBox, ButtonTool, PaperStyled } from '../../styles/UsuariosListagem'\r\nimport NavBar from '../../components/NavBar'\r\nimport BaseLayout from '../../layouts/BaseLayout'\r\n\r\nfunction UsuariosListagem(){\r\n    let navigate = useNavigate()\r\n    const theme = useTheme()\r\n    const [users, setUsers] = useState([])\r\n    const [tipo, setTipo] = useState(\"\")\r\n    const [loading, setLoading] = useState(true)\r\n    const [open, setOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getType()\r\n        loadUsers()\r\n    },[])\r\n\r\n    setInterval(loadUsers, 60000)\r\n\r\n    async function loadUsers(){\r\n        const response = await api.get('/admin')\r\n        setUsers(response.data)\r\n        setLoading(false)\r\n    }\r\n\r\n    async function getType(){\r\n        const result = await api.get('/usuario/getType')\r\n        setTipo(result.data.tipo)\r\n    }\r\n\r\n    async function remove(id){\r\n        const res = window.confirm('Deseja realmente excluir?')\r\n        if(res){\r\n            try {\r\n                const result = await api.put(`/usuario/${id}`)\r\n                console.log(result.data)\r\n                handleClick()\r\n                setTimeout(() => {\r\n                    window.location.reload()\r\n                }, 3000)                \r\n            } catch(err) {\r\n                console.log(\"ops! ocorreu um erro\" + err)\r\n            }\r\n        }\r\n    }\r\n\r\n    if (loading) {\r\n        return <div>Carregando dados...</div>\r\n    }\r\n\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n    };\t\r\n    \r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <NavBar>\r\n                <BaseLayout title='Gerenciar Usuários'>\r\n                    <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                        open={open}\r\n                        autoHideDuration={6000}\r\n                        onClose={handleClose}\r\n                        style={{width: '40%'}}\r\n                    >\r\n                        <Alert variant=\"filled\" severity=\"success\" onClose={handleClose} sx={{ width: '100%' }}>Usuário excluido com sucesso.</Alert>\r\n                    </Snackbar>\r\n                    <Box\r\n                        display='flex'\r\n                        alignItems='center'\r\n                        height={theme.spacing(5)}\r\n                    >\r\n                        {/*<TextField\r\n                            size='small'\r\n                            placeholder='Pesquisar...'\r\n                        />*/}\r\n                        <Box\r\n                            flex={1}\r\n                            display='flex'\r\n                            justifyContent='end'\r\n                            marginBottom={2}\r\n                        >\r\n                            <Button\r\n                                color='primary'\r\n                                variant='contained'\r\n                                disableElevation\r\n                                startIcon={<Add/>}\r\n                            >\r\n                                Novo Usuário\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                    \r\n                    {tipo === 'Medico' && <h1>MEDICO</h1>}\r\n                    {tipo === 'Paciente' && <h1>PACIENTE</h1>}\r\n                    <PaperStyled>\r\n                        <h2>Listagem de Usuários</h2>\r\n                        <TableContainer component={Paper} elevation={0}>\r\n                            <Table aria-label=\"simple table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>ID</TableCell>\r\n                                    <TableCell>NOME</TableCell>\r\n                                    <TableCell>DATA DE NASCIMENTO</TableCell>\r\n                                    <TableCell>GÊNERO</TableCell>\r\n                                    <TableCell>E-MAIL</TableCell>\r\n                                    <TableCell>CRIADO EM</TableCell>\r\n                                    <TableCell>ATUALIZADO EM</TableCell>\r\n                                    <TableCell>AÇÕES</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {users.map(u => (\r\n                                    <TableRow key={u.id}>\r\n                                        <TableCell component=\"th\" scope=\"row\">{u.id}</TableCell>\r\n                                        <TableCell component=\"th\" scope=\"row\">{u.nome}</TableCell>\r\n                                        <TableCell>{new Date(u.dt_nascimento).toLocaleDateString('pt-br')}</TableCell>\r\n                                        <TableCell>{u.genero}</TableCell>\r\n                                        <TableCell>{u.email}</TableCell>\r\n                                        <TableCell>{new Date(u.criado_em).toLocaleString('pt-br')}</TableCell>\r\n                                        <TableCell>{new Date(u.atualizado_em).toLocaleString('pt-br')}</TableCell>\r\n                                        <TableCell>\r\n                                            <ButtonBox>\r\n                                                <ButtonTool\r\n                                                    size=\"small\"\r\n                                                    variant=\"outlined\"\r\n                                                    color=\"primary\"\r\n                                                    onClick={() => navigate(`/usuario/consultas/${u.id}`)}\r\n                                                >\r\n                                                    <Event/>\r\n                                                </ButtonTool>\r\n                                                <ButtonTool\r\n                                                    size=\"small\"\r\n                                                    variant=\"outlined\"\r\n                                                    color=\"primary\"\r\n                                                    onClick={() => navigate(`/usuario/editar/${u.id}`)}\r\n                                                >\r\n                                                    <BorderColor/>\r\n                                                </ButtonTool>\r\n                                                <ButtonTool\r\n                                                    size=\"small\"\r\n                                                    variant=\"outlined\"\r\n                                                    color=\"error\"\r\n                                                    onClick={() => remove(u.id)}\r\n                                                >\r\n                                                    <Delete/>\r\n                                                </ButtonTool>\r\n                                            </ButtonBox>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </PaperStyled>\r\n                </BaseLayout>\r\n            </NavBar>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UsuariosListagem","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\UsuariosListagem\\ConsultasListagem\\index.js",["324","325","326","327","328","329","330"],"import React, { useState, useEffect } from 'react'\r\nimport api from '../../../services/api'\r\nimport { \r\n    Box,\r\n    Button,\r\n    useTheme\r\n} from '@mui/material'\r\nimport { Add, BorderColor, Delete, Event } from '@mui/icons-material'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport { ButtonTool, PaperStyled } from '../../../styles/UsuariosListagem'\r\nimport NavBar from '../../../components/NavBar'\r\nimport CardConsulta from '../../../components/CardConsulta'\r\nimport BaseLayout from '../../../layouts/BaseLayout'\r\nimport { configure } from '@testing-library/react'\r\n\r\nfunction ConsultasListagem(){\r\n    let navigate = useNavigate()\r\n    let params = useParams()\r\n    const theme = useTheme()\r\n    const [usuario, setUsuario] = useState([])\r\n    const [consultas, setConsultas] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    useEffect(() => {\r\n        async function loadConsultas(){\r\n            const response = await api.get(`/admin/consultas/${params.id}`)\r\n            setConsultas(response.data.results)\r\n            console.log(response.data.results)\r\n            setUsuario(response.data.others)\r\n            setLoading(false)\r\n\r\n        }\r\n        loadConsultas()\r\n    },[])\r\n\r\n    if (loading) {\r\n        return <div>Carregando dados...</div>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <NavBar>\r\n                <BaseLayout title={`Consultas agendadas para ${usuario[0].nome}`}>\r\n                    {(usuario[0].tipo === 'Medico') && \r\n                        <Box\r\n                            display='flex'\r\n                            alignItems='center'\r\n                            height={theme.spacing(5)}\r\n                        >\r\n                            {/*<TextField\r\n                                size='small'\r\n                                placeholder='Pesquisar...'\r\n                            />*/}\r\n                            <Box\r\n                                flex={1}\r\n                                display='flex'\r\n                                justifyContent='end'\r\n                                marginBottom={2}\r\n                            >\r\n                                <Button\r\n                                    color='primary'\r\n                                    variant='contained'\r\n                                    disableElevation\r\n                                    startIcon={<Add/>}\r\n                                    onClick={() => navigate('/consulta/adicionar')}\r\n                                >\r\n                                    Adicionar Consultas\r\n                                </Button>\r\n                            </Box>\r\n                        </Box>\r\n                    }\r\n                    \r\n                    <div className=\"container\">\r\n                \r\n                    {consultas.map(consulta => (\r\n                        <CardConsulta\r\n                            key={consulta.id}\r\n                            id_consulta={consulta.id}\r\n                            status={consulta.status}\r\n                            id_especialidade={consulta.id_especialidade}\r\n                            id_medico={consulta.id_medico}\r\n                            id_paciente={consulta.id_paciente}\r\n                            data={consulta.dt_hr_consulta}\r\n                        />\r\n                    ))}\r\n                    </div>\r\n                </BaseLayout>\r\n            </NavBar>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ConsultasListagem","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Configuracoes\\index.js",["331"],"import * as React from 'react';\r\nimport { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system';\r\nimport TabsUnstyled from '@mui/base/TabsUnstyled';\r\nimport TabsListUnstyled from '@mui/base/TabsListUnstyled';\r\nimport TabPanelUnstyled from '@mui/base/TabPanelUnstyled';\r\nimport { buttonUnstyledClasses } from '@mui/base/ButtonUnstyled';\r\nimport TabUnstyled, { tabUnstyledClasses } from '@mui/base/TabUnstyled';\r\nimport api from '../../services/api'\r\nimport NavBar from '../../components/NavBar'\r\nimport FormUsuario from '../../components/Configuracoes/FormUsuario'\r\nimport FormEndereco from '../../components/Configuracoes/FormEndereco'\r\nimport FormPaciente from '../../components/Configuracoes/FormPaciente'\r\nimport { Button, Snackbar, IconButton, Alert } from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { Container } from '../../styles/Configuracoes'\r\nimport BaseLayout from '../../layouts/BaseLayout'\r\n\r\n\r\nconst blue = {\r\n  50: '#F0F7FF',\r\n  100: '#C2E0FF',\r\n  200: '#80BFFF',\r\n  300: '#66B2FF',\r\n  400: '#3399FF',\r\n  500: '#007FFF',\r\n  600: '#0072E5',\r\n  700: '#0059B2',\r\n  800: '#004C99',\r\n  900: '#003A75',\r\n};\r\n\r\nconst Tab = styled(TabUnstyled)`\r\n  font-family: IBM Plex Sans, sans-serif;\r\n  color: white;\r\n  cursor: pointer;\r\n  font-size: 0.875rem;\r\n  font-weight: bold;\r\n  background-color: transparent;\r\n  width: 100%;\r\n  padding: 12px 16px;\r\n  margin: 6px 6px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  &:hover {\r\n    background-color: ${blue[400]};\r\n  }\r\n\r\n  &:focus {\r\n    color: #fff;\r\n    border-radius: 3px;\r\n    outline: 2px solid ${blue[200]};\r\n    outline-offset: 2px;\r\n  }\r\n\r\n  &.${tabUnstyledClasses.selected} {\r\n    background-color: ${blue[50]};\r\n    color: ${blue[600]};\r\n  }\r\n\r\n  &.${buttonUnstyledClasses.disabled} {\r\n    opacity: 0.5;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst TabPanel = styled(TabPanelUnstyled)`\r\n  width: 100%;\r\n  font-family: IBM Plex Sans, sans-serif;\r\n  font-size: 0.875rem;\r\n`;\r\n\r\nconst TabsList = styled(TabsListUnstyled)`\r\n  min-width: 320px;\r\n  background-color: ${blue[500]};\r\n  border-radius: 8px;\r\n  margin-bottom: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  align-content: space-between;\r\n`;\r\n\r\nexport default function Configuracoes() {\r\n  const navigate = useNavigate()\r\n  const [tipo, setTipo] = useState(\"\")\r\n  const [open, setOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getType()\r\n  },[])\r\n\r\n  async function getType(){\r\n    const result = await api.get('/usuario/getType')\r\n    setTipo(result.data.tipo)\r\n  }\r\n\r\n  async function desativarConta() {\r\n    const res = window.confirm('Deseja realmente excluir?')\r\n    if (res) {\r\n        try {\r\n            await api.put('/usuario/disable')\r\n            handleClick()\r\n            localStorage.removeItem(\"token\")\r\n            setTimeout(() => {\r\n              navigate('/');\r\n            }, 3000)  \r\n        } catch (err) {\r\n            console.log(\"ops! ocorreu um erro\" + err)\r\n        }\r\n    }\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\t\r\n\r\n  const handleClose = (event, reason) => {\r\n      if (reason === 'clickaway') {\r\n          return;\r\n      }\r\n      setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <NavBar>\r\n      <BaseLayout title='Configurações'>\r\n        <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n          open={open}\r\n          autoHideDuration={6000}\r\n          onClose={handleClose}\r\n          style={{width: '40%'}}\r\n        >\r\n            <Alert variant=\"filled\" severity=\"success\" onClose={handleClose} sx={{ width: '100%' }}>Usuário desativado!.</Alert>\r\n        </Snackbar>\r\n        <Container>\r\n          <Button variant=\"contained\" size=\"large\" color=\"error\" sx={{ margin: 1 }} onClick={desativarConta}><h4>DESATIVAR CONTA</h4></Button>\r\n          <TabsUnstyled defaultValue={0}>\r\n            <TabsList>\r\n              <Tab>Dados de Acesso</Tab>\r\n              <Tab>Endereço</Tab>\r\n              {tipo === 'Paciente' && <Tab>Dados do Paciente</Tab>}\r\n            </TabsList>\r\n            <TabPanel value={0}>\r\n              <FormUsuario/>\r\n            </TabPanel>\r\n            <TabPanel value={1}><FormEndereco/></TabPanel>\r\n            <TabPanel value={2}>\r\n              {tipo === 'Paciente' && <FormPaciente/>}\r\n            </TabPanel>\r\n          </TabsUnstyled>\r\n        </Container>\r\n      </BaseLayout>\r\n    </NavBar>\r\n  )\r\n}","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Dashboard\\index.js",["332","333","334","335"],"import React, { useState, useEffect } from 'react'\r\nimport api from '../../services/api'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { Box, Button} from '@mui/material'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\n\r\nimport NavBar from '../../components/NavBar'\r\nimport BaseLayout from '../../layouts/BaseLayout'\r\n// import { Principal } from '../../styles/Dashboard'\r\n\r\nfunction Dashboard() {\r\n    const navigate = useNavigate()\r\n    const [tipo, setTipo] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        getType()\r\n    }, [])\r\n\r\n    async function getType(){\r\n        const result = await api.get('/usuario/getType')\r\n        setTipo(result.data.tipo)\r\n    }\r\n\r\n    function minhasConsultas(){\r\n        navigate('/consultas')\r\n    }\r\n\r\n    function configuracoes(){\r\n        navigate('/config')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <NavBar>\r\n            {/* <Box sx={{marginX: 10}}>\r\n                <Button variant=\"contained\" size=\"large\" color=\"primary\" sx={{margin: 1}}><h1>primary</h1></Button>\r\n                <Button variant=\"contained\" size=\"large\" color=\"secondary\" sx={{margin: 1}}><h1>secondary</h1></Button>\r\n                <Button variant=\"contained\" size=\"large\" color=\"success\" sx={{margin: 1}}><h1>success</h1></Button>\r\n                <Button variant=\"contained\" size=\"large\" color=\"error\" sx={{margin: 1}}><h1>error</h1></Button>\r\n                <Button variant=\"contained\" size=\"large\" color=\"info\" sx={{margin: 1}}><h1>info</h1></Button>\r\n                <Button variant=\"contained\" size=\"large\" color=\"warning\" sx={{margin: 1}}><h1>warning</h1></Button>\r\n            </Box>\r\n            <hr/> */}\r\n\r\n                <BaseLayout title={`Página Inicial (${tipo})`}>\r\n                    <div style={{marginTop: '100px', display: 'flex', flexWrap: 'wrap', alignItems: 'center'}}>\r\n                        {tipo === 'Paciente' && \r\n                            <>\r\n                                <Button variant=\"contained\" size=\"large\" color=\"secondary\" sx={{margin: 1}} style={{color: '#fff'}} onClick={() => navigate('/consulta/adicionar')}><h2>Nova Consulta</h2></Button>\r\n                            </>             \r\n                        }\r\n\r\n                        {tipo === 'Medico' && \r\n                            <>\r\n                                <Button variant=\"contained\" size=\"large\" color=\"secondary\" sx={{margin: 1}} style={{color: '#fff'}} onClick={() => navigate('/config/disponibilidademedica')}><h2>Definir Disponibilidade</h2></Button>\r\n                            </> \r\n                        }\r\n\r\n                        {(tipo === 'Paciente' || tipo === 'Medico')  && \r\n                            <>\r\n                                <Button variant=\"contained\" size=\"large\" color=\"secondary\" sx={{margin: 1}} style={{color: '#fff'}} onClick={() => navigate('/consultas')}><h2>Consultas</h2></Button>\r\n                                <Button variant=\"contained\" size=\"large\" color=\"secondary\" sx={{margin: 1}} style={{color: '#fff'}} onClick={() => navigate('/agenda')}><h2>Minha Agenda</h2></Button>\r\n                                <Button variant=\"contained\" size=\"large\" color=\"secondary\" sx={{margin: 1}} style={{color: '#fff'}} onClick={() => navigate('/historico')}><h2>Historico de Consultas</h2></Button>\r\n                            </>\r\n                        }\r\n\r\n                        {tipo === 'Admin' && \r\n                            <>\r\n                                <Button variant=\"contained\" size=\"large\" color=\"secondary\" sx={{margin: 1}} style={{color: '#fff'}} onClick={() => navigate('/admin')}><h2>Gerenciar Usuários</h2></Button>\r\n                                <Button variant=\"contained\" size=\"large\" color=\"secondary\" sx={{margin: 1}} style={{color: '#fff'}} onClick={() => navigate('/novos_medicos')}><h2>Novos Médicos</h2></Button>\r\n                            </>  \r\n                        }\r\n                    </div>\r\n                </BaseLayout>\r\n            </NavBar>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Dashboard","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\CheckNewDoctors\\index.js",["336","337","338"],"import React, { useState, useEffect } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport api from '../../services/api'\r\nimport { \r\n    Accordion,\r\n    AccordionSummary,\r\n    AccordionDetails,\r\n    Typography,\r\n    Button,\r\n    Snackbar, \r\n    IconButton, \r\n    Alert\r\n} from '@mui/material'\r\nimport {ExpandMore} from '@mui/icons-material';\r\nimport NavBar from '../../components/NavBar'\r\nimport BaseLayout from '../../layouts/BaseLayout'\r\n\r\nfunction CheckNewDoctors(){    \r\n    const [newDoctors, setNewDoctors] = useState([])\r\n    const [specialties, setSpecialties] = useState([])\r\n    const [open, setOpen] = useState(false);\r\n    const [open1, setOpen1] = useState(false);\r\n    const [open2, setOpen2] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getNewDoctors()\r\n        getAllSpecialities()\r\n    },[])\r\n\r\n    async function getNewDoctors(){\r\n        const result = await api.get('/medico/getNewDoctors')\r\n        setNewDoctors(result.data)\r\n    }\r\n\r\n    setInterval(getNewDoctors, 60000)\r\n\r\n    async function getAllSpecialities(){\r\n        const result = await api.get(`/medico/getSpecialityByDoctor`)\r\n        setSpecialties(result.data)\r\n    }\r\n\r\n    async function deleteMedicoEspecialidade(id_medico, id_especialidade){\r\n        const res = window.confirm('Deseja Realmente Remover Essa Especialidade?')\r\n        if (res) {\r\n            await api.delete(`/medico/medico_especialidade/${id_medico}/${id_especialidade}`)\r\n            handleClick()\r\n            getAllSpecialities()\r\n        }\r\n    }\r\n\r\n    async function aprovarCadastro(id_medico, nome, email){\r\n        const res = window.confirm(\"Ao clicar em 'OK' você concorda com todas as especialidades selecionadas\")\r\n        if (res) {\r\n            await api.put(`/medico/validar_medico/${id_medico}/${nome}/${email}`)\r\n            handleClick1()\r\n            getNewDoctors()\r\n        }\r\n    }\r\n    async function reprovarCadastro(id_medico, nome, email){\r\n        const res = window.confirm(\"Deseja realmente reprovar o cadastro?\")\r\n        if (res) {\r\n            await api.delete(`/medico/reprovarMedico/${id_medico}/${nome}/${email}`)\r\n            handleClick2()\r\n            getNewDoctors()\r\n        }\r\n    }\r\n\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n    };\t\r\n    \r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    \r\n    const handleClick1 = () => {\r\n        setOpen1(true);\r\n    };\t\r\n    \r\n    const handleClose1 = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen1(false);\r\n    };\r\n\r\n    const handleClick2 = () => {\r\n        setOpen2(true);\r\n    };\t\r\n    \r\n    const handleClose2 = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen2(false);\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n        <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n            open={open}\r\n            autoHideDuration={6000}\r\n            onClose={handleClose}\r\n            style={{width: '40%'}}\r\n        >\r\n            <Alert variant=\"filled\" severity=\"success\" onClose={handleClose} sx={{ width: '100%' }}>Especialidade Removida.</Alert>\r\n        </Snackbar>\r\n\r\n        <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n            open={open1}\r\n            autoHideDuration={6000}\r\n            onClose={handleClose1}\r\n            style={{width: '40%'}}\r\n        >\r\n            <Alert variant=\"filled\" severity=\"success\" onClose={handleClose1} sx={{ width: '100%' }}>Médico Aprovado.</Alert>\r\n        </Snackbar>\r\n\r\n        <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n            open={open2}\r\n            autoHideDuration={6000}\r\n            onClose={handleClose2}\r\n            style={{width: '40%'}}\r\n        >\r\n            <Alert variant=\"filled\" severity=\"error\" onClose={handleClose2} sx={{ width: '100%' }}>Médico Reprovado.</Alert>\r\n        </Snackbar>\r\n\r\n            <NavBar>\r\n                <BaseLayout title='Gerenciar Usuários'>\r\n                    <h1>NOVOS MÉDICOS</h1>\r\n                    {newDoctors.length === 0 ? <p>Não Há Registros.</p> : <p>Aguardando Verificação do Administrador.</p>}\r\n                    \r\n                    \r\n                    <div>\r\n                        {newDoctors.map(doctor => (\r\n                            <>\r\n                            <Accordion>\r\n                                {/* Head */}\r\n                                <AccordionSummary\r\n                                    expandIcon={<ExpandMore />}\r\n                                    aria-controls=\"panel1a-content\"\r\n                                    id=\"panel1a-header\"\r\n                                >\r\n                                    <Typography><b>Médico:</b> {doctor.nome}</Typography>\r\n                                </AccordionSummary>\r\n                                \r\n                                {/* Body */}\r\n                                <AccordionDetails>\r\n                                    <div style={{display: 'flex', flexWrap: 'wrap'}}>\r\n                                        <p style={{flex: 1}}><b>Telefone: </b>{doctor.telefone}</p>\r\n                                        <p style={{flex: 1}}><b>E-mail: </b>{doctor.email}</p>\r\n                                        <p style={{flex: 1}}><b>CRM: </b>{doctor.crm}</p>\r\n                                    </div>\r\n                                    <p><b>Especialidades</b></p>\r\n                                    <ul>\r\n                                        {specialties.map(item => {\r\n                                            if(item.id_medico === doctor.id){\r\n                                                return(\r\n                                                    <li style={{marginTop: '1rem'}}>\r\n                                                        <div style={{display: 'flex'}}>\r\n                                                            <div style={{flex: 1}}>{item.nome}</div>\r\n                                                            <div style={{flex: 1}}>\r\n                                                            <Button variant=\"contained\" size=\"small\" color=\"error\" onClick={() => {deleteMedicoEspecialidade(item.id_medico, item.id_especialidade)}}>X</Button>\r\n                                                            </div>\r\n\r\n                                                        </div>\r\n                                                    </li>\r\n                                                )\r\n                                            }\r\n                                        })}\r\n                                    </ul>\r\n                                   \r\n                                </AccordionDetails>\r\n                                <div style={{display: 'flex', flexWrap: 'wrap', justifyContent: 'space-around'}}>\r\n                                    <Button variant=\"contained\" size=\"small\" fullWidth onClick={() => {aprovarCadastro(doctor.id, doctor.nome, doctor.email)}} style={{flex: 1, maxWidth: '45%'}}>Aprovar</Button>\r\n                                    <Button variant=\"contained\" size=\"small\" color=\"error\" fullWidth onClick={() => {reprovarCadastro(doctor.id, doctor.nome, doctor.email)}} style={{flex: 1, maxWidth: '45%'}}>Reprovar</Button>\r\n                                </div>\r\n                            </Accordion>\r\n                            </>  \r\n                        ))}\r\n\r\n                    </div>\r\n                </BaseLayout>\r\n            </NavBar>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CheckNewDoctors","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Perfil\\index.js",["339"],"import {useState, useEffect} from 'react'\r\nimport { Button, Modal, Container, Box } from '@mui/material'\r\nimport dayjs from 'dayjs'\r\n\r\nimport NavBar from '../../components/NavBar'\r\nimport BaseLayout from '../../layouts/BaseLayout'\r\nimport api from '../../services/api'\r\nimport { useAuthContext } from '../../context/AuthContext'\r\nimport UpdateUserForm from '../../components/FormDadosPessoais/UpdateUserForm'\r\nimport UpdateAddressForm from '../../components/FormEndereco/UpdateAddressForm'\r\nimport UpdatePatientForm from '../../components/FormPaciente/UpdatePatientForm'\r\n\r\nconst style = {\r\n  position: 'absolute',\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  alignItems: 'flex-end',\r\n  top: '50%',\r\n  left: '50%',\r\n  transform: 'translate(-50%, -50%)',\r\n  bgcolor: 'background.paper',\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nexport default function Perfil() {\r\n  const { logout } = useAuthContext()\r\n  const [user, setUser] = useState([])\r\n  const [userType, setUserType] = useState([])\r\n  const [address, setAddress] = useState([])\r\n  const [patient, setPatient] = useState([])\r\n  const [openModalUser, setOpenModalUser] = useState(false);\r\n  const [openModalAddress, setOpenModalAddress] = useState(false);\r\n  const [openModalPatient, setOpenModalPatient] = useState(false);\r\n\r\n  const handleOpenModalUser = () => setOpenModalUser(!openModalUser);\r\n  const handleOpenModalAddress = () => setOpenModalAddress(!openModalAddress);\r\n  const handleOpenModalPatient = () => setOpenModalPatient(!openModalPatient);\r\n\r\n  useEffect(() => {\r\n    getUser()\r\n    getUserType()\r\n    getAddress()\r\n  }, [])\r\n\r\n  async function getUser(){\r\n    const result = await api.get('/usuario/getUserById')\r\n    setUser(result.data)\r\n  }\r\n\r\n  async function getAddress(){\r\n    const result = await api.get('/usuario/endereco')\r\n    setAddress(result.data)\r\n  }\r\n\r\n  async function getPatient(){\r\n    const result = await api.get('/paciente')\r\n    setPatient(result.data)\r\n  }\r\n\r\n  async function getUserType(){\r\n    const result = await api.get('/usuario/getType')\r\n    setUserType(result.data.tipo)\r\n\r\n    if(result.data.tipo === 'Paciente'){\r\n      getPatient()\r\n    }\r\n  }\r\n\r\n  async function disableAccount() {\r\n    const res = window.confirm('Deseja realmente desativar sua conta?')\r\n    if (res) {\r\n        try {\r\n            await api.put('/usuario/disable')\r\n            logout()\r\n        } catch (err) {\r\n            console.log(\"ops! ocorreu um erro\" + err)\r\n        }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <NavBar>\r\n          <BaseLayout title={`Perfil de ${user.nome}.`}>\r\n          \r\n              <Container style={{display: 'flex', alignItems: 'flex-end', flexWrap: 'wrap'}}>\r\n\r\n                <Box style={{padding: '10px', maxWidth: '250px', width: '100%'}} xs={12} sm={6} md={4} >\r\n                  <h2>Dados Pessoais:</h2> {/* Tabela usuário */}\r\n\r\n                  <p style={{margin: '5px 0px'}}><b>Nome:</b> {user.nome}</p>\r\n                  <p style={{margin: '5px 0px'}}><b>Gênero: </b> \r\n                                {user.genero === 'H' && 'Masculino'}\r\n                                {user.genero === 'M' && 'Feminino'}\r\n                                {user.genero === 'O' && 'Outro'}\r\n                                \r\n                  </p>\r\n                  <p style={{margin: '5px 0px'}}><b>Data de Nascimento:</b> {dayjs(user.dt_nascimento).format('DD/MM/YYYY')}</p>\r\n                  <p style={{margin: '5px 0px'}}><b>Telefone:</b> {user.telefone}</p>\r\n                  <p style={{margin: '5px 0px'}}><b>E-mail:</b> {user.email}</p>\r\n                  <Button size=\"large\" variant=\"contained\" color='primary' style={{width: '100%'}} onClick={handleOpenModalUser}>Editar</Button>\r\n                </Box>\r\n\r\n                <Modal\r\n                  open={openModalUser}\r\n                  onClose={handleOpenModalUser}\r\n                  aria-labelledby=\"modal-modal-title\"\r\n                  aria-describedby=\"modal-modal-description\"\r\n                >\r\n                  \r\n                  <Box sx={style} style={{padding: '0px 1.5rem 1.5rem 1.5rem'}}>\r\n                    <Button onClick={handleOpenModalUser} color='error' style={{fontSize: '25px', fontWeight: 'bold'}}>X</Button>\r\n                    <UpdateUserForm \r\n                      toggleModal={handleOpenModalUser} \r\n                      name={user.nome} \r\n                      gender={user.genero} \r\n                      telephone={user.telefone} \r\n                      email={user.email}\r\n\r\n                    />\r\n                  </Box>\r\n                </Modal>\r\n\r\n\r\n                <Box style={{padding: '10px', maxWidth: '250px', width: '100%'}} xs={12} sm={6} md={4} >\r\n                  <h2>Endereço:</h2> {/* Tabela endereço */}\r\n                  \r\n                  <p style={{margin: '5px 0px'}}><b>Endereço:</b> {address.logradouro}, {address.numero}</p>\r\n                  <p style={{margin: '5px 0px'}}><b>Cep:</b> {address.cep}</p>\r\n                  <p style={{margin: '5px 0px'}}><b>Complemento: </b>{!address.completo? 'editar para adicionar' : address.complemento}</p>\r\n                  <p style={{margin: '5px 0px'}}><b>Cidade:</b> {address.cidade}</p>\r\n                  <p style={{margin: '5px 0px'}}><b>Estado:</b> {address.estado}</p>\r\n                  <Button size=\"large\" variant=\"contained\" color='primary' style={{width: '100%'}} onClick={handleOpenModalAddress}>Editar</Button>\r\n                </Box>\r\n\r\n                <Modal\r\n                  open={openModalAddress}\r\n                  onClose={handleOpenModalAddress}\r\n                  aria-labelledby=\"modal-modal-title\"\r\n                  aria-describedby=\"modal-modal-description\"\r\n                >\r\n                  \r\n                  <Box sx={style} style={{padding: '0px 1.5rem 1.5rem 1.5rem'}}>\r\n                    <Button onClick={handleOpenModalAddress} color='error' style={{fontSize: '25px', fontWeight: 'bold'}}>X</Button>\r\n                    <UpdateAddressForm\r\n                      toggleModal={handleOpenModalAddress} \r\n                      cep={address.cep}\r\n                      number={address.numero} \r\n                      complement={address.complemento} \r\n                      city={address.cidade} \r\n                      state={address.estado}\r\n                    />\r\n                  </Box>\r\n                </Modal>\r\n                \r\n\r\n                {userType === 'Paciente' && (\r\n                  <>\r\n                    <Box style={{padding: '10px', maxWidth: '250px', width: '100%'}} xs={12} sm={6} md={4} >\r\n                      <h2>Dados do Paciente:</h2> \r\n\r\n                      <p style={{margin: '5px 0px'}}><b>Altura:</b> {patient.altura}</p>\r\n                      <p style={{margin: '5px 0px'}}><b>Peso:</b> {patient.peso} Kg</p>\r\n                      <p style={{margin: '5px 0px'}}><b>Médicamentos:</b> {!patient.medicamento ? 'editar para adicionar' : patient.medicamento}</p>\r\n                      <p style={{margin: '5px 0px'}}><b>Doenças Crônicas:</b> {!patient.doenca_cronica ? 'editar para adicionar' : patient.doenca_cronica}</p>\r\n                      <p style={{margin: '5px 0px'}}><b>Alergias:</b> {!patient.alergia ? 'editar para adicionar' : patient.alergia}</p>\r\n                      <p style={{margin: '5px 0px'}}><b>Vicios:</b> {!patient.vicio ? 'editar para adicionar' : patient.vicio}</p>\r\n                      <Button size=\"large\" variant=\"contained\" color='primary' style={{width: '100%'}} onClick={handleOpenModalPatient}>Editar</Button>\r\n                    </Box>\r\n                    <Modal\r\n                      open={openModalPatient}\r\n                      onClose={handleOpenModalPatient}\r\n                      aria-labelledby=\"modal-modal-title\"\r\n                      aria-describedby=\"modal-modal-description\"\r\n                    >\r\n                    \r\n                    <Box sx={style} style={{padding: '0px 1.5rem 1.5rem 1.5rem'}}>\r\n                      <Button onClick={handleOpenModalPatient} color='error' style={{fontSize: '25px', fontWeight: 'bold'}}>X</Button>\r\n                      <UpdatePatientForm\r\n                        toggleModal={handleOpenModalPatient} \r\n                        height={patient.altura}\r\n                        weight={patient.peso}\r\n                        medicine={patient.medicamento}\r\n                        disease={patient.doenca_cronica}\r\n                        allergies={patient.alergia}\r\n                        addiction={patient.vicio}\r\n                      />\r\n                    </Box>\r\n                  </Modal>\r\n                </>\r\n                )}\r\n\r\n\r\n                <Box style={{padding: '10px', maxWidth: '250px', width: '100%'}} xs={12} sm={6} md={4} >\r\n                  <h2>Desativar Conta: </h2>\r\n                  <Button size=\"large\" variant=\"contained\" color='error' style={{width: '100%'}} onClick={disableAccount}>Desativar</Button>\r\n                </Box>\r\n\r\n              </Container>\r\n\r\n          </BaseLayout> \r\n        </NavBar>\r\n    </div>\r\n\r\n  )\r\n}","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\RecoverAccount\\index.js",["340","341","342","343"],"import { api } from '../../services/api'\r\nimport { useState, useEffect } from 'react'\r\nimport { Container, Button, Grid, TextField, Snackbar, IconButton, Alert } from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction RecoverAccount({handleClose}){\r\n    const navigate = useNavigate()\r\n    const [email, setEmail] = useState('')\r\n    const [open, setOpen] = useState(false);\r\n    const [open1, setOpen1] = useState(false);\r\n    const [open2, setOpen2] = useState(false);\r\n    \r\n    async function esqueceuASenha(e){\r\n        try{\r\n            e.preventDefault()\r\n            if(!email || email == null){\r\n                handleClick()\r\n                return\r\n            }\r\n\r\n            let exists = await api.get(`/usuario/getUserByEmail/${email}`)\r\n\r\n            if(exists.data == ''){\r\n                handleClick1()\r\n                return \r\n            }\r\n            \r\n            await api.post(\"/usuario/esqueceu_a_senha\", { email })\r\n            \r\n            handleClick2()\r\n            setTimeout(() => {\r\n                handleClose()\r\n            }, 3000)\r\n            \r\n        } catch (err) {\r\n            console.error(\"ops! ocorreu um erro\" + err)\r\n        }\r\n    }\r\n\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n    };\t\r\n    \r\n    const handleClose3 = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleClick1 = () => {\r\n        setOpen1(true);\r\n    };\t\r\n    \r\n    const handleClose1 = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen1(false);\r\n    };\r\n    const handleClick2 = () => {\r\n        setOpen2(true);\r\n    };\t\r\n    \r\n    const handleClose2 = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen2(false);\r\n    };\r\n\r\n    return(\r\n        <Container style={{display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose3}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"warning\" onClose={handleClose3} sx={{ width: '100%' }}>Preencha o e-mail e clique em esqueceu a senha novamente.</Alert>\r\n            </Snackbar>\r\n            \r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open1}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose1}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"warning\" onClose={handleClose1} sx={{ width: '100%' }}>E-mail não encontrado.</Alert>\r\n            </Snackbar>\r\n            \r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open2}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose2}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"success\" onClose={handleClose2} sx={{ width: '100%' }}>O link foi enviado. Acesse o seu e-mail para redefinir a senha.</Alert>\r\n            </Snackbar>\r\n\r\n            <Grid item xs={12} sm={12} md={10} lg={7}>\r\n                <h1>RECUPERAR CONTA</h1>\r\n                <p>Insira o seu email e enviaremos um link para você redefinir a senha da sua conta.</p>\r\n            </Grid>\r\n                \r\n            \r\n            <Grid item xs={12} sm={12} md={10} lg={7}>\r\n                <form>\r\n                    <TextField style={{marginBottom: '1rem'}}\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        id=\"standard-basic\"\r\n                        label=\"E-mail\"\r\n                        variant=\"standard\"\r\n                        value={email}\r\n                        onChange={e => setEmail(e.target.value)}\r\n                    />\r\n                    <Button tpye=\"submit\" onClick={e => esqueceuASenha(e)}>\r\n                        Enviar Link\r\n                    </Button>\r\n                </form>\r\n            </Grid>\r\n            \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default RecoverAccount","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\ResetPassword\\index.js",["344","345"],"import api from '../../services/api'\r\nimport {useState, useEffect} from 'react'\r\nimport { Container, Button, Grid, TextField, Snackbar, IconButton, Alert } from '@mui/material'\r\nimport SaveIcon from '@mui/icons-material/Save';\r\n\r\nfunction ResetPassword(){  \r\n    const [email, setEmail] = useState('')\r\n    const [senha, setSenha] = useState('')\r\n    const [open, setOpen] = useState(false);\r\n    const [open1, setOpen1] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getEmail()\r\n    }, [])\r\n\r\n    let url = window.location.pathname;\r\n    let token = url.substring(url.lastIndexOf('/') + 1);\r\n\r\n    async function getEmail(){\r\n        const res = await api.get(`/usuario/getEmail/${token}`)\r\n        setEmail(res.data.email)\r\n    }\r\n\r\n    async function redefinirSenha(e){\r\n        e.preventDefault();\r\n        try{\r\n            if(!senha || senha == null){\r\n                handleClick()\r\n                return\r\n            }\r\n            const res = await api.post(`/usuario/redefinir_senha/${token}`, { senha });\r\n    \r\n            if(res.status === 200){\r\n                handleClick1()\r\n                window.location.href = '/'\r\n            }          \r\n        }catch (err) {\r\n            console.error(\"ops! ocorreu um erro\" + err)\r\n        }\r\n    }\r\n\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n    };\t\r\n    \r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleClick1 = () => {\r\n        setOpen1(true);\r\n    };\t\r\n    \r\n    const handleClose1 = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen1(false);\r\n    };\r\n\r\n    return(\r\n        <Container>\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"warning\" onClose={handleClose} sx={{ width: '100%' }}>Prencha a senha.</Alert>\r\n            </Snackbar>\r\n\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open1}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose1}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"success\" onClose={handleClose1} sx={{ width: '100%' }}>Senha alterada.</Alert>\r\n            </Snackbar>\r\n            <Grid container marginY={5}> \r\n                <Grid item xs={4}></Grid>\r\n                <Grid item xs={4}>\r\n                    <h1>REDEFINIR SENHA</h1>\r\n                </Grid>\r\n                <Grid item xs={4}></Grid>\r\n            </Grid>\r\n            <Grid container marginY={2}> \r\n                <Grid item xs={4}></Grid>\r\n                <Grid item xs={4}>\r\n                    <form>\r\n                        <TextField type=\"text\" fullWidth id=\"standard-basic\" label=\"E-mail\" variant=\"standard\" value={email} disabled/><br/><br/>\r\n                        <TextField type=\"password\" fullWidth id=\"standard-basic\" label=\"Senha\" variant=\"standard\" onChange={e => setSenha(e.target.value)}/><br/><br/>\r\n                        <Button variant=\"outlined\" color=\"success\" startIcon={<SaveIcon />} onClick={redefinirSenha}>Atualizar</Button>\r\n                    </form>\r\n                </Grid>\r\n                <Grid item xs={4}></Grid>\r\n            </Grid>  \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ResetPassword","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\NotFoundPage\\index.js",["346"],"import React from 'react';\r\nimport { useNavigate } from 'react-router-dom'\r\nimport Button from '@mui/material/Button';\r\nimport NotFound from '../../img/notFound.png'\r\nimport NavBar from '../../components/NavBar'\r\nimport BaseLayout from '../../layouts/BaseLayout'\r\n\r\nfunction NotFoundPage(){\r\n    const navigate = useNavigate()\r\n    return(\r\n        <>\r\n            <NavBar>\r\n                <BaseLayout title=\"404 - Not Found\">\r\n                    <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\r\n                        <img src={NotFound} style={{maxWidth: '300px'}}/>\r\n                        <h3>Página Não Encontrada.</h3>\r\n                        <Button variant=\"contained\" full onClick={() => navigate('/inicio')}>Voltar para Home</Button>\r\n                    </div>\r\n                </BaseLayout>\r\n            </NavBar>\r\n        </>\r\n    )\r\n}\r\nexport default NotFoundPage;","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Agenda\\index.js",["347","348"],"import React from 'react';\r\nimport { useNavigate } from 'react-router-dom'\r\nimport Button from '@mui/material/Button';\r\nimport NavBar from '../../components/NavBar'\r\nimport BaseLayout from '../../layouts/BaseLayout'\r\nimport ReactBigCalendar from '../../components/ReactBigCalendar'\r\n\r\nfunction Agenda(){\r\n    const navigate = useNavigate()\r\n    return(\r\n        <>\r\n            <NavBar>\r\n                <BaseLayout title=\"Agenda\">\r\n                    <ReactBigCalendar/>\r\n                </BaseLayout>\r\n            </NavBar>\r\n        </>\r\n    )\r\n}\r\nexport default Agenda;","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\HistoricoConsultas\\index.js",["349","350"],"import React from 'react';\r\nimport {useState, useEffect} from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport Button from '@mui/material/Button';\r\nimport NavBar from '../../components/NavBar'\r\nimport BaseLayout from '../../layouts/BaseLayout'\r\nimport PatientsAppointmentHistory from '../../components/PatientsAppointmentHistory'\r\nimport DoctorsAppointmentHistory from '../../components/DoctorsAppointmentHistory'\r\nimport api from '../../services/api'\r\n\r\nfunction HistoricoConsultas(){\r\n    const navigate = useNavigate()\r\n    const [typeUser, setTypeUser] = useState()\r\n\r\n    useEffect(() => {\r\n        getType()\r\n    }, [])\r\n\r\n    async function getType(){\r\n        const result = await api.get('/usuario/getType')\r\n        setTypeUser(result.data.tipo)\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <NavBar>\r\n                <BaseLayout title=\"Historico de Consultas\">\r\n                    {typeUser === 'Medico' && <DoctorsAppointmentHistory/> }\r\n                    {typeUser === 'Paciente' && <PatientsAppointmentHistory/> }\r\n                </BaseLayout>\r\n            </NavBar>\r\n        </>\r\n    )\r\n}\r\nexport default HistoricoConsultas;","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Consultas\\AgendarConsulta\\index.js",["351","352"],"import React, { useState, useEffect } from 'react'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport { Box } from '@mui/material'\r\nimport api from '../../../services/api'\r\nimport BaseLayout from '../../../layouts/BaseLayout'\r\nimport NavBar from '../../../components/NavBar'\r\nimport CardConsulta from '../../../components/CardConsulta'\r\n\r\nfunction AgendarConsulta(){\r\n    let navigate = useNavigate()\r\n    let params = useParams()\r\n    const [consultas, setConsultas] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    useEffect(() => {\r\n        async function getConsultasDisponiveis(){\r\n            const response = await api.get(`/consulta/getConsultasDisponiveis`)\r\n            setConsultas(response.data)\r\n            console.log(response.data)\r\n            setLoading(false)\r\n\r\n        }\r\n        getConsultasDisponiveis()\r\n    },[])\r\n\r\n    if (loading) {\r\n        return <div>Carregando dados...</div>\r\n    }\r\n\r\n    return(\r\n        <NavBar>\r\n            <BaseLayout title='Agendar Consulta'>\r\n                <Box display='flex' flexDirection='row' flexWrap='wrap'>\r\n                {consultas.map(consulta => (\r\n                    \r\n                        <CardConsulta\r\n                            key={consulta.id}\r\n                            id_consulta={consulta.id}\r\n                            status={consulta.status}\r\n                            id_especialidade={consulta.id_especialidade}\r\n                            id_medico={consulta.id_medico}\r\n                            data={consulta.dt_hr_consulta}\r\n                        />\r\n                ))}\r\n                </Box>     \r\n           </BaseLayout>\r\n       </NavBar>\r\n    )\r\n}\r\n\r\nexport default AgendarConsulta","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Consultas\\MinhasConsultas\\index.js",["353","354","355","356","357","358"],"import React, { useState, useEffect } from 'react'\r\nimport CardConsulta from '../../../components/CardConsulta'\r\nimport './styles.css';\r\nimport api from '../../../services/api'\r\nimport BaseLayout from '../../../layouts/BaseLayout'\r\nimport NavBar from '../../../components/NavBar'\r\nimport { ButtonGroup, Button } from '@mui/material'\r\n\r\nfunction MinhasConsultas(){\r\n    const [appointments, setAppointments] = useState([])\r\n    const [filterActived, setFilterActived] = useState(\"all\")\r\n\r\n    useEffect(() => {\r\n        getAppointments()\r\n    },[filterActived])\r\n\r\n    async function getAppointments(){\r\n        const response = await api.get(`/consultas/getMyAppointments/${filterActived}`)\r\n        setAppointments(response.data)\r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n            <NavBar>\r\n                <BaseLayout title='Minhas Consultas'>\r\n                    <div className=\"filters\">\r\n                        <ButtonGroup variant=\"contained\" aria-label=\"outlined primary button group\" style={{boxShadow: 'none', borderRadius: '0px', display: 'flex', justifyContent: 'center', flexWrap: 'wrap'}}>\r\n                            <Button style={{width: '100%', minWidth: '120px', maxWidth: '120px', borderRadius: '0px'}} onClick={(e) => setFilterActived('today')} actived={filterActived == \"today\"? \"true\" : \"false\"}>Hoje</Button>\r\n                            <Button style={{width: '100%', minWidth: '120px', maxWidth: '120px', borderRadius: '0px'}} onClick={(e) => setFilterActived('all')} actived={filterActived == \"all\"? \"true\" : \"false\"}>Todos</Button>\r\n                            <Button style={{width: '100%', minWidth: '120px', maxWidth: '120px', borderRadius: '0px'}} onClick={(e) => setFilterActived('week')} actived={filterActived == \"week\"? \"true\" : \"false\"}>Semana</Button>\r\n                            <Button style={{width: '100%', minWidth: '120px', maxWidth: '120px', borderRadius: '0px'}} onClick={(e) => setFilterActived('scheduled')} actived={filterActived == \"scheduled\"? \"true\" : \"false\"}>Agendado</Button>\r\n                            <Button style={{width: '100%', minWidth: '120px', maxWidth: '120px', borderRadius: '0px'}} onClick={(e) => setFilterActived('canceled')} actived={filterActived == \"canceled\"? \"true\" : \"false\"}>Cancelado</Button>\r\n                        </ButtonGroup>\r\n                    </div>\r\n                    <div className=\"container\" style={{display: 'flex', flexWrap: 'wrap', justifyContent: 'center'}}>\r\n                        {appointments?.map(appointment => (\r\n                            <>\r\n                                <CardConsulta \r\n                                    style={{minWidth: '200px'}}\r\n                                    key={appointment.id} \r\n                                    id_consulta={appointment.id} \r\n                                    status={appointment.status} \r\n                                    id_especialidade={appointment.id_especialidade} \r\n                                    id_medico={appointment.id_medico} \r\n                                    id_paciente={appointment.id_paciente} \r\n                                    data={appointment.dt_hr_consulta}\r\n                                    url_consulta={appointment.url_consulta}\r\n                                />\r\n                            </>\r\n                        ))}\r\n                    </div>\r\n                </BaseLayout>\r\n            </NavBar>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default MinhasConsultas","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\services\\api.js",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\styles\\Cadastro\\Cadastro.js",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\layouts\\BaseLayout.jsx",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\FormEndereco\\UpdateAddressForm.js",["359"],"import React, { useState } from 'react'\r\nimport {TextField, Button, Snackbar, IconButton, Alert} from '@mui/material';\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from 'yup';\r\n\r\nimport api from '../../services/api'\r\n\r\nimport {\r\n    Form,\r\n    Div,\r\n} from '../../styles/Cadastro/Cadastro'\r\n\r\nfunction FormEndereco({toggleModal, cep, address, complement, city, number, state}){\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            cep: cep,\r\n            address: address,\r\n            complement: complement,\r\n            city: city,\r\n            number: number,\r\n            state: state,\r\n        },  \r\n        validationSchema: yup.object({\r\n            cep: yup\r\n                .string()\r\n                .required(\"O campo é obrigatório.\"),\r\n            address: yup\r\n                .string()\r\n                .required(\"O campo é obrigatório.\"),\r\n            complement: yup\r\n                .string(),\r\n            city: yup\r\n                .string()\r\n                .required(\"O campo é obrigatório.\"),\r\n            number: yup\r\n                .string()\r\n                .required(\"Obrigatório.\"),\r\n            state: yup\r\n                .string()\r\n                .required(\"O campo é obrigatório.\"),\r\n        }),\r\n        onSubmit: (values) => {\r\n            update(values)\r\n        }\r\n    });\r\n\r\n    function checkCep(){\r\n        let cep = formik.values.cep\r\n        const cepLimpo = cep.replace(/\\D/g, '')\r\n        fetch(`https://viacep.com.br/ws/${cepLimpo}/json/`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                formik.values.address = data.logradouro\r\n                formik.values.city = data.localidade\r\n                formik.values.state = data.uf\r\n        })\r\n    }\r\n\r\n    async function update({cep, number, complement, city, state}){       \r\n        await api.put(\"/usuario/endereco\", {\r\n            cep, \r\n            numero: number,\r\n            complemento: complement,\r\n            cidade: city,\r\n            estado: state,\r\n        });\r\n        handleClick()\r\n        setTimeout(() => {\r\n            toggleModal()\r\n        }, 3000)\r\n    }\r\n\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n    };\t\r\n    \r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    return(\r\n        <>\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"success\" onClose={handleClose} sx={{ width: '100%' }}>Endereço Atualizado.</Alert>\r\n            </Snackbar>\r\n            <Form style={{width: '70vw'}} onSubmit={formik.handleSubmit} xs={12}>\r\n                <h3 style={{margin: 0, marginBottom: '1rem'}} align=\"center\">Editar Endereço</h3>\r\n                <Div style={{flexDirection: 'column'}}>\r\n                    <TextField \r\n                        fullWidth \r\n                        error={formik.touched.cep && formik.errors.cep}\r\n                        size=\"small\"\r\n                        id=\"cep\"\r\n                        name=\"cep\"\r\n                        type=\"text\"\r\n                        label=\"Cep\" \r\n                        variant=\"outlined\" \r\n                        onChange={formik.handleChange}\r\n                        onBlur={\r\n                            checkCep\r\n                        }\r\n                        value={formik.values.cep}\r\n                    />\r\n                    {formik.touched.cep && formik.errors.cep ? (\r\n                        <div style={{color: 'red'}}>{formik.errors.cep}</div>\r\n                    ) : null}\r\n                </Div>\r\n\r\n                {/* <Div>\r\n                    <TextField \r\n                            fullWidth \r\n                            error={formik.touched.address && formik.errors.address}\r\n                            size=\"small\"\r\n                            id=\"address\"\r\n                            name=\"address\"\r\n                            type=\"text\"\r\n                            label=\"Endereço\" \r\n                            variant=\"outlined\" \r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.address}\r\n                            disabled\r\n                    />\r\n                    {formik.touched.address && formik.errors.address ? (\r\n                        <div style={{color: 'red'}}>{formik.errors.address}</div>\r\n                    ) : null}\r\n                </Div> */}\r\n\r\n                <Div>\r\n                    <TextField \r\n                        fullWidth \r\n                        error={formik.touched.number && formik.errors.number}\r\n                        size=\"small\"\r\n                        id=\"text\"\r\n                        name=\"number\"\r\n                        type=\"text\"\r\n                        label=\"Número\" \r\n                        variant=\"outlined\" \r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.number}\r\n                    />  \r\n                    {formik.touched.number && formik.errors.number ? (\r\n                        <div style={{color: 'red'}}>{formik.errors.number}</div>\r\n                    ) : null}\r\n                </Div>\r\n\r\n\r\n                <Div style={{flexDirection: 'column'}}>\r\n                    <TextField \r\n                        fullWidth \r\n                        size=\"small\"\r\n                        id=\"complement\"\r\n                        name=\"complement\"\r\n                        type=\"text\"\r\n                        label=\"Complemento\" \r\n                        variant=\"outlined\" \r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.complement}\r\n                    />\r\n                </Div>\r\n\r\n                <Div>\r\n                    <TextField \r\n                        fullWidth \r\n                        error={formik.touched.city && formik.errors.city}\r\n                        size=\"small\"\r\n                        id=\"city\"\r\n                        name=\"city\"\r\n                        type=\"text\"\r\n                        label=\"Cidade\" \r\n                        variant=\"outlined\" \r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.city}\r\n                        disabled\r\n                    />\r\n                    {formik.touched.city && formik.errors.city ? (\r\n                        <div style={{color: 'red'}}>{formik.errors.city}</div>\r\n                    ) : null}\r\n                </Div>\r\n\r\n                <Div>\r\n                    <TextField \r\n                        fullWidth \r\n                        error={formik.touched.state && formik.errors.state}\r\n                        size=\"small\"\r\n                        id=\"state\"\r\n                        name=\"state\"\r\n                        type=\"text\"\r\n                        label=\"Estado\" \r\n                        variant=\"outlined\" \r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.state}\r\n                        disabled\r\n                    />\r\n                    {formik.touched.state && formik.errors.state ? (\r\n                        <div style={{color: 'red'}}>{formik.errors.state}</div>\r\n                    ) : null}\r\n                </Div>\r\n\r\n                <Button fullWidth variant=\"contained\" style={{marginBottom: '1rem'}} onClick={formik.handleSubmit}>\r\n                    Atualizar\r\n                </Button>\r\n            </Form>  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormEndereco","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\FormPaciente\\UpdatePatientForm.js",["360"],"import React, { useState } from 'react'\r\nimport {TextField, Button, Snackbar, IconButton, Alert} from '@mui/material';\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from 'yup';\r\n\r\nimport api from '../../services/api'\r\n\r\nimport {\r\n    Form,\r\n    Div,\r\n} from '../../styles/Cadastro/Cadastro'\r\n\r\nfunction UpdatePatientForm({toggleModal, height, weight, medicine, disease, allergies, addiction}){\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            height: height, \r\n            weight: weight, \r\n            allergies: allergies, \r\n            disease: disease, \r\n            addiction: addiction, \r\n            medicine: medicine, \r\n        },  \r\n        validationSchema: yup.object({\r\n            height: yup\r\n                .string(),\r\n            weight: yup\r\n                .string(),\r\n            medicine: yup\r\n                .string(),\r\n            disease: yup\r\n                .string(),\r\n            allergies: yup\r\n                .string(),\r\n            addiction: yup\r\n                .string(),\r\n        }),\r\n        onSubmit: (values) => {\r\n            update(values)\r\n        }\r\n    });\r\n\r\n    async function update({height, weight, allergies, disease, addiction, medicine}){       \r\n        await api.put(\"/paciente\", {\r\n            altura: height, \r\n            peso: weight, \r\n            alergia: allergies,\r\n            doenca_cronica: disease,\r\n            vicio: addiction,\r\n            medicamento: medicine\r\n        });\r\n        handleClick()\r\n        setTimeout(() => {\r\n            toggleModal()\r\n        }, 3000)\r\n    }\r\n\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n    };\t\r\n    \r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n    \r\n\r\n    return(\r\n        <>\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"success\" onClose={handleClose} sx={{ width: '100%' }}>Dados Atualizados.</Alert>\r\n            </Snackbar>\r\n            <Form style={{width: '70vw'}} onSubmit={formik.handleSubmit} xs={12}>\r\n                <h3 style={{margin: 0, marginBottom: '1rem'}} align=\"center\">Editar Dados do Paciente</h3>\r\n                <Div>\r\n                    <TextField  \r\n                        fullWidth\r\n                        error={formik.touched.height && formik.errors.height}\r\n                        size=\"small\"\r\n                        id=\"height\"\r\n                        name=\"height\"\r\n                        type=\"text\"\r\n                        label=\"Altura\" \r\n                        variant=\"outlined\" \r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.height}\r\n                    /> \r\n                    {formik.touched.height && formik.errors.height ? (\r\n                        <div style={{color: 'red'}}>{formik.errors.height}</div>\r\n                    ) : null}\r\n                </Div>\r\n\r\n                <Div>\r\n                    <TextField  \r\n                        fullWidth\r\n                        error={formik.touched.weight && formik.errors.weight}\r\n                        size=\"small\"\r\n                        id=\"weight\"\r\n                        name=\"weight\"\r\n                        type=\"text\"\r\n                        label=\"Peso\" \r\n                        variant=\"outlined\" \r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.weight}\r\n                    />\r\n                    {formik.touched.weight && formik.errors.weight ? (\r\n                        <div style={{color: 'red'}}>{formik.errors.weight}</div>\r\n                    ) : null}\r\n                </Div>\r\n\r\n                <Div style={{flexDirection: 'column'}}>\r\n                    <TextField \r\n                        fullWidth \r\n                        size=\"small\"\r\n                        id=\"medicine\"\r\n                        name=\"medicine\"\r\n                        type=\"text\"\r\n                        label=\"Medicamento(s)\" \r\n                        variant=\"outlined\" \r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.medicine}\r\n                    />\r\n                </Div>\r\n\r\n                <Div style={{flexDirection: 'column'}}>\r\n                    <TextField \r\n                        fullWidth \r\n                        size=\"small\"\r\n                        id=\"disease\"\r\n                        name=\"disease\"\r\n                        type=\"text\"\r\n                        label=\"Doença(s) Crônicas \" \r\n                        variant=\"outlined\" \r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.disease}/>\r\n                </Div>\r\n\r\n                <Div>\r\n                    <TextField \r\n                        fullWidth \r\n                        size=\"small\"\r\n                        id=\"allergies\"\r\n                        name=\"allergies\"\r\n                        type=\"text\"\r\n                        label=\"Alergia(s)\" \r\n                        variant=\"outlined\" \r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.allergies}\r\n                    />\r\n                </Div>\r\n\r\n                <Div>\r\n                    <TextField \r\n                        fullWidth \r\n                        size=\"small\"\r\n                        id=\"addiction\"\r\n                        name=\"addiction\"\r\n                        type=\"text\"\r\n                        label=\"Vicio(s)\" \r\n                        variant=\"outlined\" \r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.addiction}\r\n                    />\r\n                </Div>\r\n                            \r\n                <Button fullWidth variant=\"contained\" style={{marginBottom: '1rem'}} onClick={formik.handleSubmit}>\r\n                    Atualizar\r\n                </Button>\r\n            </Form>  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default UpdatePatientForm","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\FormDadosPessoais\\UpdateUserForm.js",["361"],"import React, { useState } from 'react'\r\nimport {TextField, Button, Select, MenuItem, InputLabel, FormControl, Snackbar, IconButton, Alert } from '@mui/material';\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from 'yup';\r\n\r\nimport api from '../../services/api'\r\n\r\nimport {\r\n    Form,\r\n    Div,\r\n} from '../../styles/Cadastro/Cadastro'\r\n\r\nfunction UpdateUserForm({toggleModal, name, gender, telephone, email}){\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n        name: name,\r\n        gender: gender,\r\n        telephone: telephone,\r\n        email: email,\r\n        },\r\n        validationSchema: yup.object({\r\n        name: yup\r\n            .string()\r\n            .required(\"O campo é obrigatório.\"),\r\n        gender: yup\r\n            .string()\r\n            .required(\"O campo é obrigatório.\"),\r\n        telephone: yup\r\n            .string()\r\n            .required(\"O campo é obrigatório.\"),\r\n        email: yup\r\n            .string()\r\n            .email(\"E-mail inválido.\")\r\n            .required(\"O campo é obrigatório.\"),\r\n        }),\r\n        onSubmit: (values) => {\r\n            update(values)\r\n        }\r\n    });\r\n\r\n    async function update({name, gender, telephone, email}){       \r\n        await api.put(\"/usuario/updateDadosPessoais\", {\r\n            nome: name, \r\n            genero: gender, \r\n            telefone: telephone, \r\n            email\r\n        });\r\n        handleClick()\r\n        setTimeout(() => {\r\n            toggleModal()\r\n        }, 3000)\r\n    }\r\n\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n    };\t\r\n    \r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    return(\r\n        <>\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"success\" onClose={handleClose} sx={{ width: '100%' }}>Dados Atualizados.</Alert>\r\n            </Snackbar>\r\n            \r\n            <Form style={{width: '70vw'}} onSubmit={formik.handleSubmit} xs={12}>\r\n                <h3 style={{margin: 0, marginBottom: '1rem'}} align=\"center\">Editar Dados Pessoais</h3>\r\n                <Div style={{flexDirection: 'column'}}>\r\n                    <TextField \r\n                        fullWidth \r\n                        error={formik.touched.name && formik.errors.name}\r\n                        size=\"small\"\r\n                        id=\"name\"\r\n                        name=\"name\"\r\n                        type=\"text\"\r\n                        label=\"Nome\" \r\n                        variant=\"outlined\" \r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.name}\r\n                    />\r\n                    {formik.touched.name && formik.errors.name ? (\r\n                        <div style={{color: 'red'}}>{formik.errors.name}</div>\r\n                    ) : null}\r\n                </Div>\r\n\r\n                <Div>\r\n                    <FormControl variant=\"outlined\" fullWidth> \r\n                        <InputLabel size=\"small\">Gênero</InputLabel>\r\n                            <Select\r\n                                size=\"small\"\r\n                                labelId=\"genero\"\r\n                                id=\"gender\"\r\n                                name=\"gender\"\r\n                                label=\"Genero\"\r\n                                error={formik.touched.gender && formik.errors.gender}\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.gender} \r\n                            >\r\n                                <MenuItem value=\"H\">Homem</MenuItem>\r\n                                <MenuItem value=\"M\">Mulher</MenuItem>\r\n                                <MenuItem value=\"O\">Outro</MenuItem>\r\n                            </Select>\r\n                    </FormControl>\r\n                    {formik.touched.gender && formik.errors.gender ? (\r\n                        <div style={{color: 'red'}}>{formik.errors.gender}</div>\r\n                    ) : null}\r\n                </Div>\r\n\r\n                <Div>\r\n                    <TextField \r\n                        fullWidth\r\n                        error={formik.touched.telephone && formik.errors.telephone}\r\n                        size=\"small\"\r\n                        id=\"telephone\"\r\n                        name=\"telephone\"\r\n                        type=\"text\"\r\n                        label=\"Telefone\" \r\n                        variant=\"outlined\" \r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.telephone}\r\n                    />\r\n                    {formik.touched.telephone && formik.errors.telephone ? (\r\n                        <div style={{color: 'red'}}>{formik.errors.telephone}</div>\r\n                    ) : null}\r\n                </Div>\r\n\r\n                <Div style={{flexDirection: 'column'}}>\r\n                    <TextField \r\n                        fullWidth \r\n                        error={formik.touched.email && formik.errors.email}\r\n                        size=\"small\"\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        label=\"E-mail\" \r\n                        variant=\"outlined\" \r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.email}\r\n                    />\r\n                    {formik.touched.email && formik.errors.email ? (\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                    ) : null}\r\n                </Div>\r\n            \r\n                <Button fullWidth variant=\"contained\" style={{marginBottom: '1rem'}} onClick={formik.handleSubmit}>\r\n                    Atualizar\r\n                </Button>\r\n            </Form>  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default UpdateUserForm","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\styles\\Cadastro\\index.js",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\styles\\Login\\index.js",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\ReactBigCalendar\\index.js",["362","363"],"import React, { useState, useMemo, useEffect } from \"react\";\r\nimport ReactDOM from 'react-dom'\r\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\r\nimport moment from \"moment\";\r\nimport 'moment/locale/pt-br';\r\n// import events from \"./events\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport api from '../../services/api'\r\nimport CardConsulta from '../CardConsulta'\r\n\r\nmoment.locale('pt-br');\r\nconst localizer = momentLocalizer(moment);\r\n\r\nexport default function ReactBigCalendar() {\r\n  const [eventsData, setEventsData] = useState([]);\r\n  const [appointments, setAppointments] = useState([])\r\n\r\n  useEffect(() => {\r\n      getAppointments()\r\n  },[])\r\n\r\n  async function getAppointments(){\r\n    const response = await api.get(`/consultas/getMyAppointments/all`)\r\n    setAppointments(response.data)\r\n    const items = response.data\r\n    const aux = []\r\n    items.map(item => {\r\n      aux.push({\r\n        id: item.id,\r\n        id_especialidade: item.id_especialidade,\r\n        id_medico: item.id_medico,\r\n        id_paciente: item.id_paciente,\r\n        status: item.status,\r\n        dt_hr_consulta: item.dt_hr_consulta,\r\n        url_consulta: item.url_consulta,\r\n        start: moment(`${item.dt_hr_consulta}`)._d ,\r\n        end: moment(`${item.dt_hr_consulta}`).add(1, 'h')._d,\r\n        title: `Consulta ${item.nome}`\r\n      })\r\n    })\r\n    setEventsData(aux)\r\n  }\r\n\r\n  setInterval(getAppointments, 60000)\r\n\r\n  const { defaultDate, formats } = useMemo(\r\n    () => ({\r\n      defaultDate: new Date(),\r\n      formats: {\r\n        weekdayFormat: (date, culture, localizer) =>\r\n        localizer.format(date, 'dddd', culture),\r\n      },\r\n    }),\r\n    []\r\n  )\r\n\r\n  function openModal(e){\r\n    ReactDOM.render(\r\n      <React.StrictMode>\r\n        <div>\r\n          <CardConsulta id_consulta={e.id} id_especialidade={e.id_especialidade} id_medico={e.id_medico} id_paciente={e.id_paciente} status={e.status} data={e.dt_hr_consulta} url_consulta={e.url_consulta} />\r\n        </div>\r\n      </React.StrictMode>\r\n    )\r\n  }\r\n\r\n  // const handleSelect = ({ start, end }) => {\r\n  //   const title = window.prompt(\"New Event name\");\r\n  //   if (title)\r\n  //     setEventsData([\r\n  //       ...eventsData,\r\n  //       {\r\n  //         start,\r\n  //         end,\r\n  //         title\r\n  //       }\r\n  //     ]);\r\n  // };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Calendar\r\n        views={[\"day\", \"agenda\", \"work_week\", \"month\"]}\r\n        selectable\r\n        localizer={localizer}\r\n        defaultDate={defaultDate}\r\n        defaultView=\"month\"\r\n        events={eventsData}\r\n        formats={formats}\r\n        style={{ height: \"70vh\", width: \"100%\" }}\r\n        onSelectEvent={(event) => openModal(event)}\r\n        // onSelectSlot={handleSelect}\r\n      />\r\n\r\n\r\n      {/* CardConsulta({id_consulta, id_especialidade, id_medico, id_paciente, status, data, url_consulta}) */}\r\n      {/* <CardConsulta \r\n        style={{minWidth: '200px'}}\r\n        key={appointment.id} \r\n        id_consulta={appointment.id} \r\n        status={appointment.status} \r\n        id_especialidade={appointment.id_especialidade} \r\n        id_medico={appointment.id_medico} \r\n        id_paciente={appointment.id_paciente} \r\n        data={appointment.dt_hr_consulta}\r\n        url_consulta={appointment.url_consulta}\r\n      /> */}\r\n    </div>\r\n  );\r\n}","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\DoctorsAppointmentHistory\\index.js",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\PatientsAppointmentHistory\\index.js",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\CardConsulta\\index.js",["364","365","366","367","368","369"],"import React, { useState, useEffect } from 'react'\r\nimport {Box, Card, CardActions, CardContent, CardMedia, Button, Typography, Modal, Snackbar, IconButton, Alert } from '@mui/material'\r\nimport { BorderColor, Delete } from '@mui/icons-material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport dayjs from 'dayjs'\r\n\r\nimport api from '../../services/api'\r\nimport Prontuario from '../Prontuario'\r\nimport FormProntuario from '../Prontuario/FormProntuario'\r\n\r\nconst style = {\r\n    position: 'absolute',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-end',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: '95vw',\r\n    bgcolor: 'background.paper',\r\n    boxShadow: 24,\r\n    p: 4,\r\n};\r\n  \r\nfunction CardConsulta({id_consulta, id_especialidade, id_medico, id_paciente, status, data, url_consulta}){\r\n    let navigate = useNavigate()\r\n    const [paciente, setPaciente] = useState([])\r\n    const [medico, setMedico] = useState([])\r\n    const [especialidade, setEspecialidade] = useState([])\r\n    const [typeUser, setTypeUser] = useState('')\r\n    const [limitTime, setLimitTime] = useState('')\r\n    const [agora, setAgora] = useState('')\r\n    const [formattedDate, setFormattedDate] = useState('')\r\n    const [openConsulta, setOpenConsulta] = useState(false);\r\n    const [openProntuario, setOpenProntuario] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n    const [open1, setOpen1] = useState(false);\r\n\r\n    const handleOpenConsulta = () => setOpenConsulta(true);\r\n    const handleCloseConsulta = () => setOpenConsulta(false);\r\n    const handleOpenProntuario = () => setOpenProntuario(true);\r\n    const handleCloseProntuario = () => setOpenProntuario(false);\r\n  \r\n\r\n    useEffect(() => {\r\n        getDoctor()\r\n        getSpecialtie()\r\n        getType()\r\n        getPaciente()\r\n        limitTimeForChange()\r\n        dateNow()\r\n        formatDateAppointment()\r\n    }, [])\r\n\r\n    async function getPaciente(){\r\n        const result = await api.get(`/paciente/getPaciente/${id_paciente}`)\r\n        setPaciente(result.data)\r\n    }\r\n\r\n    function limitTimeForChange(){\r\n        var limitTimeForChange = dayjs(data).subtract(1, 'hour').format('DD/MM/YYYY HH:mm:ss')\r\n        setLimitTime(limitTimeForChange)\r\n    }\r\n\r\n    function dateNow(){\r\n        setAgora(dayjs().format('DD/MM/YYYY HH:mm:ss'))\r\n    }\r\n\r\n    function formatDateAppointment(){\r\n        setFormattedDate(dayjs(data).format('DD/MM/YYYY HH:mm:ss'))\r\n    }\r\n\r\n    async function getType(){\r\n        const result = await api.get('/usuario/getType')\r\n        setTypeUser(result.data.tipo)\r\n    }\r\n\r\n    async function getDoctor(){\r\n        const result = await api.get(`/medico/getDoctor/${id_medico}`)\r\n        setMedico(result.data)\r\n    }\r\n\r\n    async function getSpecialtie(){\r\n        const result = await api.get(`/medico/getSpecialtie/${id_especialidade}`)\r\n        setEspecialidade(result.data)\r\n    }\r\n\r\n    async function cancelarConsulta(){\r\n        const res = window.confirm('Deseja realmente cancelar a consulta?')\r\n        if (res) {\r\n            await api.put(`/consulta/cancelar/${id_consulta}`)\r\n            handleClick()\r\n            setTimeout(() => {\r\n                window.location.reload()\r\n            }, 3000)\r\n        }\r\n    }\r\n\r\n    async function removerConsulta(id){\r\n        const res = window.confirm('Deseja realmente excluir?')\r\n        if(res){\r\n            try {\r\n                const result = await api.delete(`/admin/consultas/deletar/${id_consulta}`)\r\n                handleClick1()\r\n                window.location.reload()\r\n            } catch(err) {\r\n                console.log(\"ops! ocorreu um erro\" + err)\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClick1 = () => {\r\n        setOpen1(true);\r\n    };\t\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleClose1 = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen1(false);\r\n    };\r\n\r\n    function done(){\r\n        api.put(`/consulta/done/${id_consulta}`)\r\n    }\r\n\r\n    return(\r\n        <Card sx={{ \r\n            maxWidth: 300,\r\n            margin: 3,\r\n        }}>\r\n            <Snackbar\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"success\" onClose={handleClose1} sx={{ width: '100%' }}>Consulta Cancelada.</Alert>\r\n            </Snackbar>\r\n            <Snackbar\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open1}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose1}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"success\" onClose={handleClose1} sx={{ width: '100%' }}>Consulta excluida com sucesso.</Alert>\r\n            </Snackbar>\r\n            <Modal\r\n                open={openConsulta}\r\n                onClose={handleCloseConsulta}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style} style={{padding: '0px 1.5rem 1.5rem 1.5rem'}}>\r\n                    <Button onClick={handleCloseConsulta} color='error' style={{fontSize: '25px', fontWeight: 'bold'}}>X</Button>\r\n                    <div style={{display: 'flex', width: '100%'}}>\r\n                        <div style={{flex: 1}}>\r\n                        <iframe src={`https://meet.jit.si/${url_consulta}`} frameborder=\"0\" width=\"100%\" height=\"500\" allow=\"microphone; camera\"/>\r\n                        </div>\r\n\r\n                        {(typeUser === 'Medico') && (\r\n                            <div>\r\n                                <FormProntuario id_paciente={id_paciente}/>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </Box>\r\n            </Modal>\r\n\r\n            <Modal\r\n                open={openProntuario}\r\n                onClose={handleCloseProntuario}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style} style={{padding: '0px 1.5rem 1.5rem 1.5rem'}}>\r\n                    <Button onClick={handleCloseProntuario} color='error' style={{fontSize: '25px', fontWeight: 'bold'}}>X</Button>\r\n                    <Prontuario idPaciente={id_paciente}/>\r\n                </Box>\r\n            </Modal>\r\n\r\n            <Box\r\n                display='flex'\r\n                flexDirection='column'\r\n                alignContent='center'\r\n                alignItems='center'\r\n            >\r\n                <Typography gutterBottom variant=\"h6\" component=\"div\" alignSelf='center'>\r\n                    <b>Data</b>\r\n                </Typography>\r\n            {status != 'Cancelado' ? \r\n                    <Typography gutterBottom variant=\"p\" component=\"div\">\r\n                        {formattedDate}\r\n                    </Typography>\r\n                :\r\n                    <Typography gutterBottom variant=\"p\" component=\"div\">\r\n                        Cancelada\r\n                    </Typography>\r\n                }\r\n            </Box>\r\n            <CardContent>\r\n                <Typography gutterBottom variant=\"p\" component=\"span\">\r\n                    <b>Status:</b> {status}\r\n                </Typography>\r\n                \r\n                {(typeUser === 'Medico') &&\r\n                    <Typography gutterBottom variant=\"p\" component=\"div\">\r\n                        <b>Paciente:</b> {paciente.nome} \r\n                    </Typography>\r\n                }       \r\n\r\n                {(typeUser === 'Paciente') &&\r\n                   <Typography gutterBottom variant=\"p\" component=\"div\">\r\n                       <b>Médico:</b> {medico.nome} \r\n                    </Typography> \r\n                }    \r\n\r\n                <Typography gutterBottom variant=\"p\" component=\"div\">\r\n                    <b>Especialidade:</b> {especialidade.nome}\r\n                </Typography>\r\n\r\n                        \r\n            </CardContent>\r\n          \r\n            <Box display='flex' alignItems='center' justifyContent='center'>\r\n                <CardActions>\r\n                        {((typeUser === 'Medico' || typeUser === 'Admin') && status === 'Livre') &&\r\n                            <Button size=\"small\" color='secondary' onClick={() => navigate(`/consulta/editar/${id_consulta}`)}>\r\n                                <BorderColor/>\r\n                            </Button>\r\n                        }\r\n                        {(typeUser === 'Admin') && \r\n                                <Button size=\"small\" color='error' onClick={removerConsulta}>\r\n                                    <Delete/>\r\n                                </Button>\r\n                        }\r\n\r\n                        {(typeUser === 'Medico') && (\r\n                            <Button onClick={handleOpenProntuario}>Prontuário</Button>\r\n                        )}\r\n\r\n                        {(status === 'Agendado') && (agora <= limitTime) && (\r\n                            <Button size=\"small\" color='warning' onClick={cancelarConsulta}>Cancelar</Button>\r\n                        )}\r\n\r\n                        {(\r\n                            (status === 'Agendado') \r\n                        && \r\n                            (agora >= dayjs(data).subtract(10, 'minute').format('DD/MM/YYYY HH:mm:ss')) \r\n                        && \r\n                            (agora <= dayjs(data).add(1, 'hour').format('DD/MM/YYYY HH:mm:ss'))\r\n                        ) && (\r\n                            typeUser === \"Paciente\" ? (\r\n                            <Button onClick={() => {handleOpenConsulta(); setTimeout(done, 60000);}}>Acessar Consulta</Button>) : (\r\n                            <Button onClick={handleOpenConsulta}>Acessar Consulta</Button>)\r\n                        )}\r\n                            \r\n\r\n                </CardActions>\r\n            </Box>\r\n            \r\n        </Card>       \r\n    )\r\n}\r\n\r\nexport default CardConsulta","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\Prontuario\\FormProntuario.js",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\Prontuario\\index.js",["370"],"import React, { useState, useEffect } from 'react'\r\nimport Pagination from '@mui/material/Pagination';\r\n\r\nimport api from '../../services/api'\r\nimport Registro from './Registro'\r\n\r\nlet Prontuario = ({idPaciente}) => {\r\n    const [prontuarios, setProntuarios] = useState([])\r\n    const [registro, setRegistro] = useState({})\r\n\r\n    useEffect(() => {\r\n        getProntuario()\r\n        getProntuarioById()\r\n    }, [])\r\n\r\n    \r\n    async function getProntuario(){\r\n        const result = await api.get(`/prontuario/${idPaciente}`)\r\n        setProntuarios(result.data)\r\n\r\n        if(result.data.length > 0){\r\n            setRegistro(result.data[0])\r\n        }else{\r\n            setRegistro(null)\r\n        }\r\n        \r\n    }\r\n\r\n    function getProntuarioById(n){\r\n        if(n){\r\n            setRegistro(prontuarios[n-1])\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div style={{width: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\r\n            <h1 style={{marginTop: '0px'}}>PRONTUARIO</h1><hr/>\r\n\r\n            {(registro) ? (\r\n                <Registro \r\n                    key={registro.id}\r\n                    id_paciente={registro.paciente} \r\n                    id_medico={registro.medico}\r\n                    dt_hr_consulta={registro.dt_hr_consulta} \r\n                    doenca={registro.doenca} \r\n                    motivo_consulta={registro.motivo_consulta} \r\n                    tempo_doente={registro.tempo_doente} \r\n                    sintoma={registro.sintoma} \r\n                    resumo={registro.resumo}\r\n                />\r\n            ) : (\r\n               'Não Há Registros'\r\n            )}\r\n\r\n\r\n            <Pagination count={prontuarios.length} color=\"primary\" onClick={(e) => getProntuarioById(e.target.textContent)}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Prontuario","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\Prontuario\\Registro.js",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\Configuracoes\\FormEndereco.js",["371"],"import React, { useState, useEffect } from 'react'\r\nimport { LocationOn, LooksOne, Add, LocationCity, EmojiTransportation} from '@mui/icons-material'\r\nimport api from '../../services/api'\r\nimport { Box, InputAdornment, Button, Snackbar, IconButton, Alert } from '@mui/material'\r\nimport {DoubleItem, InputItem} from '../../styles/Cadastro'\r\n\r\nfunction UpdateAddressForm() {\r\n    const [cep, setCep] = useState(\"\")\r\n    const [logradouro, setLogradouro] = useState(\"\")\r\n    const [bairro, setBairro] = useState(\"\")\r\n    const [numero, setNumero] = useState(\"\")\r\n    const [complemento, setComplemento] = useState(\"\")\r\n    const [cidade, setCidade] = useState(\"\")\r\n    const [estado, setEstado] = useState(\"\")\r\n    const [open, setOpen] = useState(false);\r\n    const [open1, setOpen1] = useState(false);\r\n    const [open2, setOpen2] = useState(false);\r\n    const [open3, setOpen3] = useState(false);\r\n    const [open4, setOpen4] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getEndereco();\r\n    },[])\r\n\r\n    async function getEndereco(){\r\n        const result = await api.get('/usuario/endereco')       \r\n        setCep(result.data.cep)\r\n        setNumero(result.data.numero)\r\n        setComplemento(result.data.complemento)\r\n        setCidade(result.data.cidade)     \r\n        setEstado(result.data.estado)     \r\n    }\r\n\r\n    function checkCep(e){\r\n        const cepLimpo = cep.replace(/\\D/g, '')\r\n        fetch(`https://viacep.com.br/ws/${cepLimpo}/json/`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setLogradouro(data.logradouro)\r\n                setBairro(data.bairro)\r\n                setCidade(data.localidade)\r\n                setEstado(data.uf)\r\n        })\r\n    }\r\n\r\n    async function atualizarEndereco(){\r\n        if(!cep){\r\n            handleClick()\r\n            return\r\n        }\r\n\r\n        if(!numero){\r\n            handleClick1()\r\n            return\r\n        }\r\n\r\n        if(!cidade){\r\n            handleClick2()\r\n            return\r\n        }\r\n\r\n        if(!estado){\r\n            handleClick3()\r\n            return\r\n        }\r\n    \r\n        handleClick4()\r\n        await api.put('/usuario/endereco', {cep, numero, complemento, cidade, estado})\r\n        setTimeout(() => {\r\n            window.location.reload(false)\r\n        }, 3000)\r\n        \r\n    }\r\n\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n    };\t\r\n    \r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleClick1 = () => {\r\n        setOpen1(true);\r\n    };\t\r\n    \r\n    const handleClose1 = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen1(false);\r\n    };\r\n\r\n    const handleClick2 = () => {\r\n        setOpen2(true);\r\n    };\t\r\n    \r\n    const handleClose2 = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen2(false);\r\n    };\r\n\r\n    const handleClick3 = () => {\r\n        setOpen3(true);\r\n    };\t\r\n    \r\n    const handleClose3 = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen3(false);\r\n    };\r\n\r\n    const handleClick4 = () => {\r\n        setOpen4(true);\r\n    };\t\r\n    \r\n    const handleClose4 = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen4(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"success\" onClose={handleClose} sx={{ width: '100%' }}>Cep é obrigatório.</Alert>\r\n            </Snackbar>\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open1}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose1}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"success\" onClose={handleClose1} sx={{ width: '100%' }}>Número é obrigatório.</Alert>\r\n            </Snackbar>\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open2}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose2}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"success\" onClose={handleClose2} sx={{ width: '100%' }}>Cidade é obrigatório.</Alert>\r\n            </Snackbar>\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open3}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose3}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"success\" onClose={handleClose3} sx={{ width: '100%' }}>Estado é obrigatório.</Alert>\r\n            </Snackbar>\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open4}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose4}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"success\" onClose={handleClose4} sx={{ width: '100%' }}>Endereço Atualizado.</Alert>\r\n            </Snackbar>\r\n            <Box>\r\n                <InputItem\r\n                    style={{ width: 300 }}\r\n                    variant=\"filled\"\r\n                    label=\"Informe seu cep\"\r\n                    value={cep}\r\n                    onChange={e => setCep(e.target.value)}\r\n                    onBlur={checkCep}\r\n                    InputProps={{\r\n                        startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                                <LocationOn />\r\n                            </InputAdornment>),\r\n                    }}\r\n                />\r\n            </Box>\r\n\r\n            <DoubleItem>\r\n                <Box>\r\n                    <InputItem\r\n                        style={{ width: 300 }}\r\n                        variant=\"filled\"\r\n                        label=\"Logradouro\"\r\n                        value={logradouro}\r\n                        disabled={true}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <EmojiTransportation />\r\n                                </InputAdornment>),\r\n                        }}\r\n                    />\r\n                </Box>\r\n\r\n                <Box>\r\n                    <InputItem\r\n                        style={{ width: 300 }}\r\n                        variant=\"filled\"\r\n                        label=\"Número\"\r\n                        value={numero}\r\n                        onChange={e => setNumero(e.target.value)}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <LooksOne />\r\n                                </InputAdornment>),\r\n                    }}\r\n                    />\r\n                </Box>\r\n            </DoubleItem>\r\n            \r\n            <DoubleItem>\r\n                <Box>\r\n                    <InputItem\r\n                        style={{ width: 300 }}\r\n                        variant=\"filled\"\r\n                        label=\"Bairro\"\r\n                        value={bairro}\r\n                        disabled={true}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <EmojiTransportation />\r\n                                </InputAdornment>),\r\n                        }}\r\n                    />\r\n                </Box>\r\n                <Box>\r\n                    <InputItem\r\n                        style={{ width: 300 }}\r\n                        variant=\"filled\"\r\n                        label=\"Complemento\"\r\n                        value={complemento}\r\n                        onChange={e => setComplemento(e.target.value)}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <Add />\r\n                                </InputAdornment>),\r\n                    }}\r\n                    />\r\n                </Box>\r\n            </DoubleItem>\r\n            <DoubleItem>\r\n                <Box>\r\n                    <InputItem\r\n                        style={{ width: 300 }}\r\n                        variant=\"filled\"\r\n                        label=\"Cidade\"\r\n                        value={cidade}\r\n                        disabled={true}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <LocationCity />\r\n                                </InputAdornment>),\r\n                        }}\r\n                    />\r\n                </Box>\r\n                <Box>\r\n                    <InputItem\r\n                        style={{ width: 300 }}\r\n                        variant=\"filled\"\r\n                        label=\"Estado\"\r\n                        value={estado}\r\n                        disabled={true}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <LocationCity />\r\n                                </InputAdornment>),\r\n                        }}\r\n                    />\r\n                </Box>\r\n            </DoubleItem>\r\n            <Button variant=\"contained\" size=\"large\" color=\"success\" sx={{ margin: 1 }} onClick={atualizarEndereco}><h4>ATUALIZAR</h4></Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UpdateAddressForm","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\Configuracoes\\FormPaciente.js",["372"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n    MonitorWeight,Height, PestControl, Coronavirus, SmokingRooms, Medication} from '@mui/icons-material'\r\nimport api from '../../services/api'\r\nimport { Box, InputAdornment, Button, Snackbar, IconButton, Alert } from '@mui/material'\r\nimport {DoubleItem, InputItem} from '../../styles/Cadastro'\r\n\r\nfunction FormPaciente() {\r\n    const [peso, setPeso] = useState(\"\")\r\n    const [altura, setAltura] = useState(\"\")\r\n    const [alergia, setAlergia] = useState(\"\")\r\n    const [doenca, setDoenca] = useState(\"\")\r\n    const [vicio, setVicio] = useState(\"\")\r\n    const [medicamento, setMedicamento] = useState(\"\")\r\n    const [open, setOpen] = useState(false);\r\n    const [open1, setOpen1] = useState(false);\r\n    const [open2, setOpen2] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getPaciente();\r\n    }, [])\r\n\r\n    async function getPaciente() {\r\n        const result = await api.get('/paciente')\r\n        setPeso(result.data.peso)\r\n        setAltura(result.data.altura)\r\n        setAlergia(result.data.alergia)\r\n        setDoenca(result.data.doenca_cronica)\r\n        setVicio(result.data.vicio)\r\n        setMedicamento(result.data.medicamento)\r\n    }\r\n\r\n    async function atualizarPaciente() {\r\n        if (!peso) {\r\n            handleClick()\r\n            return\r\n        }\r\n\r\n        if (!altura) {\r\n            handleClick1()\r\n            return\r\n        }\r\n\r\n        handleClick2()\r\n        await api.put('/paciente', { peso, altura, alergia, doenca_cronica: doenca, vicio, medicamento })\r\n        setTimeout(() => {\r\n            window.location.reload(false)\r\n        }, 3000)\r\n\r\n    }\r\n\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n    };\t\r\n    \r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleClick1 = () => {\r\n        setOpen1(true);\r\n    };\t\r\n    \r\n    const handleClose1 = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen1(false);\r\n    };\r\n\r\n    const handleClick2 = () => {\r\n        setOpen2(true);\r\n    };\t\r\n    \r\n    const handleClose2 = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen2(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"warning\" onClose={handleClose} sx={{ width: '100%' }}>Peso é obrigatório.</Alert>\r\n            </Snackbar>\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open1}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose1}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"warning\" onClose={handleClose1} sx={{ width: '100%' }}>Altura é obrigatório.</Alert>\r\n            </Snackbar>\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open2}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose2}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"success\" onClose={handleClose2} sx={{ width: '100%' }}>Usuario Atualizado.</Alert>\r\n            </Snackbar>\r\n\r\n            <DoubleItem>\r\n                <Box>\r\n                    <InputItem\r\n                        style={{ width: 300 }}\r\n                        variant=\"filled\"\r\n                        label=\"Peso\"\r\n                        value={peso}\r\n                        onChange={e => setPeso(e.target.value)}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <MonitorWeight />\r\n                                </InputAdornment>),\r\n                        }}\r\n                    />\r\n                </Box>\r\n                <Box>\r\n                    <InputItem\r\n                        style={{ width: 300 }}\r\n                        variant=\"filled\"\r\n                        label=\"Altura\"\r\n                        value={altura}\r\n                        onChange={e => setAltura(e.target.value)}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <Height />\r\n                                </InputAdornment>),\r\n                        }}\r\n                    />\r\n                </Box>\r\n            </DoubleItem>\r\n            <DoubleItem>\r\n                <Box>\r\n                    <InputItem\r\n                        style={{ width: 300 }}\r\n                        variant=\"filled\"\r\n                        label=\"Alergia(s)\"\r\n                        value={alergia}\r\n                        onChange={e => setAlergia(e.target.value)}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    < PestControl />\r\n                                </InputAdornment>),\r\n                        }}\r\n                    />\r\n                </Box>\r\n                <Box>\r\n                    <InputItem\r\n                        style={{ width: 300 }}\r\n                        variant=\"filled\"\r\n                        label=\"Doença(s) cronica\"\r\n                        value={doenca}\r\n                        onChange={e => setDoenca(e.target.value)}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <Coronavirus />\r\n                                </InputAdornment>),\r\n                        }}\r\n                    />\r\n                </Box>\r\n            </DoubleItem>\r\n            <DoubleItem>\r\n                <Box>\r\n                    <InputItem\r\n                        style={{ width: 300 }}\r\n                        variant=\"filled\"\r\n                        label=\"Vicio(s)\"\r\n                        value={vicio}\r\n                        onChange={e => setVicio(e.target.value)}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <SmokingRooms />\r\n                                </InputAdornment>),\r\n                        }}\r\n                    />\r\n                </Box>\r\n                <Box>\r\n                    <InputItem\r\n                        style={{ width: 300 }}\r\n                        variant=\"filled\"\r\n                        label=\"Medicamento(s)\"\r\n                        value={medicamento}\r\n                        onChange={e => setMedicamento(e.target.value)}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <Medication />\r\n                                </InputAdornment>),\r\n                        }}\r\n                    />\r\n                </Box>\r\n            </DoubleItem>\r\n            <Button variant=\"contained\" size=\"large\" color=\"success\" sx={{ margin: 1 }} onClick={atualizarPaciente}><h4>ATUALIZAR</h4></Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormPaciente","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\Configuracoes\\FormUsuario.js",["373","374"],"import React, { useState, useEffect } from 'react'\r\nimport { Box, FormControl, InputAdornment, InputLabel, MenuItem, Select, Button, Snackbar, IconButton, Alert } from '@mui/material'\r\nimport {AccountBox, Email, Lock, LocalPhone} from '@mui/icons-material'\r\nimport api from '../../services/api'\r\nimport {DoubleItem, InputItem} from '../../styles/Cadastro'\r\n\r\nfunction FormUsuario() {\r\n    const [nome, setNome] = useState(\"\")\r\n    const [genero, setGenero] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [telefone, setTelefone] = useState(\"\")\r\n    const [senha, setSenha] = useState(\"\")\r\n    const [open, setOpen] = useState(false);\r\n    const [open1, setOpen1] = useState(false);\r\n    const [open2, setOpen2] = useState(false);\r\n    const [open3, setOpen3] = useState(false);\r\n    const [open4, setOpen4] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getUsuario();\r\n    },[])\r\n\r\n    async function getUsuario(){\r\n        const result = await api.get('/usuario')\r\n        setNome(result.data.nome)\r\n        setGenero(result.data.genero)\r\n        setEmail(result.data.email)\r\n        setTelefone(result.data.telefone)     \r\n    }\r\n\r\n    async function atualizarDadosUsuario(){\r\n        if(!nome){\r\n            handleClick()\r\n            return\r\n        }\r\n\r\n        if(!genero){\r\n            handleClick1()\r\n            return\r\n        }\r\n\r\n        if(!email){\r\n            handleClick2()\r\n            return\r\n        }\r\n\r\n        if(!telefone){\r\n            handleClick3()\r\n            return\r\n        }\r\n\r\n        if(senha){\r\n            await api.put('/usuario/editar', {data:{nome, genero, email, telefone, senha}})\r\n        }else{\r\n            await api.put('/usuario/editar', {data:{nome, genero, email, telefone}})\r\n        }\r\n        handleClick3()\r\n        setTimeout(() => {\r\n            window.location.reload(false)\r\n        }, 3000)\r\n        \r\n    }\r\n\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n    };\t\r\n    \r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleClick1 = () => {\r\n        setOpen1(true);\r\n    };\t\r\n    \r\n    const handleClose1 = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen1(false);\r\n    };\r\n\r\n    const handleClick2 = () => {\r\n        setOpen2(true);\r\n    };\t\r\n    \r\n    const handleClose2 = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen2(false);\r\n    };\r\n\r\n    const handleClick3 = () => {\r\n        setOpen3(true);\r\n    };\t\r\n    \r\n    const handleClose3 = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen3(false);\r\n    };\r\n\r\n    const handleClick4 = () => {\r\n        setOpen4(true);\r\n    };\t\r\n    \r\n    const handleClose4 = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen4(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n            open={open}\r\n            autoHideDuration={6000}\r\n            onClose={handleClose}\r\n            style={{width: '40%'}}\r\n        >\r\n            <Alert variant=\"filled\" severity=\"warning\" onClose={handleClose} sx={{ width: '100%' }}>Nome é obrigatório.</Alert>\r\n        </Snackbar>\r\n        <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n            open={open1}\r\n            autoHideDuration={6000}\r\n            onClose={handleClose1}\r\n            style={{width: '40%'}}\r\n        >\r\n            <Alert variant=\"filled\" severity=\"warning\" onClose={handleClose1} sx={{ width: '100%' }}>Genero é obrigatório.</Alert>\r\n        </Snackbar>\r\n        <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n            open={open2}\r\n            autoHideDuration={6000}\r\n            onClose={handleClose2}\r\n            style={{width: '40%'}}\r\n        >\r\n            <Alert variant=\"filled\" severity=\"warning\" onClose={handleClose2} sx={{ width: '100%' }}>E-mail é obrigatório.</Alert>\r\n        </Snackbar>\r\n        <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n            open={open3}\r\n            autoHideDuration={6000}\r\n            onClose={handleClose3}\r\n            style={{width: '40%'}}\r\n        >\r\n            <Alert variant=\"filled\" severity=\"warning\" onClose={handleClose3} sx={{ width: '100%' }}>Telefone é obrigatório.</Alert>\r\n        </Snackbar>\r\n        <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n            open={open4}\r\n            autoHideDuration={6000}\r\n            onClose={handleClose4}\r\n            style={{width: '40%'}}\r\n        >\r\n            <Alert variant=\"filled\" severity=\"success\" onClose={handleClose4} sx={{ width: '100%' }}>Dados Atualizados.</Alert>\r\n        </Snackbar>\r\n\r\n\r\n            <form>\r\n                <DoubleItem>\r\n                    <Box>\r\n                        <InputItem\r\n                            style={{ width: '100%' }}\r\n                            variant=\"filled\"\r\n                            label=\"Nome\"\r\n                            value={nome}\r\n                            onChange={e => setNome(e.target.value)}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <AccountBox />\r\n                                    </InputAdornment>),\r\n                            }}\r\n                        />\r\n                    </Box>\r\n                    <Box>\r\n                        <FormControl variant=\"filled\">\r\n                            <InputLabel>Gênero</InputLabel>\r\n                            <Select\r\n                                style={{ width: 208 }}\r\n                                value={genero}\r\n                                onChange={e => setGenero(e.target.value)}\r\n                            >\r\n                                <MenuItem value=\"H\">Homem</MenuItem>\r\n                                <MenuItem value=\"M\">Mulher</MenuItem>\r\n                                <MenuItem value=\"O\">Outro</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Box>\r\n                </DoubleItem>\r\n                <DoubleItem>\r\n                    <Box>\r\n                        <InputItem\r\n                            style={{ width: '100%' }}\r\n                            type=\"tel\"\r\n                            variant=\"filled\"\r\n                            label=\"Telefone\"\r\n                            value={telefone}\r\n                            onChange={e => setTelefone(e.target.value)}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <LocalPhone />\r\n                                    </InputAdornment>),\r\n                            }}\r\n                        />\r\n                    </Box>\r\n                    <Box>\r\n                        <InputItem\r\n                            style={{ width: '100%' }}\r\n                            type=\"email\"\r\n                            variant=\"filled\"\r\n                            label=\"E-mail\"\r\n                            value={email}\r\n                            onChange={e => setEmail(e.target.value)}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <Email />\r\n                                    </InputAdornment>),\r\n                            }}\r\n                        />\r\n                    </Box>\r\n                </DoubleItem>\r\n\r\n                <DoubleItem>\r\n                    <Box>\r\n                        <InputItem\r\n                            style={{ width: '100%' }}\r\n                            type=\"password\"\r\n                            variant=\"filled\"\r\n                            label=\"Senha\"\r\n                            onChange={e => setSenha(e.target.value)}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <Lock />\r\n                                    </InputAdornment>),\r\n                            }}\r\n                        />\r\n                    </Box>\r\n                    \r\n                </DoubleItem>\r\n                <Button variant=\"contained\" size=\"large\" color=\"success\" sx={{ margin: 1 }} onClick={atualizarDadosUsuario}><h4>ATUALIZAR</h4></Button>\r\n\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormUsuario","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Cadastro\\UnstyledTabsCustomized.js",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\FormPaciente\\CreatePatientForm.js",["375"],"import React, { useState } from 'react'\r\nimport {TextField, Button, Snackbar, IconButton, Alert} from '@mui/material';\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from 'yup';\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nimport api from '../../services/api'\r\n\r\nimport {\r\n    Form,\r\n    Div,\r\n} from '../../styles/Cadastro/Cadastro'\r\n\r\nfunction CreatePatientForm({userId}){\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const navigate = useNavigate()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            height: \"\", \r\n            weight: \"\", \r\n            allergies: \"\", \r\n            disease: \"\", \r\n            addiction: \"\", \r\n            medicine: \"\", \r\n        },  \r\n        validationSchema: yup.object({\r\n            height: yup\r\n                .string()\r\n                .required(\"O campo é obrigatório.\"),\r\n            weight: yup\r\n                .string()\r\n                .required(\"O campo é obrigatório.\"),\r\n            medicine: yup\r\n                .string(),\r\n            disease: yup\r\n                .string(),\r\n            allergies: yup\r\n                .string(),\r\n            addiction: yup\r\n                .string(),\r\n        }),\r\n        onSubmit: (values) => {\r\n            create(values)\r\n        }\r\n    });\r\n\r\n    async function create({height, weight, allergies, disease, addiction, medicine}){       \r\n        await api.post(\"/paciente\", {\r\n            id_usuario: userId,\r\n            peso: weight, \r\n            altura: height, \r\n            alergia: allergies,\r\n            doenca_cronica: disease,\r\n            vicio: addiction,\r\n            medicamento: medicine\r\n        });\r\n        handleClick()\r\n        setTimeout(() => {\r\n            navigate('/')\r\n        }, 3000)\r\n    }\r\n\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n    };\t\r\n    \r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    return(\r\n        <>\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"success\" onClose={handleClose} sx={{ width: '100%' }}>Cadastro Concluido.</Alert>\r\n            </Snackbar>\r\n            <Form onSubmit={formik.handleSubmit} xs={12}>\r\n                <h3 style={{margin: 0, marginBottom: '1rem'}}>Dados do Paciente</h3>\r\n                \r\n                <div style={{display: 'flex', flexWrap: 'wrap'}}>\r\n                    <Div style={{flex: 1, minWidth: '200px', flexDirection: 'column'}}>\r\n                        <TextField  \r\n                            fullWidth\r\n                            error={formik.touched.height && formik.errors.height}\r\n                            size=\"small\"\r\n                            id=\"height\"\r\n                            name=\"height\"\r\n                            type=\"text\"\r\n                            label=\"Altura\" \r\n                            variant=\"outlined\" \r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.height}\r\n                        /> \r\n                        {formik.touched.height && formik.errors.height ? (\r\n                            <div style={{color: 'red'}}>{formik.errors.height}</div>\r\n                        ) : null}\r\n                    </Div>\r\n\r\n                    <Div style={{flex: 1, minWidth: '200px', flexDirection: 'column'}}>\r\n                        <TextField  \r\n                            fullWidth\r\n                            error={formik.touched.weight && formik.errors.weight}\r\n                            size=\"small\"\r\n                            id=\"weight\"\r\n                            name=\"weight\"\r\n                            type=\"text\"\r\n                            label=\"Peso\" \r\n                            variant=\"outlined\" \r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.weight}\r\n                        />\r\n                        {formik.touched.weight && formik.errors.weight ? (\r\n                            <div style={{color: 'red'}}>{formik.errors.weight}</div>\r\n                        ) : null}\r\n                    </Div>\r\n                </div>\r\n\r\n                <Div style={{flexDirection: 'column'}}>\r\n                    <TextField \r\n                        fullWidth \r\n                        size=\"small\"\r\n                        id=\"medicine\"\r\n                        name=\"medicine\"\r\n                        type=\"text\"\r\n                        label=\"Medicamento(s)\" \r\n                        variant=\"outlined\" \r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.medicine}\r\n                    />\r\n                </Div>\r\n\r\n                <Div style={{flexDirection: 'column'}}>\r\n                    <TextField \r\n                        fullWidth \r\n                        size=\"small\"\r\n                        id=\"disease\"\r\n                        name=\"disease\"\r\n                        type=\"text\"\r\n                        label=\"Doença(s) Crônicas \" \r\n                        variant=\"outlined\" \r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.disease}/>\r\n                </Div>\r\n\r\n                <Div>\r\n                    <TextField \r\n                        fullWidth \r\n                        size=\"small\"\r\n                        id=\"allergies\"\r\n                        name=\"allergies\"\r\n                        type=\"text\"\r\n                        label=\"Alergia(s)\" \r\n                        variant=\"outlined\" \r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.allergies}\r\n                    />\r\n                </Div>\r\n\r\n                <Div>\r\n                    <TextField \r\n                        fullWidth \r\n                        size=\"small\"\r\n                        id=\"addiction\"\r\n                        name=\"addiction\"\r\n                        type=\"text\"\r\n                        label=\"Vicio(s)\" \r\n                        variant=\"outlined\" \r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.addiction}\r\n                    />\r\n                </Div>\r\n                            \r\n                <Button fullWidth variant=\"contained\" style={{marginBottom: '1rem'}} onClick={formik.handleSubmit}>\r\n                    Criar\r\n                </Button>\r\n            </Form>  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreatePatientForm","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\FormDadosPessoais\\CreateUserForm.js",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\FormEndereco\\CreateAddressForm.js",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\styles\\Login\\Login.js",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\styles\\Configuracoes\\index.js",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\styles\\UsuariosListagem\\index.js",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\FormMedico\\index.js",["376","377"],"import {useEffect, useState} from 'react'\r\nimport {TextField, Button, Autocomplete, Snackbar, IconButton, Alert } from '@mui/material';\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nimport api from '../../services/api'\r\n\r\nimport {Form, Div} from '../../styles/Cadastro/Cadastro'\r\n\r\nfunction FormMedico({userId}){\r\n    const [specialties, setSpecialties] = useState([])\r\n    const [crm, setCrm] = useState(\"\")\r\n    const [selectedSpecialties, setSelectedSpecialties] = useState([])\r\n    const [open, setOpen] = useState(false);\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        getAllSpecialties()\r\n    }, [])\r\n\r\n    async function getAllSpecialties(){\r\n        const result = await api.get('/medico/especialidades')\r\n        setSpecialties(result.data)      \r\n    }\r\n\r\n    function onSpecialtyChange(object, value){\r\n        let aux = value\r\n        let selected = []\r\n        aux.map((item) => {\r\n            selected.push(item.id)\r\n        })\r\n        setSelectedSpecialties(selected);\r\n    }\r\n\r\n    function verifyCrmInput(){\r\n        if(crm.length === 0){\r\n            document.querySelector('#crmError').style.display = \"block\";\r\n            return false\r\n        }else{\r\n            document.querySelector('#crmError').style.display = \"none\";\r\n            return true\r\n        }\r\n    }\r\n\r\n    function verifySpecialtiesInput(){\r\n        if(selectedSpecialties.length === 0){\r\n            document.querySelector('#specialtiesError').style.display = \"block\";\r\n            return false\r\n        }else{\r\n            document.querySelector('#specialtiesError').style.display = \"none\";\r\n            return true\r\n        }\r\n    }  \r\n\r\n    function submit(){\r\n        verifyCrmInput()\r\n        verifySpecialtiesInput()\r\n        if(verifyCrmInput() && verifySpecialtiesInput()){\r\n            create()\r\n        }\r\n    }\r\n\r\n    async function create(){  \r\n        await api.post(\"/medico/createDoctor\", {id_usuario: userId, crm});\r\n\r\n        selectedSpecialties.map(async function(specialty){\r\n            await api.post(\"/medico/createDoctorSpecialty\", {id_medico: userId, id_especialidade: specialty})\r\n        })\r\n\r\n        handleClick();\r\n        setTimeout(() => {\r\n            navigate('/')\r\n        }, 3000)\r\n    }\r\n\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n    };\t\r\n    \r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    return(\r\n        <>\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"success\" onClose={handleClose} sx={{ width: '100%' }}>Cadastro Concluido.</Alert>\r\n            </Snackbar>\r\n            <Form xs={12}>\r\n                <h3 style={{margin: 0, marginBottom: '1rem'}}>Dados do Médico</h3>\r\n                    <Div style={{flex: 1, minWidth: '200px', flexDirection: 'column'}}>\r\n                        <TextField  \r\n                            fullWidth\r\n                            size=\"small\"\r\n                            id=\"crm\"\r\n                            name=\"crm\"\r\n                            type=\"text\"\r\n                            label=\"CRM\" \r\n                            variant=\"outlined\" \r\n                            onChange={e => setCrm(e.target.value)}\r\n                            onBlur={verifyCrmInput}\r\n                        /> \r\n                        <p id=\"crmError\" style={{color: 'red', margin: 0, marginTop: 10, display: 'none'}}>O Campo é Obrigatório.</p>\r\n                    </Div>\r\n\r\n                    <Div style={{flex: 1, minWidth: '200px', flexDirection: 'column'}}>\r\n                        <Autocomplete\r\n                            fullWidth\r\n                            multiple\r\n                            size=\"small\"\r\n                            id=\"especialidades\"\r\n                            name=\"especialidades\"\r\n                            onChange={onSpecialtyChange}\r\n                            onBlur={verifySpecialtiesInput}\r\n                            options={specialties}\r\n                            getOptionLabel={(option) => option.nome}\r\n                            filterSelectedOptions\r\n                            renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                label=\"Especialidades\"\r\n                                placeholder=\"Escolha uma ou mais especialidades\"\r\n                            />\r\n                            )}\r\n                        />\r\n                        <p id=\"specialtiesError\" style={{color: 'red', margin: 0, marginTop: 10, display: 'none'}}>Selecione um ou mais especialidades.</p>\r\n                    </Div>\r\n\r\n                <Button fullWidth variant=\"contained\" style={{marginBottom: '1rem'}} onClick={submit}>\r\n                    Criar\r\n                </Button>\r\n            </Form>  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormMedico","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\pages\\Configuracoes\\DisponibilidadeMedica.jsx",["378","379","380","381","382","383","384","385","386","387","388","389","390"],"import {useState, useEffect} from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { Button, Typography, Select, MenuItem, InputLabel, FormControl, FormGroup, FormControlLabel, Checkbox, Snackbar, IconButton, Alert } from '@mui/material';\r\nimport { api } from '../../services/api'\r\nimport NavBar from '../../components/NavBar'\r\nimport BaseLayout from '../../layouts/BaseLayout'\r\nimport styles from './DisponibilidadeMedica.module.css'\r\n\r\nimport {\r\n    Div,\r\n  } from '../../styles/Cadastro/Cadastro'\r\nimport { ConstructionOutlined } from '@mui/icons-material';\r\n\r\nlet DisponibilidadeMedica = () => {\r\n    let navigate = useNavigate()\r\n    const [diasSelecionados, setDiasSelecionados] = useState([])\r\n    const [diasDaSemana, setDiasDaSemana] = useState([])\r\n    const [inicioExpediente, setInicioExpediente] = useState(\"\")\r\n    const [terminoExpediente, setTerminoExpediente] = useState(\"\")\r\n    const [inicioAlmoco, setInicioAlmoco] = useState(\"\")\r\n    const [terminoAlmoco, setTerminoAlmoco] = useState(\"\")\r\n    const [disponibilidade, setDisponibilidade] = useState([])\r\n    const [open, setOpen] = useState(false);\r\n    const horas = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23']\r\n    // const horas = ['00:00', '01:00', '02:00', '03:00']\r\n\r\n    useEffect(() => {\r\n        getDisponibilidadeMedica()\r\n        getDiasDaSemana()\r\n    }, [])\r\n\r\n    async function getDiasDaSemana(){\r\n        const result = await api.get('/getDiasDaSemana')\r\n        setDiasDaSemana(result.data)\r\n    }\r\n    async function getDisponibilidadeMedica(){\r\n        const result = await api.get(\"/getDisponibilidadeMedica\")\r\n\r\n        if(result.data.length > 0){\r\n            setDisponibilidade(result.data)\r\n\r\n            let aux = []\r\n        \r\n            result.data.forEach((item) => {\r\n                if(!aux.includes(item.dia)){\r\n                    aux.push(item.dia)\r\n                    aux.sort()\r\n                }\r\n            })\r\n\r\n            aux.forEach((item) => {\r\n                document.querySelectorAll('.checkbox')[item].checked = true\r\n            })\r\n\r\n            setInicioExpediente(result.data[0].horas)\r\n            setTerminoExpediente(parseInt(result.data[result.data.length - 1].horas) + 1)\r\n\r\n            let auxAlmoco = []\r\n            result.data.map(item => {\r\n                if(!auxAlmoco.includes(item.horas)){\r\n                    auxAlmoco.push(item.horas)\r\n                }\r\n            })            \r\n\r\n            let hrAnterior\r\n\r\n            for (let i = 0; i < auxAlmoco.length; i++) {\r\n                let hrMenosUm = auxAlmoco[i]\r\n                hrMenosUm = parseInt(hrMenosUm) - 1\r\n\r\n                if(hrMenosUm < 10){\r\n                    hrMenosUm = String(hrMenosUm)\r\n                    hrMenosUm = '0' + hrMenosUm\r\n                }\r\n\r\n                if(i == 0){\r\n                    hrAnterior = hrMenosUm\r\n                }\r\n\r\n                if(String(hrAnterior) !== String(hrMenosUm)){\r\n                    setInicioAlmoco(hrMenosUm)\r\n                    setTerminoAlmoco(auxAlmoco[i])\r\n                }\r\n\r\n                hrAnterior = auxAlmoco[i]\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    async function enviar(e){\r\n        e.preventDefault();\r\n\r\n        if(disponibilidade.length > 0){\r\n            await api.delete(\"/definirDisponibilidadeMedica\")\r\n        }\r\n\r\n        let checkBoxes = document.querySelectorAll('.checkbox')\r\n        let selecionados = []\r\n\r\n        checkBoxes.forEach((el) => {\r\n            if(el.checked){\r\n                selecionados.push(el.value)\r\n            }\r\n        })\r\n\r\n        setDiasSelecionados(selecionados)\r\n\r\n        let dias_selecionados = diasSelecionados.toString()\r\n        \r\n        let termino = parseInt(terminoExpediente)\r\n        let inicioAlmo = parseInt(inicioAlmoco)\r\n        \r\n\r\n\r\n        selecionados.map(async function inserir(selecionado){\r\n            let inicio = parseInt(inicioExpediente)\r\n            let intervalo = termino - inicio\r\n\r\n            for (let i = 0; i < intervalo; i++) {\r\n                if(inicio !== inicioAlmo){\r\n                    if(inicio < 10){\r\n                        inicio = String(inicio)\r\n                        inicio = '0' + inicio\r\n                    }\r\n                    await api.post(\"/definirDisponibilidadeMedica\", { horas: inicio, dia_selecionado: selecionado })\r\n                }\r\n                inicio++\r\n            }      \r\n        })\r\n\r\n        handleClick()\r\n        setTimeout(() => {\r\n            navigate('/inicio')\r\n        }, 3000)        \r\n    }\r\n\r\n    function verificarDiasSelecionados(){\r\n        let checkBoxes = document.querySelectorAll('.checkbox')\r\n        let dias_selecionados = []\r\n\r\n        checkBoxes.forEach((el) => {\r\n            if(el.checked){\r\n                dias_selecionados.push(el.value)\r\n            }\r\n        })\r\n\r\n        setDiasSelecionados(dias_selecionados)\r\n    }\r\n\r\n    function setAlmoco(hora){\r\n        setInicioAlmoco(hora)\r\n        setTerminoAlmoco(parseInt(hora)+1)\r\n    }\r\n\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n    };\t\r\n    \r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    return(\r\n        <NavBar>  \r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={open}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose}\r\n                style={{width: '40%'}}\r\n            >\r\n                <Alert variant=\"filled\" severity=\"success\" onClose={handleClose} sx={{ width: '100%' }}>Disponibilidade Definida com Sucesso.</Alert>\r\n            </Snackbar>  \r\n            <BaseLayout title='Configurações'>\r\n                {/* <div className={styles.container}> */}\r\n                    <form onSubmit={enviar} style={{width: '100%'}}>\r\n\r\n                    {/* <FormGroup aria-label=\"position\" row style={{justifyContent: 'space-between'}}>\r\n                        {diasDaSemana.map(dia => (\r\n                            <FormControlLabel control={<Checkbox />} label={dia.titulo} labelPlacement=\"bottom\"/>\r\n                        ))} \r\n\r\n                    </FormGroup> */}\r\n\r\n                        <div style={{display: 'flex', flexWrap: 'wrap', justifyContent: 'space-between'}}>\r\n                            <div className={styles.dia} style={{display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '1rem'}}>\r\n                                <input type=\"checkbox\" className=\"checkbox\" id=\"domingo\" name=\"domingo\" value=\"0\" style={{width: '18px', height: '18px'}}/>\r\n                                <label htmlFor=\"domingo\"> Domingo</label>\r\n                            </div>\r\n                            <div className={styles.dia} style={{display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '1rem'}}>\r\n                                <input type=\"checkbox\" className=\"checkbox\" id=\"segunda\" name=\"segunda\" value=\"1\" style={{width: '18px', height: '18px'}} />\r\n                                <label htmlFor=\"segunda\"> Segunda-Feira</label>\r\n                            </div>\r\n                            <div className={styles.dia} style={{display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '1rem'}}>\r\n                                <input type=\"checkbox\" className=\"checkbox\"id=\"terca\" name=\"terca\" value=\"2\" style={{width: '18px', height: '18px'}} />\r\n                                <label htmlFor=\"terca\"> Terça-Feira</label>\r\n                            </div>\r\n                            <div className={styles.dia} style={{display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '1rem'}}>\r\n                                <input type=\"checkbox\" className=\"checkbox\" id=\"quarta\" name=\"quarta\" value=\"3\" style={{width: '18px', height: '18px'}} />\r\n                                <label htmlFor=\"quarta\"> Quarta-Feira</label>\r\n                            </div>\r\n                            <div className={styles.dia} style={{display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '1rem'}}>\r\n                                <input type=\"checkbox\" className=\"checkbox\" id=\"quinta\" name=\"quinta\" value=\"4\" style={{width: '18px', height: '18px'}} />\r\n                                <label htmlFor=\"quinta\"> Quinta-Feira</label>\r\n                            </div>\r\n                            <div className={styles.dia} style={{display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '1rem'}}>\r\n                                <input type=\"checkbox\" className=\"checkbox\" id=\"sexta\" name=\"sexta\" value=\"5\" style={{width: '18px', height: '18px'}} />\r\n                                <label htmlFor=\"sexta\"> Sexta-Feira</label>\r\n                            </div>\r\n                            <div className={styles.dia} style={{display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '1rem'}}>\r\n                                <input type=\"checkbox\" className=\"checkbox\" id=\"sabado\" name=\"sabado\" value=\"6\" style={{width: '18px', height: '18px'}} />\r\n                                <label htmlFor=\"sabado\"> Sábado</label>\r\n                            </div>\r\n                        </div>\r\n                        \r\n\r\n                        \r\n                        {/* <div className={styles.expediente}> */}\r\n                            {/* <div className={styles.leftSide}>\r\n                                <p>Inicio:</p>\r\n                                <input type=\"time\" id=\"inicioExpediente\" defaultValue={inicioExpediente} onChange={(e) => setInicioExpediente(e.target.value)}/>\r\n                            </div> */}\r\n\r\n                            {/* <div className={styles.rightSide}>\r\n                                <p>Termino:</p>\r\n                                {inicioExpediente === '' ? \r\n                                    <input type=\"time\" id=\"terminoExpediente\" disabled/>\r\n                                :\r\n                                    <input type=\"time\" defaultValue={terminoExpediente} onChange={(e) => setTerminoExpediente(e.target.value)}/>\r\n                                }\r\n                            </div> */}\r\n\r\n                            <Div style={{width: '100%', marginTop: '2rem'}}>\r\n                                <FormControl variant=\"outlined\" fullWidth> \r\n                                    <>       \r\n                                        <InputLabel size=\"small\">Inicio Expediente</InputLabel>\r\n                                        <Select\r\n                                            size=\"small\"\r\n                                            labelId=\"inicioExpediente\"\r\n                                            id=\"inicioExpediente\"\r\n                                            label=\"inicioExpediente\"\r\n                                            name=\"inicioExpediente\" \r\n                                            onChange={(e) => setInicioExpediente(e.target.value)}\r\n                                            value={inicioExpediente}\r\n                                        >\r\n                                            {horas.map(hr => (<MenuItem key={hr} value={hr}>{hr}</MenuItem>))}\r\n                                        </Select>\r\n                                    </>\r\n                                </FormControl>\r\n                            </Div>\r\n\r\n                            <Div style={{width: '100%'}}>\r\n                                <FormControl variant=\"outlined\" fullWidth disabled={(!inicioExpediente) ? true : false}> \r\n                                    <>       \r\n                                        <InputLabel size=\"small\">Termino Expediente</InputLabel>\r\n                                        <Select\r\n                                            size=\"small\"\r\n                                            labelId=\"terminoExpediente\"\r\n                                            id=\"terminoExpediente\"\r\n                                            label=\"terminoExpediente\"\r\n                                            name=\"terminoExpediente\" \r\n                                            onChange={(e) => setTerminoExpediente(e.target.value)}\r\n                                            value={terminoExpediente}\r\n                                        >\r\n                                            {horas.map(hr => {\r\n                                                if(parseInt(hr) > parseInt(inicioExpediente)){\r\n                                                    return(<MenuItem key={hr} value={hr}>{hr}</MenuItem>)\r\n                                                }\r\n                                            })}\r\n                                        </Select>\r\n                                    </>\r\n                                </FormControl>\r\n                            </Div>\r\n                        {/* </div> */}\r\n                        \r\n                       \r\n                        \r\n                        {/* <div className={styles.almoco}> */}\r\n                            {/* <div className={styles.leftSide}>\r\n                                <p>Inicio:</p>\r\n                                <input type=\"time\" id=\"inicioAlmoco\" defaultValue={inicioAlmoco} onChange={(e) => setInicioAlmoco(e.target.value)}/>\r\n                            </div> */}\r\n\r\n                            {/* <div className={styles.rightSide}>\r\n                                <p>Termino:</p>\r\n                                {inicioAlmoco === '' ? \r\n                                    <input type=\"time\" id=\"terminoAlmoco\" disabled/>\r\n                                :\r\n                                    <input type=\"time\" defaultValue={terminoAlmoco} onChange={(e) => setTerminoAlmoco(e.target.value)}/>\r\n                                }\r\n                            </div> */}\r\n\r\n                            <Div style={{width: '100%'}}>\r\n                                <FormControl variant=\"outlined\" fullWidth disabled={(!inicioExpediente && !terminoExpediente) ? true : false}> \r\n                                    <>        \r\n                                        <InputLabel size=\"small\">Inicio Almoço</InputLabel>\r\n                                        <Select\r\n                                            size=\"small\"\r\n                                            labelId=\"inicioAlmoco\"\r\n                                            id=\"inicioAlmoco\"\r\n                                            label=\"inicioAlmoco\"\r\n                                            name=\"inicioAlmoco\" \r\n                                            onChange={(e) => setAlmoco(e.target.value)}\r\n                                            value={inicioAlmoco}\r\n                                        >\r\n                                            {horas.map(hr => {\r\n                                                if((parseInt(hr) > parseInt(inicioExpediente)) && parseInt(hr) < parseInt(terminoExpediente)){\r\n                                                    return(<MenuItem key={hr} value={hr}>{hr}</MenuItem>)\r\n                                                }\r\n                                            })}   \r\n                                        </Select>\r\n                                    </>\r\n                                </FormControl>\r\n                            </Div>\r\n                            \r\n                            \r\n                            {/* {horas.map(hr => (<h1>{hr}</h1>))}    */}\r\n\r\n                            <Div style={{width: '100%'}}>\r\n                                <FormControl variant=\"outlined\" fullWidth disabled> \r\n                                    <>       \r\n                                        <InputLabel size=\"small\">Fim Almoço</InputLabel>\r\n                                        <Select\r\n                                            size=\"small\"\r\n                                            labelId=\"terminoAlmoco\"\r\n                                            id=\"terminoAlmoco\"\r\n                                            label=\"terminoAlmoco\"\r\n                                            name=\"terminoAlmoco\" \r\n                                            value={terminoAlmoco}\r\n                                        >\r\n                                            <MenuItem key={terminoAlmoco} value={terminoAlmoco}>{terminoAlmoco}</MenuItem>  \r\n                                        </Select>\r\n                                    </>\r\n                                </FormControl>\r\n                            </Div>\r\n                        {/* </div> */}\r\n                        \r\n                        <Button variant=\"contained\" fullWidth onClick={enviar} style={{marginTop: '1rem'}}>Salvar</Button>\r\n                        \r\n                    </form>\r\n                {/* </div> */}\r\n            </BaseLayout>\r\n        </NavBar>\r\n    )\r\n}\r\n\r\nexport default DisponibilidadeMedica","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\Navbar\\index.jsx",["391","392","393","394","395","396","397"],"import { useState, useEffect } from 'react'\r\nimport {\r\n    Box,\r\n    Divider,\r\n    Drawer,\r\n    IconButton,\r\n    List,\r\n    ListItemButton,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Typography,\r\n    useMediaQuery,\r\n    useTheme\r\n} from '@mui/material'\r\n\r\nimport {\r\n    Assignment,\r\n    ExitToApp,\r\n    Dashboard,\r\n    DateRange,\r\n    Group,\r\n    InsertInvitation,\r\n    MedicalServices,\r\n    Person,\r\n    Settings,\r\n    EventNote,\r\n  } from '@mui/icons-material'\r\nimport api from '../../services/api'\r\nimport ListItemLink from './ListItemLink'\r\nimport Logo from '../../img/logoAzul.png'\r\nimport { useDrawerContext } from '../../context/DrawerContext'\r\n\r\nexport default function NavBar({ children, exit }) {\r\n    const theme = useTheme()\r\n    const smDown = useMediaQuery(theme.breakpoints.down('sm'))\r\n    const [tipo, setTipo] = useState(\"\")\r\n\r\n    const { isDrawerOpen, toggleDrawerOpen } = useDrawerContext()\r\n\r\n    useEffect(() => {\r\n        getType()\r\n    }, [])\r\n\r\n    async function getType(){\r\n        const result = await api.get('/usuario/getType')\r\n        setTipo(result.data.tipo)\r\n    }\r\n    \r\n    return (\r\n        <Box>\r\n            <Drawer open={isDrawerOpen} variant={smDown ? 'temporary' : 'permanent'} onClose={toggleDrawerOpen}>\r\n                <Box width={theme.spacing(28)} height='100%' display='flex' flexDirection='column'>\r\n                    <Box width='100%' height={theme.spacing(20)} display='flex' alignItems='center' justifyContent='center'>\r\n                        <img src={Logo} alt='Telemedicina' width='100vh' height='100vh' />\r\n                    </Box>\r\n                    <Divider />\r\n                    <Box flex={1}>\r\n                        <List>\r\n                            <ListItemLink\r\n                                icon={<Dashboard/>}\r\n                                label='Página inicial'\r\n                                to='/inicio'                            \r\n                            />\r\n\r\n                            {tipo === 'Admin' && \r\n                                <>\r\n                                    <ListItemLink\r\n                                        icon={<Group />}\r\n                                        label='Gerenciar Usuários'\r\n                                        to='/admin'                            \r\n                                    />                 \r\n                                    <ListItemLink\r\n                                        icon={<MedicalServices />}\r\n                                        label='Novos Médicos'\r\n                                        to='/novos_medicos'                            \r\n                                    />  \r\n                                </>               \r\n                            }\r\n\r\n                            {tipo === 'Paciente' && \r\n                                <>\r\n                                    <ListItemLink\r\n                                        icon={<InsertInvitation />}\r\n                                        label='Agendar Consulta'\r\n                                        to='/consulta/adicionar'\r\n                                    />\r\n                                    \r\n                                </>                        \r\n                            }\r\n                            {tipo === 'Medico' && \r\n                                <>\r\n                                    <ListItemLink\r\n                                        icon={<DateRange />}\r\n                                        label='Disponibilidade'\r\n                                        to='/config/disponibilidademedica'\r\n                                    />\r\n                                    \r\n                                </>     \r\n                            }\r\n\r\n                            {tipo !== 'Admin' && \r\n                                <>\r\n                                    <ListItemLink\r\n                                        icon={<DateRange />}\r\n                                        label='Minhas Consultas'\r\n                                        to='/consultas'\r\n                                    />\r\n\r\n                                    <ListItemLink\r\n                                        icon={<DateRange />}\r\n                                        label='Agenda'\r\n                                        to='/agenda'\r\n                                    />  \r\n                                    <ListItemLink\r\n                                        icon={<EventNote />}\r\n                                        label='Historico Consultas'\r\n                                        to='/historico'\r\n                                    />  \r\n                                </>\r\n                            }\r\n\r\n                            <ListItemLink\r\n                                icon={<Person />}\r\n                                label='Perfil'\r\n                                to='/perfil'\r\n                            />                             \r\n                            \r\n                            <ListItemLink\r\n                                icon={<ExitToApp />}\r\n                                label='Sair'\r\n                                to='exit'\r\n                            />\r\n                        </List>\r\n                    </Box>\r\n                </Box>\r\n            </Drawer>\r\n            <Box height='100vh' marginLeft={smDown ? 0 : theme.spacing(28)}>\r\n                {children}\r\n            </Box>\r\n\r\n        </Box>\r\n    )\r\n}",["398","399"],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\Navbar\\ListItemLink\\index.js",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\Navbar\\ListItemLink\\ListItemLink.jsx",["400"],"import { useEffect } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport {\r\n    ListItemButton,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Icon\r\n} from '@mui/material'\r\nimport { useAuthContext } from '../../../context/AuthContext'\r\n\r\n\r\nexport default function ListItemLink(props) {\r\n    const navigate = useNavigate()\r\n    const { logout } = useAuthContext()\r\n\r\n    const handleLogout = () => {\r\n        logout()\r\n    }\r\n    \r\n    const handleClick = () => {\r\n        if (props.to === 'exit') {\r\n            handleLogout()\r\n        } else {\r\n            navigate(props.to)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ListItemButton onClick={handleClick}>\r\n            <ListItemIcon>\r\n                <Icon>\r\n                    {props.icon}\r\n                </Icon>\r\n            </ListItemIcon>\r\n            <ListItemText primary={props.label} />\r\n        </ListItemButton>\r\n    )\r\n}","C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\NavBar\\index.jsx",["401","402","403","404","405","406","407"],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\NavBar\\ListItemLink\\index.js",[],"C:\\Users\\lucas\\Documents\\ADS\\TG\\MedSync---Frontend\\src\\components\\NavBar\\ListItemLink\\ListItemLink.jsx",["408"],{"ruleId":"409","replacedBy":"410"},{"ruleId":"411","replacedBy":"412"},{"ruleId":"413","severity":1,"message":"414","line":14,"column":8,"nodeType":"415","messageId":"416","endLine":14,"endColumn":21},{"ruleId":"413","severity":1,"message":"417","line":19,"column":8,"nodeType":"415","messageId":"416","endLine":19,"endColumn":25},{"ruleId":"413","severity":1,"message":"418","line":21,"column":8,"nodeType":"415","messageId":"416","endLine":21,"endColumn":23},{"ruleId":"413","severity":1,"message":"419","line":25,"column":8,"nodeType":"415","messageId":"416","endLine":25,"endColumn":22},{"ruleId":"413","severity":1,"message":"420","line":26,"column":8,"nodeType":"415","messageId":"416","endLine":26,"endColumn":25},{"ruleId":"413","severity":1,"message":"421","line":3,"column":20,"nodeType":"415","messageId":"416","endLine":3,"endColumn":24},{"ruleId":"413","severity":1,"message":"422","line":20,"column":5,"nodeType":"415","messageId":"416","endLine":20,"endColumn":18},{"ruleId":"413","severity":1,"message":"423","line":1,"column":9,"nodeType":"415","messageId":"416","endLine":1,"endColumn":18},{"ruleId":"413","severity":1,"message":"424","line":3,"column":54,"nodeType":"415","messageId":"416","endLine":3,"endColumn":59},{"ruleId":"413","severity":1,"message":"425","line":4,"column":106,"nodeType":"415","messageId":"416","endLine":4,"endColumn":116},{"ruleId":"426","severity":1,"message":"427","line":54,"column":8,"nodeType":"428","endLine":54,"endColumn":10,"suggestions":"429"},{"ruleId":"413","severity":1,"message":"425","line":3,"column":81,"nodeType":"415","messageId":"416","endLine":3,"endColumn":91},{"ruleId":"430","severity":1,"message":"431","line":176,"column":35,"nodeType":"432","messageId":"433","endLine":176,"endColumn":37},{"ruleId":"413","severity":1,"message":"425","line":3,"column":28,"nodeType":"415","messageId":"416","endLine":3,"endColumn":38},{"ruleId":"413","severity":1,"message":"434","line":12,"column":10,"nodeType":"415","messageId":"416","endLine":12,"endColumn":18},{"ruleId":"426","severity":1,"message":"435","line":18,"column":5,"nodeType":"428","endLine":18,"endColumn":7,"suggestions":"436"},{"ruleId":"413","severity":1,"message":"425","line":2,"column":83,"nodeType":"415","messageId":"416","endLine":2,"endColumn":93},{"ruleId":"413","severity":1,"message":"437","line":23,"column":10,"nodeType":"415","messageId":"416","endLine":23,"endColumn":21},{"ruleId":"426","severity":1,"message":"438","line":34,"column":6,"nodeType":"428","endLine":34,"endColumn":23,"suggestions":"439"},{"ruleId":"426","severity":1,"message":"440","line":38,"column":6,"nodeType":"428","endLine":38,"endColumn":16,"suggestions":"441"},{"ruleId":"426","severity":1,"message":"442","line":42,"column":6,"nodeType":"428","endLine":42,"endColumn":12,"suggestions":"443"},{"ruleId":"413","severity":1,"message":"444","line":3,"column":9,"nodeType":"415","messageId":"416","endLine":3,"endColumn":13},{"ruleId":"413","severity":1,"message":"445","line":26,"column":19,"nodeType":"415","messageId":"416","endLine":26,"endColumn":27},{"ruleId":"413","severity":1,"message":"446","line":27,"column":12,"nodeType":"415","messageId":"416","endLine":27,"endColumn":21},{"ruleId":"426","severity":1,"message":"442","line":37,"column":6,"nodeType":"428","endLine":37,"endColumn":22,"suggestions":"447"},{"ruleId":"413","severity":1,"message":"448","line":130,"column":9,"nodeType":"415","messageId":"416","endLine":130,"endColumn":15},{"ruleId":"413","severity":1,"message":"425","line":8,"column":84,"nodeType":"415","messageId":"416","endLine":8,"endColumn":94},{"ruleId":"413","severity":1,"message":"449","line":9,"column":8,"nodeType":"415","messageId":"416","endLine":9,"endColumn":30},{"ruleId":"413","severity":1,"message":"450","line":53,"column":15,"nodeType":"415","messageId":"416","endLine":53,"endColumn":19},{"ruleId":"430","severity":1,"message":"431","line":55,"column":139,"nodeType":"432","messageId":"433","endLine":55,"endColumn":141},{"ruleId":"430","severity":1,"message":"451","line":56,"column":22,"nodeType":"432","messageId":"433","endLine":56,"endColumn":24},{"ruleId":"430","severity":1,"message":"431","line":106,"column":17,"nodeType":"432","messageId":"433","endLine":106,"endColumn":19},{"ruleId":"413","severity":1,"message":"452","line":14,"column":5,"nodeType":"415","messageId":"416","endLine":14,"endColumn":14},{"ruleId":"413","severity":1,"message":"425","line":17,"column":5,"nodeType":"415","messageId":"416","endLine":17,"endColumn":15},{"ruleId":"413","severity":1,"message":"453","line":8,"column":15,"nodeType":"415","messageId":"416","endLine":8,"endColumn":26},{"ruleId":"413","severity":1,"message":"454","line":8,"column":28,"nodeType":"415","messageId":"416","endLine":8,"endColumn":34},{"ruleId":"413","severity":1,"message":"455","line":8,"column":36,"nodeType":"415","messageId":"416","endLine":8,"endColumn":41},{"ruleId":"413","severity":1,"message":"456","line":10,"column":10,"nodeType":"415","messageId":"416","endLine":10,"endColumn":20},{"ruleId":"413","severity":1,"message":"457","line":10,"column":22,"nodeType":"415","messageId":"416","endLine":10,"endColumn":33},{"ruleId":"413","severity":1,"message":"458","line":14,"column":10,"nodeType":"415","messageId":"416","endLine":14,"endColumn":19},{"ruleId":"426","severity":1,"message":"459","line":34,"column":7,"nodeType":"428","endLine":34,"endColumn":9,"suggestions":"460"},{"ruleId":"413","severity":1,"message":"425","line":14,"column":28,"nodeType":"415","messageId":"416","endLine":14,"endColumn":38},{"ruleId":"413","severity":1,"message":"461","line":4,"column":10,"nodeType":"415","messageId":"416","endLine":4,"endColumn":13},{"ruleId":"413","severity":1,"message":"462","line":5,"column":8,"nodeType":"415","messageId":"416","endLine":5,"endColumn":17},{"ruleId":"413","severity":1,"message":"463","line":24,"column":14,"nodeType":"415","messageId":"416","endLine":24,"endColumn":29},{"ruleId":"413","severity":1,"message":"464","line":28,"column":14,"nodeType":"415","messageId":"416","endLine":28,"endColumn":27},{"ruleId":"413","severity":1,"message":"465","line":2,"column":10,"nodeType":"415","messageId":"416","endLine":2,"endColumn":21},{"ruleId":"413","severity":1,"message":"425","line":11,"column":5,"nodeType":"415","messageId":"416","endLine":11,"endColumn":15},{"ruleId":"466","severity":1,"message":"467","line":161,"column":63,"nodeType":"468","messageId":"469","endLine":161,"endColumn":65},{"ruleId":"426","severity":1,"message":"470","line":44,"column":6,"nodeType":"428","endLine":44,"endColumn":8,"suggestions":"471"},{"ruleId":"413","severity":1,"message":"423","line":2,"column":20,"nodeType":"415","messageId":"416","endLine":2,"endColumn":29},{"ruleId":"413","severity":1,"message":"425","line":3,"column":56,"nodeType":"415","messageId":"416","endLine":3,"endColumn":66},{"ruleId":"413","severity":1,"message":"472","line":7,"column":11,"nodeType":"415","messageId":"416","endLine":7,"endColumn":19},{"ruleId":"430","severity":1,"message":"431","line":23,"column":28,"nodeType":"432","messageId":"433","endLine":23,"endColumn":30},{"ruleId":"413","severity":1,"message":"425","line":3,"column":56,"nodeType":"415","messageId":"416","endLine":3,"endColumn":66},{"ruleId":"426","severity":1,"message":"473","line":14,"column":8,"nodeType":"428","endLine":14,"endColumn":10,"suggestions":"474"},{"ruleId":"475","severity":1,"message":"476","line":15,"column":25,"nodeType":"477","endLine":15,"endColumn":74},{"ruleId":"413","severity":1,"message":"478","line":3,"column":8,"nodeType":"415","messageId":"416","endLine":3,"endColumn":14},{"ruleId":"413","severity":1,"message":"472","line":9,"column":11,"nodeType":"415","messageId":"416","endLine":9,"endColumn":19},{"ruleId":"413","severity":1,"message":"478","line":4,"column":8,"nodeType":"415","messageId":"416","endLine":4,"endColumn":14},{"ruleId":"413","severity":1,"message":"472","line":12,"column":11,"nodeType":"415","messageId":"416","endLine":12,"endColumn":19},{"ruleId":"413","severity":1,"message":"472","line":10,"column":9,"nodeType":"415","messageId":"416","endLine":10,"endColumn":17},{"ruleId":"413","severity":1,"message":"479","line":11,"column":9,"nodeType":"415","messageId":"416","endLine":11,"endColumn":15},{"ruleId":"426","severity":1,"message":"480","line":15,"column":7,"nodeType":"428","endLine":15,"endColumn":22,"suggestions":"481"},{"ruleId":"430","severity":1,"message":"431","line":29,"column":186,"nodeType":"432","messageId":"433","endLine":29,"endColumn":188},{"ruleId":"430","severity":1,"message":"431","line":30,"column":184,"nodeType":"432","messageId":"433","endLine":30,"endColumn":186},{"ruleId":"430","severity":1,"message":"431","line":31,"column":185,"nodeType":"432","messageId":"433","endLine":31,"endColumn":187},{"ruleId":"430","severity":1,"message":"431","line":32,"column":190,"nodeType":"432","messageId":"433","endLine":32,"endColumn":192},{"ruleId":"430","severity":1,"message":"431","line":33,"column":189,"nodeType":"432","messageId":"433","endLine":33,"endColumn":191},{"ruleId":"413","severity":1,"message":"425","line":2,"column":38,"nodeType":"415","messageId":"416","endLine":2,"endColumn":48},{"ruleId":"413","severity":1,"message":"425","line":2,"column":38,"nodeType":"415","messageId":"416","endLine":2,"endColumn":48},{"ruleId":"413","severity":1,"message":"425","line":2,"column":81,"nodeType":"415","messageId":"416","endLine":2,"endColumn":91},{"ruleId":"413","severity":1,"message":"482","line":16,"column":10,"nodeType":"415","messageId":"416","endLine":16,"endColumn":22},{"ruleId":"466","severity":1,"message":"483","line":27,"column":20,"nodeType":"468","messageId":"484","endLine":27,"endColumn":22},{"ruleId":"413","severity":1,"message":"485","line":2,"column":46,"nodeType":"415","messageId":"416","endLine":2,"endColumn":55},{"ruleId":"413","severity":1,"message":"425","line":2,"column":94,"nodeType":"415","messageId":"416","endLine":2,"endColumn":104},{"ruleId":"426","severity":1,"message":"486","line":53,"column":8,"nodeType":"428","endLine":53,"endColumn":10,"suggestions":"487"},{"ruleId":"413","severity":1,"message":"488","line":103,"column":23,"nodeType":"415","messageId":"416","endLine":103,"endColumn":29},{"ruleId":"489","severity":1,"message":"490","line":171,"column":25,"nodeType":"477","endLine":171,"endColumn":147},{"ruleId":"430","severity":1,"message":"451","line":204,"column":21,"nodeType":"432","messageId":"433","endLine":204,"endColumn":23},{"ruleId":"426","severity":1,"message":"491","line":14,"column":8,"nodeType":"428","endLine":14,"endColumn":10,"suggestions":"492"},{"ruleId":"413","severity":1,"message":"425","line":4,"column":49,"nodeType":"415","messageId":"416","endLine":4,"endColumn":59},{"ruleId":"413","severity":1,"message":"425","line":5,"column":49,"nodeType":"415","messageId":"416","endLine":5,"endColumn":59},{"ruleId":"413","severity":1,"message":"425","line":2,"column":92,"nodeType":"415","messageId":"416","endLine":2,"endColumn":102},{"ruleId":"413","severity":1,"message":"493","line":108,"column":11,"nodeType":"415","messageId":"416","endLine":108,"endColumn":23},{"ruleId":"413","severity":1,"message":"425","line":2,"column":38,"nodeType":"415","messageId":"416","endLine":2,"endColumn":48},{"ruleId":"413","severity":1,"message":"425","line":2,"column":52,"nodeType":"415","messageId":"416","endLine":2,"endColumn":62},{"ruleId":"466","severity":1,"message":"483","line":28,"column":24,"nodeType":"468","messageId":"484","endLine":28,"endColumn":26},{"ruleId":"413","severity":1,"message":"494","line":3,"column":18,"nodeType":"415","messageId":"416","endLine":3,"endColumn":28},{"ruleId":"413","severity":1,"message":"495","line":3,"column":73,"nodeType":"415","messageId":"416","endLine":3,"endColumn":82},{"ruleId":"413","severity":1,"message":"496","line":3,"column":84,"nodeType":"415","messageId":"416","endLine":3,"endColumn":100},{"ruleId":"413","severity":1,"message":"497","line":3,"column":102,"nodeType":"415","messageId":"416","endLine":3,"endColumn":110},{"ruleId":"413","severity":1,"message":"425","line":3,"column":122,"nodeType":"415","messageId":"416","endLine":3,"endColumn":132},{"ruleId":"413","severity":1,"message":"498","line":12,"column":10,"nodeType":"415","messageId":"416","endLine":12,"endColumn":30},{"ruleId":"413","severity":1,"message":"499","line":17,"column":12,"nodeType":"415","messageId":"416","endLine":17,"endColumn":24},{"ruleId":"466","severity":1,"message":"483","line":59,"column":34,"nodeType":"468","messageId":"484","endLine":59,"endColumn":36},{"ruleId":"430","severity":1,"message":"431","line":76,"column":22,"nodeType":"432","messageId":"433","endLine":76,"endColumn":24},{"ruleId":"413","severity":1,"message":"500","line":109,"column":13,"nodeType":"415","messageId":"416","endLine":109,"endColumn":30},{"ruleId":"413","severity":1,"message":"501","line":138,"column":14,"nodeType":"415","messageId":"416","endLine":138,"endColumn":39},{"ruleId":"466","severity":1,"message":"467","line":268,"column":59,"nodeType":"468","messageId":"469","endLine":268,"endColumn":61},{"ruleId":"466","severity":1,"message":"467","line":309,"column":59,"nodeType":"468","messageId":"469","endLine":309,"endColumn":61},{"ruleId":"413","severity":1,"message":"425","line":6,"column":5,"nodeType":"415","messageId":"416","endLine":6,"endColumn":15},{"ruleId":"413","severity":1,"message":"502","line":8,"column":5,"nodeType":"415","messageId":"416","endLine":8,"endColumn":19},{"ruleId":"413","severity":1,"message":"503","line":9,"column":5,"nodeType":"415","messageId":"416","endLine":9,"endColumn":17},{"ruleId":"413","severity":1,"message":"504","line":10,"column":5,"nodeType":"415","messageId":"416","endLine":10,"endColumn":17},{"ruleId":"413","severity":1,"message":"494","line":11,"column":5,"nodeType":"415","messageId":"416","endLine":11,"endColumn":15},{"ruleId":"413","severity":1,"message":"505","line":17,"column":5,"nodeType":"415","messageId":"416","endLine":17,"endColumn":15},{"ruleId":"413","severity":1,"message":"506","line":25,"column":5,"nodeType":"415","messageId":"416","endLine":25,"endColumn":13},{"ruleId":"409","replacedBy":"507"},{"ruleId":"411","replacedBy":"508"},{"ruleId":"413","severity":1,"message":"423","line":1,"column":10,"nodeType":"415","messageId":"416","endLine":1,"endColumn":19},{"ruleId":"413","severity":1,"message":"425","line":6,"column":5,"nodeType":"415","messageId":"416","endLine":6,"endColumn":15},{"ruleId":"413","severity":1,"message":"502","line":8,"column":5,"nodeType":"415","messageId":"416","endLine":8,"endColumn":19},{"ruleId":"413","severity":1,"message":"503","line":9,"column":5,"nodeType":"415","messageId":"416","endLine":9,"endColumn":17},{"ruleId":"413","severity":1,"message":"504","line":10,"column":5,"nodeType":"415","messageId":"416","endLine":10,"endColumn":17},{"ruleId":"413","severity":1,"message":"494","line":11,"column":5,"nodeType":"415","messageId":"416","endLine":11,"endColumn":15},{"ruleId":"413","severity":1,"message":"505","line":17,"column":5,"nodeType":"415","messageId":"416","endLine":17,"endColumn":15},{"ruleId":"413","severity":1,"message":"506","line":25,"column":5,"nodeType":"415","messageId":"416","endLine":25,"endColumn":13},{"ruleId":"413","severity":1,"message":"423","line":1,"column":10,"nodeType":"415","messageId":"416","endLine":1,"endColumn":19},"no-native-reassign",["509"],"no-negated-in-lhs",["510"],"no-unused-vars","'Configuracoes' is defined but never used.","Identifier","unusedVar","'UsuariosCadastrar' is defined but never used.","'AgendarConsulta' is defined but never used.","'EditarConsulta' is defined but never used.","'AdicionarConsulta' is defined but never used.","'Link' is defined but never used.","'DivCadastreSe' is defined but never used.","'useEffect' is defined but never used.","'Alert' is defined but never used.","'IconButton' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["511"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'consulta' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getConsulta'. Either include it or remove the dependency array.",["512"],"'diaDaSemana' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getDoctorsBySpecialty'. Either include it or remove the dependency array.",["513"],"React Hook useEffect has a missing dependency: 'getSpecialtieByDoctor'. Either include it or remove the dependency array.",["514"],"React Hook useEffect has a missing dependency: 'horasDisponiveisMedico'. Either include it or remove the dependency array.",["515"],"'Done' is defined but never used.","'setHoras' is assigned a value but never used.","'dayOfWeek' is assigned a value but never used.",["516"],"'action' is assigned a value but never used.","'UnstyledTabsCustomized' is defined but never used.","'data' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'TextField' is defined but never used.","'BorderColor' is defined but never used.","'Delete' is defined but never used.","'Event' is defined but never used.","'ButtonTool' is defined but never used.","'PaperStyled' is defined but never used.","'configure' is defined but never used.","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.",["517"],"'Box' is defined but never used.","'CloseIcon' is defined but never used.","'minhasConsultas' is defined but never used.","'configuracoes' is defined but never used.","'useNavigate' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'getUserType'. Either include it or remove the dependency array.",["518"],"'navigate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getEmail'. Either include it or remove the dependency array.",["519"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Button' is defined but never used.","'params' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAppointments'. Either include it or remove the dependency array.",["520"],"'appointments' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'CardMedia' is defined but never used.","React Hook useEffect has missing dependencies: 'formatDateAppointment', 'getDoctor', 'getPaciente', 'getSpecialtie', and 'limitTimeForChange'. Either include them or remove the dependency array.",["521"],"'result' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","React Hook useEffect has missing dependencies: 'getProntuario' and 'getProntuarioById'. Either include them or remove the dependency array.",["522"],"'handleClick4' is assigned a value but never used.","'Typography' is defined but never used.","'FormGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'ConstructionOutlined' is defined but never used.","'diasDaSemana' is assigned a value but never used.","'dias_selecionados' is assigned a value but never used.","'verificarDiasSelecionados' is defined but never used.","'ListItemButton' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'Assignment' is defined but never used.","'Settings' is defined but never used.",["509"],["510"],"no-global-assign","no-unsafe-negation",{"desc":"523","fix":"524"},{"desc":"525","fix":"526"},{"desc":"527","fix":"528"},{"desc":"529","fix":"530"},{"desc":"531","fix":"532"},{"desc":"533","fix":"534"},{"desc":"535","fix":"536"},{"desc":"537","fix":"538"},{"desc":"539","fix":"540"},{"desc":"541","fix":"542"},{"desc":"543","fix":"544"},{"desc":"545","fix":"546"},"Update the dependencies array to be: [id]",{"range":"547","text":"548"},"Update the dependencies array to be: [getConsulta]",{"range":"549","text":"550"},"Update the dependencies array to be: [getDoctorsBySpecialty, idEspecialidade]",{"range":"551","text":"552"},"Update the dependencies array to be: [getSpecialtieByDoctor, idMedico]",{"range":"553","text":"554"},"Update the dependencies array to be: [data, horasDisponiveisMedico]",{"range":"555","text":"556"},"Update the dependencies array to be: [idMedico, data, horasDisponiveisMedico]",{"range":"557","text":"558"},"Update the dependencies array to be: [params.id]",{"range":"559","text":"560"},"Update the dependencies array to be: [getUserType]",{"range":"561","text":"562"},"Update the dependencies array to be: [getEmail]",{"range":"563","text":"564"},"Update the dependencies array to be: [filterActived, getAppointments]",{"range":"565","text":"566"},"Update the dependencies array to be: [formatDateAppointment, getDoctor, getPaciente, getSpecialtie, limitTimeForChange]",{"range":"567","text":"568"},"Update the dependencies array to be: [getProntuario, getProntuarioById]",{"range":"569","text":"570"},[1826,1828],"[id]",[667,669],"[getConsulta]",[1089,1106],"[getDoctorsBySpecialty, idEspecialidade]",[1166,1176],"[getSpecialtieByDoctor, idMedico]",[1237,1243],"[data, horasDisponiveisMedico]",[1268,1284],"[idMedico, data, horasDisponiveisMedico]",[1225,1227],"[params.id]",[1592,1594],"[getUserType]",[493,495],"[getEmail]",[544,559],"[filterActived, getAppointments]",[1947,1949],"[formatDateAppointment, getDoctor, getPaciente, getSpecialtie, limitTimeForChange]",[411,413],"[getProntuario, getProntuarioById]"]